{"version":3,"sources":["util/EventDispatcher.ts","sterling/SterlingConnection.ts","connections/NoConnection.ts","../../../alloy-js/graph-js/dist/layouts/static/StaticLayout.js","../../../alloy-js/graph-js/dist/layouts/static/CircleLayout.js","../../../alloy-js/graph-js/dist/types/util.js","../../../alloy-js/graph-js/dist/styles/ShapeStyle.js","../../../alloy-js/graph-js/dist/types/BBox.js","../../../alloy-js/graph-js/dist/renderers/Renderer.js","../../../alloy-js/graph-js/dist/renderers/shapes/ShapeRenderer.js","../../../alloy-js/graph-js/dist/renderers/shapes/RectangleRenderer.js","../../../alloy-js/graph-js/dist/layouts/static/DagreLayout.js","../../../alloy-js/graph-js/dist/EventDispatcher.js","../../../alloy-js/graph-js/dist/managers/DragManager.js","../../../alloy-js/graph-js/dist/labellers/LinkLabeller.js","../../../alloy-js/graph-js/dist/renderers/labels/LinkLabelRenderer.js","../../../alloy-js/graph-js/dist/renderers/links/LinkRenderer.js","../../../alloy-js/graph-js/dist/renderers/links/NaturalCurveRenderer.js","../../../alloy-js/graph-js/dist/paths/Path.js","../../../alloy-js/graph-js/dist/paths/CubicBezier.js","../../../alloy-js/graph-js/dist/paths/Line.js","../../../alloy-js/graph-js/dist/paths/QuadraticBezier.js","../../../alloy-js/graph-js/dist/routers/LinkSet.js","../../../alloy-js/graph-js/dist/routers/Router.js","../../../alloy-js/graph-js/dist/routers/BundleRouter.js","../../../alloy-js/graph-js/dist/types/Point.js","../../../alloy-js/graph-js/dist/styles/LabelStyle.js","../../../alloy-js/graph-js/dist/styles/LinkStyle.js","../../../alloy-js/graph-js/dist/styles/StyleParsers.js","../../../alloy-js/graph-js/dist/managers/EdgeManager.js","../../../alloy-js/graph-js/dist/managers/HoverManager.js","../../../alloy-js/graph-js/dist/renderers/labels/LabelRenderer.js","../../../alloy-js/graph-js/dist/renderers/shapes/CircleRenderer.js","../../../alloy-js/graph-js/dist/managers/NodeManager.js","../../../alloy-js/graph-js/dist/renderers/AxesRenderer.js","../../../alloy-js/graph-js/dist/Graph.js","../../../alloy-js/graph-js/dist/layouts/static/GridLayout.js","../../../alloy-js/graph-js/dist/layouts/static/RowLayout.js","sterling/sterlingSlice.ts","features/graph/drawer-views/data/dataSlice.ts","features/graph/util.ts","features/table/TableTags.tsx","features/graph/drawer-views/edge-styling/edgeTypes.ts","features/graph/drawer-views/edge-styling/edgeStylingSlice.ts","features/graph/drawer-views/graph-settings/graphSettingsSlice.ts","features/graph/drawer-views/layout/layoutSlice.ts","features/graph/drawer-views/node-styling/nodeTypes.ts","features/graph/drawer-views/node-styling/nodeStylingSlice.ts","features/table/tableTypes.ts","features/graph/graphSlice.ts","features/source/sourceSlice.ts","features/table/tableSlice.ts","rootReducer.ts","evaluator/Evaluator.ts","evaluator/EvaluatorTable.tsx","evaluator/EvaluatorView.tsx","sterling/SterlingDrawer.tsx","features/graph/drawer-views/edge-styling/QuickEdgeStyling.tsx","features/graph/drawer-views/graph-settings/EdgeSettings.tsx","features/graph/drawer-views/layout/Layout.tsx","features/graph/drawer-views/layout/ZoomSettings.tsx","features/graph/drawer-views/projections/Projections.tsx","features/graph/drawer-components/LabelStyler.tsx","features/graph/graphTypes.ts","features/graph/drawer-views/edge-styling/components/LinkStyler.tsx","features/graph/drawer-views/edge-styling/EdgeStyling.tsx","features/graph/drawer-views/graph-settings/GraphSettings.tsx","features/graph/drawer-views/layout/QuickLayout.tsx","features/graph/drawer-views/node-styling/components/ShapeSelector.tsx","features/graph/drawer-views/node-styling/components/ShapeStyler.tsx","features/graph/drawer-views/node-styling/NodeStyling.tsx","features/graph/GraphDrawer.tsx","features/graph/GraphStage.tsx","features/graph/graphData.ts","features/nav/components/ViewGroup.tsx","features/nav/StaticNavbar.tsx","features/source/SourceDrawer.tsx","features/nav/SterlingNavbar.tsx","features/source/SourceStage.tsx","features/table/drawer-components/AlloyMultiSelect.tsx","features/table/TableDrawer.tsx","features/table/stage-components/PopoverRow.tsx","features/table/stage-components/SkolemListPopover.tsx","features/table/TableStage.tsx","features/table/stage-components/SignatureHTMLTable.tsx","features/table/stage-components/FieldHTMLTable.tsx","features/table/stage-components/SkolemHTMLTable.tsx","sterling/SterlingKeyboard.tsx","sterling/SterlingSidebar.tsx","sterling/SterlingStage.tsx","sterling/Sterling.tsx","serviceWorker.ts","index.tsx"],"names":["EventDispatcher","_listeners","type","listener","undefined","this","listeners","indexOf","push","event","listenerarray","target","slice","forEach","callback","call","index","splice","SterlingConnection","url","_url","_ws","_auto_reconnect","_auto_reconnect_interval","_connected","_heartbeat_count","_heartbeat_id","_heartbeat_interval","_heartbeat_latency","_heartbeat_timestamp","onclose","close","_initializeConnection","_request","id","expression","data","dispatchEvent","performance","now","length","instance","AlloyInstance","e","message","WebSocket","onopen","_onOpen","bind","_onClose","onerror","_onError","onmessage","_onMessage","_reconnect","_resetHeartbeat","header","_handlePong","_handleEval","_handleXML","send","window","setTimeout","request","clearTimeout","_ping","NoConnection","StaticLayout","CircleLayout","_cx","_cy","_radius","graph","bbox","boundingBox","cx","cy","w","Math","abs","h","r","min","nodes","a","PI","node","x","cos","y","sin","arguments","radius","defaults","source","paths","_defaults","pick","cloneDeep","applyShapeStyleAttributes","cloneShapeStyle","style","clone","isCircleStyle","_cloneCircleStyle","isRectangleStyle","_cloneRectangleStyle","BBox","xmin","ymin","xmax","ymax","_xmin","Infinity","_ymin","_xmax","_ymax","other","_expandBBox","_expandPoint","bounds","x0","y0","x1","y1","Renderer","ShapeRenderer","_nodes","fill","defaultFill","stroke","defaultStroke","strokeDash","defaultStrokeDash","strokeWidth","defaultStrokeWidth","points","context","setLineDash","lineWidth","fillStyle","strokeStyle","TWOPI","PI3","RectangleRenderer","_width","defaultWidth","_height","defaultHeight","width","height","nx","ny","expand","scale","t","b","l","angle","tana","tan","atan","atan2","region","save","beginPath","w2","h2","point","px","py","rect","round","_doStrokeAndFill","restore","max","h4","dx","dy","DagreLayout","options","g","graphlib","Graph","multigraph","setGraph","nodesep","ranksep","rankdir","setDefaultEdgeLabel","setNode","label","edges","edge","setEdge","layout","nodemap","Map","map","props","hw","hh","get","n","DragManager","canvas","_canvas","_quadtree","d3","_renderers","_transform","_x","_y","drag","container","subject","_dragSubject","on","_dragStart","_drag","_dragEnd","extent","renderers","renderer","reduce","acc","cur","concat","set","addAll","transform","mouse","worldx","invertX","worldy","invertY","invert","add","remove","datum","groups","_findNode","find","shape","containsPoint","k","LinkLabeller","_linkMap","_placement","links","placement","_buildCenterLabels","_buildJoinLabels","_buildSpreadLabels","np","dt","link","labels","filter","isDefined","text","buildCombinedLabel","_bezierBounds","join","LinkLabelRenderer","_links","_color","defaultColor","_font","defaultFont","_highlight","color","font","includes","textAlign","textBaseline","path","p","pointAlong","fillText","LinkRenderer","lowlightStroke","lowlightWidth","_doFill","PI6","NaturalCurveRenderer","_arrowheadSize","partition","highlight","lowlight","_drawLinks","hx","hy","_doStrokeHighlight","_drawArrows","_doFillHighlight","lx","ly","_doStroke","arrowx","arrowy","_doStrokeLowlight","_doFillLowlight","ng","xs","ys","sz","i","moveTo","lineTo","closePath","apply","angleAlong","arrow","_arrow","Path","transformed","CubicBezier","start","c1","c2","end","_start","_c1","_c2","_end","s","u","bezierCurveTo","Line","QuadraticBezier","control","_control","c","quadraticCurveTo","LinkSet","_all","_map","_ind","_addDirectional","_addNonDirectional","_getNonDirectional","targetmap","group","has","len","sourcemap","calculateShapeOffset","center","offset","intersect","BundleRouter","_collapse","_factor","srcPoint","trgPoint","sourceShape","_nodeShapeMap","targetShape","selfLoopPoints","_bundleMap","_bundlePoints","_calcalateShapeOffsets","factor","size","sqrt","distance","rt","sign","bx","by","percent","_edgeLinkMap","_groupLinkMap","_linkEdgeMap","_nameNodeMap","_nodeEdgeMap","_ungroupedLinks","Array","from","keys","shapes","buildNodeEdgeMap","ungrouped","allgroups","values","collapsed","edgegroup","edgemap","collapseEdges","edgeset","groupname","sourceName","targetName","updateLinks","calculateLink","recalculated","Set","allBetween","applyLabelStyleAttributes","cloneLabelStyle","applyLinkStyleAttributes","cloneLinkStyle","parseLabelStyles","labelStyles","nest","parent","children","child","_isEdgeStyle","_isNodeStyle","getData","parseShapeStyles","shapeStyles","applyShapeAttributes","EdgeManager","_labeller","_router","_edges","_shapes","_styles","_labels","getPlacement","setPlacement","styles","setData","_recalculateRenderers","updateLinksConnectedTo","setLinkMap","getLinkMap","update","linkset","getLinks","labelstyle","labelRenderer","delete","defaultRenderer","remaining","groupnames","linkStyles","parseLinkStyles","linkStyle","linkRenderer","getUngroupedLinks","_calculateLinkRenderers","_calculateLabelRenderers","HoverManager","_delaunay","_lastLink","_maxDist","_numsections","_onHover","render","linkEdgeMap","Delaunay","x2","y2","d","dist","_distance","_setHover","LabelRenderer","match","parseInt","base","floor","CircleRenderer","defaultRadius","d2","arc","NodeManager","Error","_calculateShapeRenderers","labelStyle","available","extractNodes","shapeStyle","shapeRenderer","names","name","AxesRenderer","_axesVisible","_gridVisible","_axisColor","_gridColor","_ticks","_ticksize","_labelpadding","_gridPattern","visible","align","xrange","range","yrange","ratio","tickoffset","xticks","ticks","yticks","tick","ty","lineDashOffset","tx","toString","value","_context","_axes","_linkLabelRenderers","_linkRenderers","_nodeLabelRenderers","_nodeRenderers","_zoom","_nodeManager","_edgeManager","_dragManager","_hoverManager","_initializeCanvas","axesVisible","router","getRouter","setFactor","getFactor","setLabelPlacement","getLabelPlacement","setEdges","getEdges","setStyles","gridVisible","getComputedStyle","getPropertyValue","_setDimensions","_render","nodeobjs","setNodes","shapeRenderers","setShapes","linkRenderers","labelRenderers","transition","duration","translate","getContext","scaleExtent","_zoomed","addEventListener","updateEdgesConnectedTo","resize","requestAnimationFrame","rescaleX","rescaleY","clearRect","setAttribute","domain","setTransform","_setTransform","GridLayout","row","col","RowLayout","_groups","ngroup","sterlingSlice","createSlice","initialState","mainView","tableView","graphView","sourceView","welcomeDescription","welcomeTitle","reducers","setGraphView","state","action","payload","setInstance","setMainView","setSourceView","setTableView","actions","asAttribute","atoms","collapseProjections","projections","unprojected","List","dataSlice","addProjection","sig","atom","nextAtom","atm","idx","nxt","previousAtom","removeProjection","sort","alphabetical","setProjection","toggleAsAttribute","field","curr","toggleCollapseProjections","extraReducers","build","addCase","univ","signatures","subTypes","fields","skolems","arity","both","withMutations","findAtom","item","list","localeCompare","POPPER_MODIFIERS","preventOverflow","enabled","hide","COLOR_SCHEMES","specifier","colors","hex","schemes","DEFAULT_COLORS","background","backgroundGradient","strings","foreground","rgb","SignatureTag","signature","nameFunction","className","React","FieldTag","tokens","split","FieldTagEls","icon","iconSize","padding","SkolemTag","skolem","buildFieldTree","hideEmpty","tuples","Fields","Skolems","collapseEdgeStyle","collapseScheme","hideEmptyFields","selected","treeField","treeSkolem","edgeStylingSlice","clearAll","clearCurrent","collapseTreeNode","expandTreeNode","selectTreeNode","setColorScheme","newlink","newlabel","setLabelColor","setLabelSize","isNaN","setStroke","setStrokeWidth","toggleCollapseEdgeStyle","toggleCollapseScheme","toggleHideEmptyFields","builder","buildSkolemTree","defaultScheme","graphSettingsSlice","bundleFactor","collapseEdgeSettings","collapseGraphSettings","edgeLabelPlacement","setBundleFactor","toggleAxesVisible","toggleCollapseEdgeSettings","toggleCollapseGraphSettings","toggleGridVisible","ranker","layoutSlice","setAlign","setNodeSep","setRankDir","setRanker","setRankSep","buildTypeTree","populate","HorizontalAlignment","LayoutDirection","SortDirection","SortMethod","TablesType","collapseNodeStyle","hideDisconnected","hideEmptySets","nodeTree","nodeStylingSlice","setFill","newshape","setHeight","setRadius","setShape","next","convertToShape","setWidth","toggleCollapseNodeStyle","toggleHideDisconnected","toggleHideEmptySets","graphSlice","combineReducers","reducer","sourceSlice","setSelected","SKOLEM_COLORS","buildNameFunction","removeThis","replace","buildSortFunction","method","Size","sorting","sizeSort","direction","Ascending","Alphabetical","alphabeticalSort","Group","groupSort","alignment","Left","collapseData","collapseLayout","collapseTables","dataSelected","highlightSkolems","layoutDirection","Row","removeBuiltin","removeEmpty","primarySort","Descending","secondarySort","skolemColors","tablesType","All","tableSlice","clearSelectedData","deselectData","Select","selectData","setAlignment","setLayoutDirection","setSort","setTableTypes","toggleCollapseData","toggleCollapseLayout","toggleCollapseTables","toggleHighlightSkolems","toggleRemoveBuiltin","toggleRemoveEmpty","toggleRemoveThis","sterlingApp","Evaluator","connection","_connection","_expressions","_pending","_parse","_nextid","error","result","response","trim","_setPending","requestEvaluateExpression","EvaluatorTable","parseResult","key","j","EvaluatorView","_botRef","_textRef","_onDown","textarea","current","selectionStart","history","count","setState","_onEnter","evaluator","evaluate","_onKeyDown","preventDefault","_onUp","_onPending","_setActive","_onReady","expressions","_scrollDown","bottom","scrollIntoView","active","readOnly","_setText","createRef","table","prevProps","prevState","removeEventListener","SuccessIcon","ErrorIcon","content","hoverOpenDelay","intent","Intent","PRIMARY","small","minimal","onClick","clear","title","DANGER","NONE","isTableable","description","ref","autoComplete","placeholder","spellCheck","onKeyDown","Component","SterlingDrawer","Section","collapseIcon","toUpperCase","onToggle","isOpen","keepChildrenMounted","mapDispatch","connector","connect","collapse","flexWrap","maxHeight","overflow","scheme","margin","minWidth","minHeight","LABEL_PLACEMENT_OPTIONS","inline","allowNumericCharactersOnly","minorStepSize","stepSize","majorStepSize","onValueChange","onChange","ALIGN_OPTIONS","DIRECTION_OPTIONS","RANKER_OPTIONS","Object","assign","zoomToFit","toArray","projection","Fragment","ellipsize","hasBackdrop","modifiers","position","Position","BOTTOM","usePortal","wrapperTagName","vertical","LabelStyler","_","strVal","onChangeSize","onChangeColor","LEFT","backgroundColor","triangle","mapTreeToNodes","tree","childNodes","isExpanded","isSelected","hasCaret","LinkStyler","onChangeStroke","onChangeStrokeWidth","attr","labelColor","labelSize","fieldTree","skolemTree","isempty","hasskolem","trees","hideFld","secondaryLabel","contents","onNodeClick","onNodeCollapse","onNodeExpand","alignIndicator","Alignment","RIGHT","checked","CircleProps","onSetRadius","RectangleProps","onSetWidth","onSetHeight","ShapeSelector","onSetShape","valueToShape","ShapeStyler","onChangeFill","contentClassName","view","DEFAULT_EDGE_STYLES","DEFAULT_NODE_STYLES","edgeLabels","nodeLabels","settings","NODE_CACHE","_ref","_update","common","isBuiltin","batoms","anyInCommon","toStyle","styletree","existingNodes","nodeCache","attributes","_projections","IMap","project","hasAtoms","edgeFields","isAttribute","labelFields","edgeSkolems","labelSkolems","connected","buildEdge","tuple","middle","labelMap","addLabel","paren","expressionType","joined","projectedAtoms","types","projectable","some","every","AlloyTuple","typeHierarchy","generateGraph","nodeStyles","_buildNodeStyles","edgeStyles","_buildEdgeStyles","Classes","MINIMAL","large","command","fileref","fetchExample","fetch","then","catch","fixedToTop","display","files","file","reader","FileReader","readAsText","rightIcon","click","SourcePlaceholder","alignText","sources","filename","pop","STYLE","githubGist","SyntaxHighlighter","registerLanguage","case_insensitive","keywords","contains","COMMENT","begin","relevance","welcome","language","showLineNumbers","AlloySelect","MultiSelect","ofType","highlightText","query","lastIndex","words","word","escapeRegExpChars","regexp","RegExp","exec","before","rest","AlloyMultiSelect","_filterItem","toLowerCase","_isItemSelected","itemsSelected","_onRemoveTag","tag","onDeselectItem","_onSelectItem","onSelectItem","_renderItem","matchesPredicate","_renderSignature","_renderField","_renderSkolem","_renderList","sigs","items","flds","skls","alpha","builtinSort","renderedSigs","renderItem","renderedFlds","renderedSkls","ulRef","itemsParentRef","disabled","labelElement","handleClick","_renderTag","_tagProps","itemType","clearButton","onClearSelectedItems","sortItems","itemPredicate","itemRenderer","itemListRenderer","onItemSelect","popoverProps","resetOnSelect","scrollToActiveItem","selectedItems","tagInputProps","onRemove","rightElement","tagProps","tagRenderer","zIndex","currentTarget","selectedValue","Signatures","Column","Center","Right","PopoverRow","_buildShadowStyle","thickness","_onMouseEnter","_onMouseLeave","Manager","Reference","onMouseEnter","onMouseLeave","boxShadow","Popper","data-placement","SkolemListPopover","getAlignClass","getLayoutClass","secondSort","filtering","keepSignatures","keepFields","keepSkolems","pass","removeBuiltins","removeEmptys","removeSkolems","elevation","buildTableHeader","bordered","condensed","striped","SignatureHTMLTable","FieldHTMLTable","SkolemHTMLTable","keyMap","VIEW_GRAPH","VIEW_SOURCE","VIEW_TABLE","ZOOM_TO_FIT","_handlers","handlers","SidebarButton","GraphSidebar","TableSidebar","SourceSidebar","mainview","evalActive","SterlingStage","FocusStyleManager","onlyShowFocusOnTabs","_evaluator","_evaluatorView","_getDrawer","_getNavbar","_getStage","requestCurrentInstance","_resize","drawerOpen","onResize","defaultSize","minSize","maxSize","Boolean","location","hostname","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13decda6.chunk.js","sourcesContent":["export interface Event {\n    type: string,\n    [key: string]: any\n}\n\nclass EventDispatcher {\n\n    private _listeners?: {[key: string]: ((event: any) => void)[]};\n\n    addEventListener (type: string, listener: (event: any) => void): this {\n\n        if (this._listeners === undefined) this._listeners = {};\n\n        const listeners = this._listeners;\n\n        if (listeners[type] === undefined) {\n            listeners[type] = [];\n        }\n\n        if (listeners[type].indexOf(listener) === -1) {\n            listeners[type].push(listener);\n        }\n\n        return this;\n\n    }\n\n    dispatchEvent (event: Event): this {\n\n        if (this._listeners === undefined) return this;\n\n        const listenerarray = this._listeners[event.type];\n\n        if (listenerarray !== undefined) {\n\n            event.target = this;\n\n            const arraycopy = listenerarray.slice();\n\n            arraycopy.forEach(callback => {\n                callback.call(this, event);\n            });\n\n        }\n\n        return this;\n\n    }\n\n    hasEventListener (type: string, listener: (event: any) => void): boolean {\n\n        if (this._listeners === undefined) return false;\n\n        const listeners = this._listeners;\n\n        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\n    }\n\n    removeEventListener (type: string, listener: (event: any) => void): this {\n\n        if (this._listeners === undefined) return this;\n\n        const listenerarray = this._listeners[type];\n\n        if (listenerarray !== undefined) {\n            const index = listenerarray.indexOf(listener);\n            if (index !== -1) {\n                listenerarray.splice(index, 1);\n            }\n        }\n\n        return this;\n\n    }\n\n}\n\nexport {\n    EventDispatcher\n}\n","import { AlloyInstance } from 'alloy-ts';\nimport { EventDispatcher } from '../util/EventDispatcher';\n\n\n/**\n * Events dispatched by a SterlingConnectiong:\n *   connect: connection established\n *   disconnect: connection lost\n *   error: an error occurred\n *   eval: a response from the evaluator\n *   instance: a new instance received\n */\nabstract class SterlingConnection extends EventDispatcher {\n\n    protected _url: string;\n    protected _ws: WebSocket | null;\n\n    private _auto_reconnect: boolean;\n    private _auto_reconnect_interval: number;\n    private _connected: boolean;\n\n    _heartbeat_count: number;\n    _heartbeat_id: number;\n    _heartbeat_interval: number;\n    _heartbeat_latency: DOMHighResTimeStamp;\n    _heartbeat_timestamp: DOMHighResTimeStamp;\n\n    protected constructor (url: string) {\n\n        super();\n\n        this._url = url;\n        this._ws = null;\n\n        this._auto_reconnect = false;\n        this._auto_reconnect_interval = 5000;\n        this._connected = false;\n\n        this._heartbeat_count = 0;\n        this._heartbeat_id = 0;\n        this._heartbeat_interval = 15000;\n        this._heartbeat_latency = 0;\n        this._heartbeat_timestamp = 0;\n\n    }\n\n    /**\n     * Establish a connection with a data provider\n     */\n    connect (): void {\n\n        if (this._ws) {\n            this._ws.onclose = null;\n            this._ws.close();\n        }\n\n        this._initializeConnection();\n\n    }\n\n    requestCurrentInstance (): boolean {\n\n        return this._request('current');\n\n    }\n\n    requestEvaluateExpression (id: number, expression: string): boolean {\n\n        return this._request(`EVL:${id}:${expression}`);\n\n    }\n\n    requestNextInstance (): boolean {\n\n        return this._request('next');\n\n    }\n\n    private _handleEval (data: string): void {\n\n        this.dispatchEvent({\n            type: 'eval',\n            data: data\n        });\n\n    }\n\n    private _handlePong (): void {\n\n        this._heartbeat_latency += performance.now() - this._heartbeat_timestamp;\n        this._heartbeat_count += 1;\n\n    }\n\n    private _handleXML (data: string): void {\n\n        if (data.length) {\n            try {\n                this.dispatchEvent({\n                    type: 'instance',\n                    instance: new AlloyInstance(data)\n                });\n            } catch (e) {\n                this.dispatchEvent({\n                    type: 'error',\n                    message: 'Invalid instance data'\n                });\n            }\n        }\n\n    }\n\n    private _initializeConnection () {\n\n        this._ws = new WebSocket(this._url);\n        this._ws.onopen = this._onOpen.bind(this);\n        this._ws.onclose = this._onClose.bind(this);\n        this._ws.onerror = this._onError.bind(this);\n        this._ws.onmessage = this._onMessage.bind(this);\n\n    }\n\n    private _onClose (e: Event): void {\n\n        this._connected = false;\n        this._ws = null;\n        if (this._auto_reconnect) this._reconnect();\n        this.dispatchEvent({ type: 'disconnect' });\n\n    }\n\n    private _onError (e: Event): void {\n\n        this.dispatchEvent({ type: 'error' });\n\n    }\n\n    private _onMessage (e: MessageEvent): void {\n\n        this._resetHeartbeat();\n        let header = e.data.slice(0, 4);\n        let data = e.data.slice(4);\n        switch (header) {\n            case 'pong':\n                this._handlePong();\n                break;\n            case 'EVL:':\n                this._handleEval(data);\n                break;\n            case 'XML:':\n                this._handleXML(data);\n                break;\n            default:\n                this.dispatchEvent({\n                    type: 'error',\n                    message: `Unknown response header: ${header}`\n                });\n                break;\n        }\n\n    }\n\n    private _onOpen (e: Event): void {\n\n        this._connected = true;\n        this._resetHeartbeat();\n        this.dispatchEvent({ type: 'connect' });\n\n    }\n\n    private _ping () {\n\n        if (this._ws) {\n            this._heartbeat_timestamp = performance.now();\n            this._ws.send('ping');\n        }\n\n    }\n\n    private _reconnect (): void {\n\n        window.setTimeout(this._initializeConnection.bind(this), this._auto_reconnect_interval);\n\n    }\n\n    private _request (request: string): boolean {\n\n        return this._connected && this._ws\n            ? (this._ws.send(request), true)\n            : false;\n\n    }\n\n    private _resetHeartbeat (): void {\n\n        clearTimeout(this._heartbeat_id);\n        this._heartbeat_id = window.setTimeout(this._ping.bind(this), this._heartbeat_interval);\n\n    }\n\n}\n\nexport {\n    SterlingConnection\n};\n","import { SterlingConnection } from '../sterling/SterlingConnection';\n\nclass NoConnection extends SterlingConnection {\n\n    constructor () {\n        super('');\n    }\n\n    connect (): void {\n    }\n\n    requestCurrentInstance (): boolean {\n        return false;\n    }\n\n    requestEvaluateExpression (id: number, expression: string): boolean {\n        return false;\n    }\n\n    requestNextInstance (): boolean {\n        return false;\n    }\n\n}\n\nexport default NoConnection;\n","class StaticLayout {\n}\nexport { StaticLayout };\n","import { StaticLayout } from './StaticLayout';\nclass CircleLayout extends StaticLayout {\n    constructor() {\n        super();\n        this._cx = 0;\n        this._cy = 0;\n        this._radius = 250;\n    }\n    apply(graph) {\n        const bbox = graph.boundingBox();\n        const cx = (bbox[1] + bbox[3]) / 2;\n        const cy = (bbox[0] + bbox[2]) / 2;\n        const w = Math.abs(bbox[1] - bbox[3]);\n        const h = Math.abs(bbox[0] - bbox[2]);\n        const r = 0.8 * Math.min(w, h) / 2;\n        const nodes = graph.nodes();\n        const a = 2 * Math.PI / nodes.length;\n        nodes.forEach((node, index) => {\n            node.x = cx + r * Math.cos(index * a);\n            node.y = cy + r * Math.sin(index * a);\n        });\n    }\n    cx(cx) {\n        return arguments.length\n            ? (this._cx = cx, this)\n            : this._cx;\n    }\n    cy(cy) {\n        return arguments.length\n            ? (this._cy = cy, this)\n            : this._cy;\n    }\n    radius(radius) {\n        return arguments.length\n            ? (this._radius = radius, this)\n            : this._radius;\n    }\n}\nexport { CircleLayout };\n","import { cloneDeep, defaults as _defaults, pick } from 'lodash';\nfunction equivalentStrokes(a, b) {\n    if (a === undefined && b === undefined)\n        return true;\n    if (a === undefined || b === undefined)\n        return false;\n    return a.length === b.length &&\n        a.every((value, index) => b[index] === value);\n}\nfunction defaults(target, source, paths) {\n    _defaults(target, pick(cloneDeep(source), paths));\n}\nexport { defaults, equivalentStrokes };\n","import { isEqual, pick } from 'lodash';\nimport { defaults } from '../types/util';\n/**\n * Lazily apply shape attributes to another shape style\n * @param source\n * @param target\n */\nfunction applyShapeAttributes(target, source) {\n    if (isCircleStyle(target) && isCircleStyle(source)) {\n        defaults(target, source, ['type', 'radius']);\n        return;\n    }\n    if (isRectangleStyle(target) && isRectangleStyle(source)) {\n        defaults(target, source, ['type', 'width', 'height']);\n        return;\n    }\n    if (!target.type) {\n        if (isCircleStyle(source)) {\n            defaults(target, source, ['type', 'radius']);\n            return;\n        }\n        if (isRectangleStyle(source)) {\n            defaults(target, source, ['type', 'width', 'height']);\n            return;\n        }\n    }\n}\n/**\n * Lazily apply shape style attributes to another shape style.\n * @param target\n * @param source\n */\nfunction applyShapeStyleAttributes(target, source) {\n    defaults(target, source, ['fill', 'stroke', 'strokeDash', 'strokeWidth']);\n}\n/**\n * Create a clone of a shape style\n * @param style\n */\nfunction cloneShapeStyle(style) {\n    let clone = {};\n    if (isCircleStyle(style))\n        clone = _cloneCircleStyle(style);\n    if (isRectangleStyle(style))\n        clone = _cloneRectangleStyle(style);\n    applyShapeStyleAttributes(clone, style);\n    return clone;\n}\nfunction convertToShape(style, type) {\n    const next = {};\n    applyShapeStyleAttributes(next, style);\n    if (type === 'circle') {\n        next.type = 'circle';\n        next.radius = isRectangleStyle(style)\n            ? Math.min(style.width || 35, style.height || 35)\n            : 35;\n    }\n    if (type === 'rectangle') {\n        next.type = 'rectangle';\n        next.width = isCircleStyle(style)\n            ? (style.radius || 40) * 2\n            : 80;\n        next.height = isCircleStyle(style)\n            ? style.radius\n            : 40;\n    }\n    return next;\n}\n/**\n * Returns true if shape styles are equivalent, false otherwise\n * @param a\n * @param b\n */\nfunction equivalentShapeStyles(a, b) {\n    return isEqual(a, b);\n}\n/**\n * Returns true if style is a CircleStyle, false otherwise\n * @param style\n */\nfunction isCircleStyle(style) {\n    return style.type === 'circle';\n}\n/**\n * Returns true is style is a RectangleStyle, false otherwise\n * @param style\n */\nfunction isRectangleStyle(style) {\n    return style.type === 'rectangle';\n}\n/**\n * Clone a circle style (only attributes specific to circles)\n * @param style\n */\nfunction _cloneCircleStyle(style) {\n    return pick(style, ['type', 'radius']);\n}\n/**\n * Clone a rectangle style (only attributes specific to rectangles)\n * @param style\n */\nfunction _cloneRectangleStyle(style) {\n    return pick(style, ['type', 'width', 'height']);\n}\nexport { applyShapeAttributes, applyShapeStyleAttributes, cloneShapeStyle, convertToShape, equivalentShapeStyles, isCircleStyle, isRectangleStyle };\n","class BBox {\n    constructor(xmin, ymin, xmax, ymax) {\n        this._xmin = xmin !== undefined ? xmin : Infinity;\n        this._ymin = ymin !== undefined ? ymin : Infinity;\n        this._xmax = xmax !== undefined ? xmax : -Infinity;\n        this._ymax = ymax !== undefined ? ymax : -Infinity;\n    }\n    bounds() {\n        return [[this._xmin, this._ymin], [this._xmax, this._ymax]];\n    }\n    clone() {\n        return new BBox(this._xmin, this._ymin, this._xmax, this._ymax);\n    }\n    expand(other, y) {\n        if (other instanceof BBox)\n            return this._expandBBox(other);\n        if (y !== undefined)\n            this._expandPoint(other, y);\n        return this;\n    }\n    _expandBBox(other) {\n        const [[x0, y0], [x1, y1]] = other.bounds();\n        if (x0 < this._xmin)\n            this._xmin = x0;\n        if (y0 < this._ymin)\n            this._ymin = y0;\n        if (x1 > this._xmax)\n            this._xmax = x1;\n        if (y1 > this._ymax)\n            this._ymax = y1;\n        return this;\n    }\n    _expandPoint(x, y) {\n        if (x < this._xmin)\n            this._xmin = x;\n        if (x > this._xmax)\n            this._xmax = x;\n        if (y < this._ymin)\n            this._ymin = y;\n        if (y > this._ymax)\n            this._ymax = y;\n        return this;\n    }\n}\nexport { BBox };\n","class Renderer {\n}\nexport { Renderer };\n","import { Renderer } from '../Renderer';\nclass ShapeRenderer extends Renderer {\n    constructor(style) {\n        super();\n        this._nodes = [];\n        this.fill = ShapeRenderer.defaultFill;\n        this.stroke = ShapeRenderer.defaultStroke;\n        this.strokeDash = ShapeRenderer.defaultStrokeDash;\n        this.strokeWidth = ShapeRenderer.defaultStrokeWidth;\n        if (style) {\n            if (style.fill !== undefined)\n                this.fill = style.fill;\n            if (style.stroke !== undefined)\n                this.stroke = style.stroke;\n            if (style.strokeDash !== undefined)\n                this.strokeDash = style.strokeDash.slice();\n            if (style.strokeWidth !== undefined)\n                this.strokeWidth = style.strokeWidth;\n        }\n    }\n    nodes(points) {\n        return arguments.length\n            ? (this._nodes = points, this)\n            : this._nodes;\n    }\n    _doStrokeAndFill(context) {\n        if (this.strokeDash)\n            context.setLineDash(this.strokeDash);\n        if (this.strokeWidth !== null)\n            context.lineWidth = this.strokeWidth;\n        if (this.fill) {\n            context.fillStyle = this.fill;\n            context.fill();\n        }\n        if (this.stroke && this.strokeWidth) {\n            context.strokeStyle = this.stroke;\n            context.stroke();\n        }\n    }\n}\nShapeRenderer.defaultFill = 'white';\nShapeRenderer.defaultStroke = '#333333';\nShapeRenderer.defaultStrokeDash = null;\nShapeRenderer.defaultStrokeWidth = 1.5;\nexport { ShapeRenderer };\n","import { isRectangleStyle } from '../../styles/ShapeStyle';\nimport { BBox } from '../../types/BBox';\nimport { ShapeRenderer } from './ShapeRenderer';\nconst TWOPI = 2 * Math.PI;\nconst PI3 = Math.PI / 3;\nclass RectangleRenderer extends ShapeRenderer {\n    constructor(style) {\n        super(style);\n        this._width = RectangleRenderer.defaultWidth;\n        this._height = RectangleRenderer.defaultHeight;\n        if (style && isRectangleStyle(style)) {\n            if (style.width)\n                this._width = style.width;\n            if (style.height)\n                this._height = style.height;\n        }\n    }\n    bounds(x, y) {\n        const bounds = new BBox();\n        this._nodes.forEach(node => {\n            const nx = x(node.x);\n            const ny = y(node.y);\n            bounds.expand(nx + this._width / 2, ny + this._height / 2);\n            bounds.expand(nx - this._width / 2, ny - this._height / 2);\n        });\n        return bounds;\n    }\n    containsPoint(node, x, y, scale) {\n        scale = scale || 1;\n        const w = (this._width / scale) / 2;\n        const h = (this._height / scale) / 2;\n        const t = node.y + h;\n        const r = node.x + w;\n        const b = node.y - h;\n        const l = node.x - w;\n        return r >= x && x >= l && t >= y && y >= b;\n    }\n    height(height) {\n        return arguments.length\n            ? (this._height = +height, this)\n            : this._height;\n    }\n    intersect(angle) {\n        while (angle < -Math.PI)\n            angle += TWOPI;\n        while (angle > Math.PI)\n            angle -= TWOPI;\n        const tana = Math.tan(angle);\n        const r = region(angle, this._width, this._height);\n        let x = (r === 1 || r === 2) ? 1 : -1;\n        let y = (r === 3 || r === 4) ? -1 : 1;\n        if (r === 1 || r === 3) {\n            x *= this._width / 2;\n            y *= tana * this._width / 2;\n        }\n        else {\n            x *= this._height / (2 * tana);\n            y *= this._height / 2;\n        }\n        return {\n            x: x,\n            y: y\n        };\n    }\n    render(context, x, y) {\n        if (!this._nodes.length)\n            return;\n        context.save();\n        context.beginPath();\n        const w2 = this._width / 2;\n        const h2 = this._height / 2;\n        this._nodes.forEach(point => {\n            const px = x(point.x);\n            const py = y(point.y);\n            context.rect(Math.round(px - w2) - 0.5, Math.round(py - h2) - 0.5, this._width + 1, this._height + 1);\n        });\n        this._doStrokeAndFill(context);\n        context.restore();\n    }\n    selfLoopPoints(node) {\n        const nx = node.x;\n        const ny = node.y;\n        const w = Math.max(100, Math.min(this._width, 200));\n        const h = Math.min(this._height, 100);\n        const w2 = this._width / 2;\n        const h4 = h / 4;\n        return [{\n                x: nx,\n                y: ny,\n                dx: w2,\n                dy: -h4\n            }, {\n                x: nx,\n                y: ny,\n                dx: w2 + w * Math.cos(-PI3),\n                dy: h * Math.sin(-PI3)\n            }, {\n                x: nx,\n                y: ny,\n                dx: w2 + w * Math.cos(PI3),\n                dy: h * Math.sin(PI3)\n            }, {\n                x: nx,\n                y: ny,\n                dx: w2,\n                dy: h4\n            }];\n    }\n    width(width) {\n        return arguments.length\n            ? (this._width = +width, this)\n            : this._width;\n    }\n}\nRectangleRenderer.defaultWidth = 125;\nRectangleRenderer.defaultHeight = 60;\nfunction region(angle, width, height) {\n    const atan = Math.atan2(height, width);\n    if ((angle > -atan) && (angle <= atan))\n        return 1;\n    else if ((angle > atan) && (angle <= Math.PI - atan))\n        return 2;\n    else if ((angle > Math.PI - atan) || (angle <= -(Math.PI - atan)))\n        return 3;\n    else\n        return 4;\n}\nexport { RectangleRenderer };\n","import { graphlib, layout } from 'dagre';\nimport { RectangleRenderer } from '../../renderers/shapes/RectangleRenderer';\nimport { StaticLayout } from './StaticLayout';\nclass DagreLayout extends StaticLayout {\n    apply(graph, options) {\n        const g = new graphlib.Graph({ multigraph: true });\n        g.setGraph(options ? options : {\n            nodesep: 2 * RectangleRenderer.defaultWidth,\n            ranksep: 2 * RectangleRenderer.defaultWidth,\n            rankdir: 'BT'\n        });\n        g.setDefaultEdgeLabel(() => ({}));\n        graph.nodes().forEach(node => {\n            g.setNode(node.id, {\n                label: node.id,\n                width: RectangleRenderer.defaultWidth,\n                height: RectangleRenderer.defaultHeight\n            });\n        });\n        graph.edges().forEach(edge => {\n            g.setEdge(edge.source, edge.target);\n        });\n        layout(g);\n        const nodemap = new Map(graph.nodes().map(node => [node.id, node]));\n        const props = g.graph();\n        const hw = props.width ? props.width / 2 : 0;\n        const hh = props.height ? props.height / 2 : 0;\n        g.nodes().forEach(id => {\n            const node = nodemap.get(id);\n            if (node) {\n                const n = g.node(node.id);\n                node.x = n.x - hw;\n                node.y = n.y - hh;\n            }\n        });\n    }\n}\nexport { DagreLayout };\n","class EventDispatcher {\n    addEventListener(type, listener) {\n        if (this._listeners === undefined)\n            this._listeners = {};\n        const listeners = this._listeners;\n        if (listeners[type] === undefined) {\n            listeners[type] = [];\n        }\n        if (listeners[type].indexOf(listener) === -1) {\n            listeners[type].push(listener);\n        }\n        return this;\n    }\n    dispatchEvent(event) {\n        if (this._listeners === undefined)\n            return this;\n        const listenerarray = this._listeners[event.type];\n        if (listenerarray !== undefined) {\n            event.target = this;\n            const arraycopy = listenerarray.slice();\n            arraycopy.forEach(callback => {\n                callback.call(this, event);\n            });\n        }\n        return this;\n    }\n    hasEventListener(type, listener) {\n        if (this._listeners === undefined)\n            return false;\n        const listeners = this._listeners;\n        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n    }\n    removeEventListener(type, listener) {\n        if (this._listeners === undefined)\n            return this;\n        const listenerarray = this._listeners[type];\n        if (listenerarray !== undefined) {\n            const index = listenerarray.indexOf(listener);\n            if (index !== -1) {\n                listenerarray.splice(index, 1);\n            }\n        }\n        return this;\n    }\n}\nexport { EventDispatcher };\n","import * as d3 from 'd3';\nimport { EventDispatcher } from '../EventDispatcher';\nclass DragManager extends EventDispatcher {\n    constructor(canvas, x, y) {\n        super();\n        this._canvas = canvas;\n        this._quadtree = d3.quadtree();\n        this._renderers = new Map();\n        this._transform = d3.zoomIdentity;\n        this._x = x;\n        this._y = y;\n        const drag = d3.drag()\n            .container(canvas)\n            .subject(this._dragSubject.bind(this))\n            .on('start', this._dragStart.bind(this))\n            .on('drag', this._drag.bind(this))\n            .on('end', this._dragEnd.bind(this));\n        d3.select(canvas)\n            .call(drag);\n    }\n    boundingBox() {\n        return this._quadtree.extent();\n    }\n    setShapes(renderers) {\n        this._renderers = new Map();\n        const nodes = renderers\n            .map(renderer => renderer.nodes())\n            .reduce((acc, cur) => acc.concat(cur), []);\n        renderers.forEach(renderer => {\n            renderer.nodes().forEach(node => {\n                this._renderers.set(node, renderer);\n            });\n        });\n        this._quadtree = d3.quadtree()\n            .x(n => n.x)\n            .y(n => n.y)\n            .addAll(nodes);\n        return this;\n    }\n    setTransform(transform) {\n        this._transform = transform;\n        return this;\n    }\n    _drag() {\n        const mouse = d3.mouse(this._canvas);\n        const node = d3.event.subject;\n        const worldx = this._transform.invertX(mouse[0]);\n        const worldy = this._transform.invertY(mouse[1]);\n        const x = this._x.invert(worldx);\n        const y = this._y.invert(worldy);\n        node.x = x;\n        node.y = y;\n        this.dispatchEvent({\n            type: 'drag',\n            node: node\n        });\n    }\n    _dragEnd() {\n        this._quadtree.add(d3.event.subject);\n        this.dispatchEvent({\n            type: 'end'\n        });\n    }\n    _dragStart() {\n        this._quadtree.remove(d3.event.subject);\n    }\n    _dragSubject(datum, index, groups) {\n        const worldx = this._transform.invertX(d3.event.x);\n        const worldy = this._transform.invertY(d3.event.y);\n        const x = this._x.invert(worldx);\n        const y = this._y.invert(worldy);\n        const nearest = this._findNode(x, y);\n        return nearest || datum;\n    }\n    _findNode(x, y) {\n        const node = this._quadtree.find(x, y);\n        if (node) {\n            const shape = this._renderers.get(node);\n            if (shape && shape.containsPoint(node, x, y, this._transform.k)) {\n                return node;\n            }\n        }\n    }\n}\nexport { DragManager };\n","import { isDefined } from 'ts-is-present';\nimport { Labeller } from './Labeller';\nclass LinkLabeller extends Labeller {\n    constructor() {\n        super();\n        this._linkMap = new Map();\n        this._placement = 'spread';\n    }\n    getPlacement() {\n        return this._placement;\n    }\n    setLinkMap(links) {\n        this._linkMap = links;\n    }\n    setPlacement(placement) {\n        this._placement = placement;\n    }\n    update() {\n        if (this._placement === 'center')\n            this._buildCenterLabels();\n        if (this._placement === 'join')\n            this._buildJoinLabels();\n        if (this._placement === 'spread')\n            this._buildSpreadLabels();\n    }\n    _bezierBounds(np) {\n        if (np < 1)\n            return [0.5, 0];\n        const dt = Math.min(0.8 / (np - 1), 0.1);\n        const size = Math.min(dt * (np - 1), 0.8);\n        const b = 0.5 - size / 2;\n        return [b, dt];\n    }\n    _buildCenterLabels() {\n        this._linkMap.forEach((edges, link) => {\n            link.labels = edges\n                .filter(edge => isDefined(edge.label))\n                .map(edge => ({\n                t: 0.5,\n                text: edge.label\n            }));\n        });\n    }\n    _buildJoinLabels() {\n        this._linkMap.forEach((edges, link) => {\n            link.labels = [{\n                    text: buildCombinedLabel(edges),\n                    t: 0.5\n                }];\n        });\n    }\n    _buildSpreadLabels() {\n        this._linkMap.forEach((edges, link) => {\n            if (edges.length) {\n                const [b, dt] = this._bezierBounds(edges.length);\n                link.labels = edges\n                    .filter(edge => isDefined(edge.label))\n                    .map((edge, index) => ({\n                    t: b + index * dt,\n                    text: edge.label\n                }));\n            }\n        });\n    }\n}\nfunction buildCombinedLabel(edges) {\n    return edges\n        .map(edge => edge.label)\n        .filter(isDefined)\n        .join(', ');\n}\nexport { LinkLabeller };\n","import { Renderer } from '../Renderer';\nclass LinkLabelRenderer extends Renderer {\n    constructor(style) {\n        super();\n        this._links = [];\n        this._color = LinkLabelRenderer.defaultColor;\n        this._font = LinkLabelRenderer.defaultFont;\n        this._highlight = null;\n        if (style) {\n            if (style.color)\n                this._color = style.color;\n            if (style.font)\n                this._font = style.font;\n        }\n    }\n    highlight(link) {\n        this._highlight = link;\n    }\n    links(links) {\n        return arguments.length\n            ? (this._links = links, this)\n            : this._links;\n    }\n    render(context, x, y) {\n        if (!this._links.length)\n            return;\n        const links = this._highlight === null\n            ? this._links\n            : this._links.includes(this._highlight) ? [this._highlight] : [];\n        if (links.length) {\n            context.save();\n            context.beginPath();\n            if (this._color)\n                context.fillStyle = this._color;\n            context.font = this._font;\n            context.textAlign = 'center';\n            context.textBaseline = 'middle';\n            links.forEach(link => {\n                const path = link.path;\n                if (path) {\n                    link.labels.forEach(label => {\n                        const p = path.pointAlong(label.t, x, y);\n                        context.fillText(label.text, p.x, p.y);\n                    });\n                }\n            });\n        }\n    }\n}\nLinkLabelRenderer.defaultColor = '#333333';\nLinkLabelRenderer.defaultFont = '14px sans-serif';\nexport { LinkLabelRenderer };\n","import { Renderer } from '../Renderer';\nclass LinkRenderer extends Renderer {\n    constructor(style) {\n        super();\n        this._links = [];\n        this.stroke = '#333333';\n        this.strokeDash = null;\n        this.strokeWidth = null;\n        this.lowlightStroke = '#777777';\n        this.lowlightWidth = 1;\n        if (style) {\n            if (style.stroke)\n                this.stroke = style.stroke;\n            if (style.strokeDash)\n                this.strokeDash = style.strokeDash;\n            if (style.strokeWidth)\n                this.strokeWidth = style.strokeWidth;\n        }\n    }\n    links(links) {\n        return arguments.length\n            ? (this._links = links, this)\n            : this._links;\n    }\n    _doFill(context) {\n        if (this.stroke)\n            context.fillStyle = this.stroke;\n        context.fill();\n    }\n    _doFillHighlight(context) {\n        this._doFill(context);\n    }\n    _doFillLowlight(context) {\n        context.fillStyle = this.lowlightStroke;\n        context.fill();\n    }\n    _doStroke(context) {\n        if (this.strokeDash)\n            context.setLineDash(this.strokeDash);\n        if (this.strokeWidth)\n            context.lineWidth = this.strokeWidth;\n        context.strokeStyle = this.stroke;\n        context.stroke();\n    }\n    _doStrokeHighlight(context) {\n        if (this.strokeDash)\n            context.setLineDash(this.strokeDash);\n        if (this.strokeWidth)\n            context.lineWidth = 2 * this.strokeWidth;\n        context.strokeStyle = this.stroke;\n        context.stroke();\n    }\n    _doStrokeLowlight(context) {\n        if (this.strokeDash)\n            context.setLineDash(this.strokeDash);\n        if (this.strokeWidth)\n            context.lineWidth = this.strokeWidth;\n        context.strokeStyle = this.lowlightStroke;\n        context.lineWidth = this.lowlightWidth;\n        context.stroke();\n    }\n}\nexport { LinkRenderer };\n","import { LinkRenderer } from './LinkRenderer';\nimport { partition } from 'lodash';\nconst PI6 = Math.PI / 6;\nclass NaturalCurveRenderer extends LinkRenderer {\n    constructor(style) {\n        super(style);\n        this._arrowheadSize = 10;\n        this._highlight = null;\n    }\n    render(context, x, y) {\n        context.save();\n        const [highlight, lowlight] = partition(this._links, link => link === this._highlight);\n        if (highlight.length) {\n            context.beginPath();\n            const [hx, hy] = this._drawLinks(highlight, context, x, y);\n            this._doStrokeHighlight(context);\n            context.beginPath();\n            this._drawArrows(hx, hy, context);\n            this._doStrokeHighlight(context);\n            this._doFillHighlight(context);\n            context.beginPath();\n            const [lx, ly] = this._drawLinks(lowlight, context, x, y);\n            this._doStroke(context);\n            context.beginPath();\n            this._drawArrows(lx, ly, context);\n            this._doStroke(context);\n            this._doFill(context);\n        }\n        else {\n            context.beginPath();\n            const [arrowx, arrowy] = this._drawLinks(lowlight, context, x, y);\n            if (this._highlight === null) {\n                this._doStroke(context);\n                context.beginPath();\n                this._drawArrows(arrowx, arrowy, context);\n                this._doStroke(context);\n                this._doFill(context);\n            }\n            else {\n                this._doStrokeLowlight(context);\n                context.beginPath();\n                this._drawArrows(arrowx, arrowy, context);\n                this._doStrokeLowlight(context);\n                this._doFillLowlight(context);\n            }\n        }\n        context.restore();\n    }\n    highlight(link) {\n        this._highlight = link;\n    }\n    _arrow(x, y, ng, xs, ys) {\n        const sz = this._arrowheadSize;\n        xs.push(x - sz * Math.sin(ng - PI6));\n        ys.push(y - sz * Math.cos(ng - PI6));\n        xs.push(x);\n        ys.push(y);\n        xs.push(x - sz * Math.sin(ng + PI6));\n        ys.push(y - sz * Math.cos(ng + PI6));\n    }\n    _drawArrows(x, y, context) {\n        const n = x.length;\n        for (let i = 0; i < n; i += 3) {\n            context.moveTo(x[i], y[i]);\n            context.lineTo(x[i + 1], y[i + 1]);\n            context.lineTo(x[i + 2], y[i + 2]);\n            context.closePath();\n        }\n    }\n    _drawLinks(links, context, x, y) {\n        const arrowx = [];\n        const arrowy = [];\n        links.forEach(link => {\n            const path = link.path;\n            if (path) {\n                path.apply(context, x, y);\n                const angle = path.angleAlong(1, x, y) + Math.PI;\n                const arrow = path.pointAlong(1, x, y);\n                this._arrow(arrow.x, arrow.y, angle, arrowx, arrowy);\n            }\n        });\n        return [arrowx, arrowy];\n    }\n}\nexport { NaturalCurveRenderer };\n","class Path {\n}\nfunction transformed(p, x, y) {\n    return {\n        x: x(p.x) + (p.dx ? p.dx : 0),\n        y: y(p.y) + (p.dy ? p.dy : 0)\n    };\n}\nexport { Path, transformed };\n","import { Path, transformed } from './Path';\nclass CubicBezier extends Path {\n    constructor(start, c1, c2, end) {\n        super();\n        this._start = start;\n        this._c1 = c1;\n        this._c2 = c2;\n        this._end = end;\n    }\n    angleAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const c1 = transformed(this._c1, x, y);\n        const c2 = transformed(this._c2, x, y);\n        const e = transformed(this._end, x, y);\n        const u = 1 - t;\n        const dx = u * u * (c1.x - s.x) + 2 * t * u * (c2.x - c1.x) + t * t * (e.x - c2.x);\n        const dy = u * u * (c1.y - s.y) + 2 * t * u * (c2.y - c1.y) + t * t * (e.y - c2.y);\n        return Math.atan2(dx, dy) - Math.PI;\n    }\n    apply(context, x, y) {\n        const s = transformed(this._start, x, y);\n        const c1 = transformed(this._c1, x, y);\n        const c2 = transformed(this._c2, x, y);\n        const e = transformed(this._end, x, y);\n        context.moveTo(s.x, s.y);\n        context.bezierCurveTo(c1.x, c1.y, c2.x, c2.y, e.x, e.y);\n    }\n    pointAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const c1 = transformed(this._c1, x, y);\n        const c2 = transformed(this._c2, x, y);\n        const e = transformed(this._end, x, y);\n        const u = 1 - t;\n        return {\n            x: u * u * u * s.x + 3 * t * u * u * c1.x + 3 * t * t * u * c2.x + t * t * t * e.x,\n            y: u * u * u * s.y + 3 * t * u * u * c1.y + 3 * t * t * u * c2.y + t * t * t * e.y\n        };\n    }\n    points() {\n        return [this._start, this._c1, this._c2, this._end];\n    }\n}\nexport { CubicBezier };\n","import { Path, transformed } from './Path';\nclass Line extends Path {\n    constructor(start, end) {\n        super();\n        this._start = start;\n        this._end = end;\n    }\n    angleAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const e = transformed(this._end, x, y);\n        return Math.atan2(s.x - e.x, s.y - e.y);\n    }\n    apply(context, x, y) {\n        const s = transformed(this._start, x, y);\n        const e = transformed(this._end, x, y);\n        context.moveTo(s.x, s.y);\n        context.lineTo(e.x, e.y);\n    }\n    pointAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const e = transformed(this._end, x, y);\n        return {\n            x: s.x + t * (e.x - s.x),\n            y: s.y + t * (e.y - s.y)\n        };\n    }\n    points() {\n        return [this._start, this._end];\n    }\n}\nexport { Line };\n","import { Path, transformed } from './Path';\nclass QuadraticBezier extends Path {\n    constructor(start, control, end) {\n        super();\n        this._start = start;\n        this._control = control;\n        this._end = end;\n    }\n    angleAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const c = transformed(this._control, x, y);\n        const e = transformed(this._end, x, y);\n        const u = 1 - t;\n        const dx = 2 * u * (c.x - s.x) + 2 * t * (e.x - c.x);\n        const dy = 2 * u * (c.y - s.y) + 2 * t * (e.y - c.y);\n        return Math.atan2(dx, dy) - Math.PI;\n    }\n    apply(context, x, y) {\n        const s = transformed(this._start, x, y);\n        const c = transformed(this._control, x, y);\n        const e = transformed(this._end, x, y);\n        context.moveTo(s.x, s.y);\n        context.quadraticCurveTo(c.x, c.y, e.x, e.y);\n    }\n    pointAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const c = transformed(this._control, x, y);\n        const e = transformed(this._end, x, y);\n        const u = 1 - t;\n        return {\n            x: u * u * s.x + 2 * u * t * c.x + t * t * e.x,\n            y: u * u * s.y + 2 * u * t * c.y + t * t * e.y\n        };\n    }\n    points() {\n        return [this._start, this._control, this._end];\n    }\n}\nexport { QuadraticBezier };\n","class LinkSet {\n    constructor() {\n        this._all = new Map();\n        this._map = new Map();\n        this._ind = new Map();\n    }\n    /**\n     * Add a link that goes from source to target.\n     * @param source The source Node\n     * @param target The target Node\n     * @param link The link connecting the source and target nodes\n     */\n    add(source, target, link) {\n        this._addDirectional(source, target, link);\n        this._addNonDirectional(source, target, link);\n    }\n    /**\n     * Get all links between nodes a and b, regardless of direction\n     * @param a A Node\n     * @param b A node\n     */\n    allBetween(a, b) {\n        return this._getNonDirectional(a, b);\n    }\n    /**\n     * Get links beginning at source and ending at target\n     * @param source The source Node\n     * @param target The target Node\n     */\n    between(source, target) {\n        const targetmap = this._map.get(source);\n        return targetmap\n            ? targetmap.get(target) || []\n            : [];\n    }\n    /**\n     * Execute the provided callback for every link in the set\n     * @param callback The function to execute for each link. Arguments are:\n     * * link: The current link being processed\n     * * source: The source Node\n     * * target: The target Node\n     * * group: All link\n     */\n    forEach(callback) {\n        this._map.forEach((targetmap, source) => {\n            targetmap.forEach((links, target) => {\n                const group = this._getNonDirectional(source, target);\n                links.forEach(link => callback(link, source, target, group));\n            });\n        });\n    }\n    /**\n     * Get the index of this link among all links that connect the same\n     * two nodes. Indices are signed to indicate direction groups. Returns\n     * undefined if link is not in set.\n     * @param link The link\n     */\n    indexOf(link) {\n        return this._ind.get(link);\n    }\n    _addDirectional(source, target, link) {\n        if (!this._map.has(source))\n            this._map.set(source, new Map());\n        const targetmap = this._map.get(source);\n        if (!targetmap.has(target))\n            targetmap.set(target, []);\n        targetmap.get(target).push(link);\n    }\n    _addNonDirectional(source, target, link) {\n        // Look for source -> target -> links\n        if (this._all.has(source)) {\n            const targetmap = this._all.get(source);\n            if (!targetmap.has(target))\n                targetmap.set(target, []);\n            const len = targetmap.get(target).push(link);\n            this._ind.set(link, len - 1);\n            return;\n        }\n        // Look for target -> source -> links\n        if (this._all.has(target)) {\n            const sourcemap = this._all.get(target);\n            if (!sourcemap.has(source))\n                sourcemap.set(source, []);\n            const len = sourcemap.get(source).push(link);\n            this._ind.set(link, 1 - len);\n            return;\n        }\n        // Neither exists, so create source -> target -> links\n        this._all.set(source, new Map([[target, [link]]]));\n        this._ind.set(link, 0);\n    }\n    _getNonDirectional(source, target) {\n        if (this._all.has(source)) {\n            const targetmap = this._all.get(source);\n            if (targetmap.has(target)) {\n                return targetmap.get(target);\n            }\n        }\n        if (this._all.has(target)) {\n            const sourcemap = this._all.get(target);\n            if (sourcemap.has(source)) {\n                return sourcemap.get(source);\n            }\n        }\n        return [];\n    }\n}\nexport { LinkSet };\n","import { isDefined } from 'ts-is-present';\nimport { LinkSet } from './LinkSet';\nclass Router {\n    constructor() {\n        this._bundleMap = new LinkSet();\n        this._edgeLinkMap = new Map();\n        this._groupLinkMap = new Map();\n        this._linkEdgeMap = new Map();\n        this._nameNodeMap = new Map();\n        this._nodeEdgeMap = new Map();\n        this._ungroupedLinks = [];\n        this._collapse = true;\n        this._nodeShapeMap = new Map();\n    }\n    /**\n     * Get all links in the provided groups. If no groups are provided, all\n     * links are returned.\n     * @param groups An array of group names\n     */\n    getLinks(groups) {\n        if (groups) {\n            return groups\n                .map(group => this._groupLinkMap.get(group))\n                .filter(isDefined)\n                .reduce((acc, cur) => acc.concat(cur), []);\n        }\n        return Array.from(this._linkEdgeMap.keys());\n    }\n    /**\n     * Get a map of links to edge arrays. A single link can be used to represent\n     * multiple edges, and this map can be used to determine which edges are\n     * represented by any given link.\n     */\n    getLinkMap() {\n        return this._linkEdgeMap;\n    }\n    /**\n     * Get all links whose edges are not part of a group\n     */\n    getUngroupedLinks() {\n        return this._ungroupedLinks;\n    }\n    /**\n     * Set the nodes and edges and recalculate all links.\n     * @param nodes An array of nodes\n     * @param edges An array of edges\n     * @param shapes The shape renderers used to render the nodes\n     */\n    setData(nodes, edges, shapes) {\n        // Create a map of node names to nodes\n        this._bundleMap = new LinkSet();\n        this._edgeLinkMap = new Map();\n        this._groupLinkMap = new Map();\n        this._linkEdgeMap = new Map();\n        this._nameNodeMap = new Map(nodes.map(node => [node.id, node]));\n        this._nodeEdgeMap = buildNodeEdgeMap(this._nameNodeMap, edges);\n        this._ungroupedLinks = [];\n        // Create the map of nodes to shapes, which subclasses will\n        // likely need when calculating routes\n        this._nodeShapeMap = new Map();\n        shapes.forEach(shape => shape.nodes().forEach(node => this._nodeShapeMap.set(node, shape)));\n        // Place edges into groups that represent collapsed edges\n        const collapsed = this._collapse ? collapseEdges(edges) : edges.map(edge => [edge]);\n        // Create a single link for each set of edges\n        collapsed.forEach((edgeset) => {\n            if (edgeset.length) {\n                const groupname = edgeset[0].group;\n                const sourceName = edgeset[0].source;\n                const targetName = edgeset[0].target;\n                const source = this._nameNodeMap.get(sourceName);\n                const target = this._nameNodeMap.get(targetName);\n                if (source && target) {\n                    // Create the link (initially empty)\n                    const link = {\n                        path: undefined,\n                        labels: []\n                    };\n                    // Save the link -> edgeset\n                    this._linkEdgeMap.set(link, edgeset);\n                    // Save the edge -> link\n                    edgeset.forEach(edge => {\n                        this._edgeLinkMap.set(edge, link);\n                    });\n                    // Save to bundle map\n                    this._bundleMap.add(source, target, link);\n                    // Save to group\n                    if (groupname) {\n                        if (!this._groupLinkMap.has(groupname))\n                            this._groupLinkMap.set(groupname, []);\n                        this._groupLinkMap.get(groupname).push(link);\n                    }\n                    else {\n                        this._ungroupedLinks.push(link);\n                    }\n                }\n            }\n        });\n        this.updateLinks();\n    }\n    /**\n     * Calculate all links\n     */\n    updateLinks() {\n        this._bundleMap.forEach(this.calculateLink.bind(this));\n    }\n    /**\n     * Calculate links connected to the given node. Returns the array of links\n     * that were recalculated.\n     * @param node A node\n     */\n    updateLinksConnectedTo(node) {\n        // Get the set of edges that connect to the node\n        const edges = this._nodeEdgeMap.get(node);\n        if (edges) {\n            const recalculated = new Set();\n            edges.forEach(edge => {\n                const link = this._edgeLinkMap.get(edge);\n                if (link && !recalculated.has(link)) {\n                    const source = this._nameNodeMap.get(edge.source);\n                    const target = this._nameNodeMap.get(edge.target);\n                    if (source && target) {\n                        const group = this._bundleMap.allBetween(source, target);\n                        this.calculateLink(link, source, target, group);\n                    }\n                    recalculated.add(link);\n                }\n            });\n            return Array.from(recalculated);\n        }\n        return [];\n    }\n    /**\n     * Calculate the pixel offsets for the first and last points of a link.\n     * These offsets place links (the origins and arrowheads) at the edges\n     * of the shapes rather than the centers.\n     * @param link The link to process\n     * @param source The source point shape renderer\n     * @param target The target point shape renderer\n     * @private\n     */\n    _calcalateShapeOffsets(link, source, target) {\n        const points = link.path ? link.path.points() : [];\n        if (points.length < 2)\n            return;\n        if (source) {\n            const src = points[0];\n            const nxt = points[1];\n            calculateShapeOffset(src, nxt, source);\n        }\n        if (target) {\n            const trg = points[points.length - 1];\n            const prv = points[points.length - 2];\n            calculateShapeOffset(trg, prv, target);\n        }\n    }\n}\nfunction buildNodeEdgeMap(nodes, edges) {\n    const map = new Map();\n    edges.forEach(edge => {\n        const source = nodes.get(edge.source);\n        const target = nodes.get(edge.target);\n        if (source && target) {\n            if (!map.has(source))\n                map.set(source, []);\n            if (!map.has(target))\n                map.set(target, []);\n            map.get(source).push(edge);\n            map.get(target).push(edge);\n        }\n    });\n    return map;\n}\nfunction calculateShapeOffset(center, other, shape) {\n    const ng = Math.atan2(center.y - other.y, other.x - center.x);\n    const offset = shape.intersect(ng);\n    center.dx = offset.x;\n    center.dy = offset.y;\n}\nfunction collapseEdges(edges) {\n    const groups = new Map();\n    const ungrouped = [];\n    // Place edges into groups\n    edges.forEach(edge => {\n        if (edge.group) {\n            if (!groups.has(edge.group))\n                groups.set(edge.group, []);\n            groups.get(edge.group).push(edge);\n        }\n        else {\n            ungrouped.push(edge);\n        }\n    });\n    // For each group, collapse edges that have the same source and target\n    const allgroups = [ungrouped, ...Array.from(groups.values())];\n    const collapsed = [];\n    allgroups.forEach(edgegroup => {\n        const edgemap = new Map();\n        edgegroup.forEach(edge => {\n            const id = edge.source + edge.target;\n            if (!edgemap.has(id))\n                edgemap.set(id, []);\n            edgemap.get(id).push(edge);\n        });\n        collapsed.push(...Array.from(edgemap.values()));\n    });\n    return collapsed;\n}\nexport { Router };\n","import { CubicBezier } from '../paths/CubicBezier';\nimport { Line } from '../paths/Line';\nimport { QuadraticBezier } from '../paths/QuadraticBezier';\nimport { distance } from '../types/Point';\nimport { Router } from './Router';\nclass BundleRouter extends Router {\n    constructor() {\n        super();\n        this._collapse = true;\n        this._factor = 0.25;\n    }\n    calculateLink(link, source, target, group) {\n        const srcPoint = {\n            x: source.x,\n            y: source.y\n        };\n        const trgPoint = {\n            x: target.x,\n            y: target.y\n        };\n        const sourceShape = this._nodeShapeMap.get(source);\n        const targetShape = this._nodeShapeMap.get(target);\n        if (source === target && sourceShape) {\n            const points = sourceShape.selfLoopPoints(source);\n            link.path = new CubicBezier(points[0], points[1], points[2], points[3]);\n        }\n        else {\n            const index = this._bundleMap.indexOf(link);\n            const points = index !== undefined && group.length > 1\n                ? this._bundlePoints(srcPoint, trgPoint, index, group.length)\n                : [srcPoint, trgPoint];\n            if (points.length === 2) {\n                link.path = new Line(points[0], points[1]);\n            }\n            if (points.length === 3) {\n                link.path = new QuadraticBezier(points[0], points[1], points[2]);\n            }\n            this._calcalateShapeOffsets(link, sourceShape, targetShape);\n        }\n    }\n    getFactor() {\n        return this._factor;\n    }\n    setFactor(factor) {\n        this._factor = factor;\n    }\n    _bundlePoints(source, target, index, length) {\n        if (this._factor < 0.005)\n            return [source, target];\n        // Calculate the bundle width based on distance between source and target nodes\n        const size = this._factor * distance(source, target);\n        // Calculate perpendicular angle\n        let rt = Math.sign(index) || 1;\n        let ng = Math.atan2(target.y - source.y, target.x - source.x) + rt * Math.PI / 2;\n        // Calculate center point\n        const cx = (source.x + target.x) / 2;\n        const cy = (source.y + target.y) / 2;\n        // Calculate \"bottom\" point\n        const bx = cx + (size / 2) * Math.cos(ng);\n        const by = cy + (size / 2) * Math.sin(ng);\n        // Flip the angle by 180 degrees\n        ng -= Math.PI;\n        // Translate based on index percentage\n        const percent = Math.abs(index) / (length - 1);\n        const mid = {\n            x: bx + percent * size * Math.cos(ng),\n            y: by + percent * size * Math.sin(ng)\n        };\n        return [source, mid, target];\n    }\n}\nexport { BundleRouter };\n","function distance(a, b) {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    return Math.sqrt(x * x + y * y);\n}\nexport { distance };\n","import { isEqual } from 'lodash';\nimport { defaults } from '../types/util';\n/**\n * Lazily apply style attributes to another label style\n * @param source\n * @param target\n */\nfunction applyLabelStyleAttributes(target, source) {\n    defaults(target, source, ['font', 'color']);\n}\n/**\n * Create a clone of a label style\n * @param style\n */\nfunction cloneLabelStyle(style) {\n    const clone = {};\n    applyLabelStyleAttributes(clone, style);\n    return clone;\n}\n/**\n * Returns true if the styles are equivalent, false otherwise\n * @param a\n * @param b\n */\nfunction equivalentLabelStyles(a, b) {\n    return isEqual(a, b);\n}\nexport { applyLabelStyleAttributes, cloneLabelStyle, equivalentLabelStyles };\n","import { equivalentStrokes } from '../types/util';\nimport { defaults } from '../types/util';\nfunction applyLinkStyleAttributes(target, source) {\n    defaults(target, source, ['stroke', 'strokeDash', 'strokeWidth']);\n}\nfunction cloneLinkStyle(style) {\n    const clone = {};\n    applyLinkStyleAttributes(clone, style);\n    return clone;\n}\nfunction equivalentLinkStyles(a, b) {\n    return a.stroke === b.stroke\n        && equivalentStrokes(a.strokeDash, b.strokeDash)\n        && a.strokeWidth === b.strokeWidth;\n}\nexport { applyLinkStyleAttributes, cloneLinkStyle, equivalentLinkStyles };\n","import { applyLabelStyleAttributes, cloneLabelStyle } from './LabelStyle';\nimport { applyLinkStyleAttributes, cloneLinkStyle } from './LinkStyle';\nimport { applyShapeAttributes, applyShapeStyleAttributes, cloneShapeStyle } from './ShapeStyle';\n// Helper functions\nfunction _isEdgeStyle(style) {\n    return style.groups !== undefined;\n}\nfunction _isNodeStyle(style) {\n    return style.nodes !== undefined;\n}\n// Parsing functions\nfunction parseLabelStyles(style) {\n    const labelStyles = new Map();\n    const getData = (style) => {\n        if (_isEdgeStyle(style))\n            return style.groups;\n        if (_isNodeStyle(style))\n            return style.nodes;\n        return [];\n    };\n    const nest = (style, parent) => {\n        let clone = cloneLabelStyle(style.label || {});\n        if (parent)\n            applyLabelStyleAttributes(clone, parent);\n        if (style.children) {\n            style.children.forEach((child) => {\n                nest(child, clone);\n            });\n        }\n        labelStyles.set(clone, getData(style));\n    };\n    nest(style);\n    return labelStyles;\n}\nfunction parseLinkStyles(style) {\n    const linkStyles = new Map();\n    const nest = (style, parent) => {\n        let clone = cloneLinkStyle(style.link || {});\n        if (parent)\n            applyLinkStyleAttributes(clone, parent);\n        if (style.children) {\n            style.children.forEach(child => {\n                nest(child, clone);\n            });\n        }\n        linkStyles.set(clone, style.groups);\n    };\n    nest(style);\n    return linkStyles;\n}\nfunction parseShapeStyles(style) {\n    const shapeStyles = new Map();\n    const nest = (style, parent) => {\n        let clone = cloneShapeStyle(style.shape || {});\n        if (parent) {\n            applyShapeAttributes(clone, parent);\n            applyShapeStyleAttributes(clone, parent);\n        }\n        if (style.children) {\n            style.children.forEach(child => {\n                nest(child, clone);\n            });\n        }\n        shapeStyles.set(clone, style.nodes);\n    };\n    nest(style);\n    return shapeStyles;\n}\nexport { parseLabelStyles, parseLinkStyles, parseShapeStyles };\n","import { LinkLabeller } from '../labellers/LinkLabeller';\nimport { LinkLabelRenderer } from '../renderers/labels/LinkLabelRenderer';\nimport { NaturalCurveRenderer } from '../renderers/links/NaturalCurveRenderer';\nimport { BundleRouter } from '../routers/BundleRouter';\nimport { parseLabelStyles, parseLinkStyles } from '../styles/StyleParsers';\nclass EdgeManager {\n    constructor() {\n        this._labeller = new LinkLabeller();\n        this._router = new BundleRouter();\n        this._nodes = [];\n        this._edges = [];\n        this._shapes = [];\n        this._styles = [];\n        this._links = [];\n        this._labels = [];\n    }\n    getEdges() {\n        return this._edges;\n    }\n    getLabelPlacement() {\n        return this._labeller.getPlacement();\n    }\n    getRouter() {\n        return this._router;\n    }\n    labelRenderers() {\n        return this._labels;\n    }\n    linkRenderers() {\n        return this._links;\n    }\n    setEdges(edges) {\n        this._edges = edges;\n        return this;\n    }\n    setLabelPlacement(placement) {\n        this._labeller.setPlacement(placement);\n        return this;\n    }\n    setNodes(nodes) {\n        this._nodes = nodes;\n        return this;\n    }\n    setShapes(shapes) {\n        this._shapes = shapes;\n        return this;\n    }\n    setStyles(styles) {\n        this._styles = styles;\n        return this;\n    }\n    update() {\n        // Reroute links\n        this._router.setData(this._nodes, this._edges, this._shapes);\n        // Recalculate renderers\n        this._recalculateRenderers();\n    }\n    updateEdgesConnectedTo(node) {\n        this._router.updateLinksConnectedTo(node);\n    }\n    _calculateLabelRenderers() {\n        // Recalculate label placement\n        this._labeller.setLinkMap(this._router.getLinkMap());\n        this._labeller.update();\n        // An array to store renderers\n        const renderers = [];\n        // Create a set of all links\n        const linkset = new Set(this._router.getLinks());\n        // Flatten styles and build renderers\n        this._styles.forEach(style => {\n            parseLabelStyles(style).forEach((groups, labelstyle) => {\n                // Create the renderer\n                const labelRenderer = new LinkLabelRenderer(labelstyle);\n                // Get the combined list of links in all groups this\n                // renderer is responsible for\n                const links = this._router.getLinks(groups);\n                // Remove these links from the link set\n                links.forEach(link => linkset.delete(link));\n                // Set the links for this renderer\n                labelRenderer.links(links);\n                // Add to the list of renderers\n                renderers.push(labelRenderer);\n            });\n        });\n        // Create a default renderer for links not yet assigned\n        if (linkset.size > 0) {\n            const defaultRenderer = new LinkLabelRenderer();\n            const remaining = Array.from(linkset.values());\n            defaultRenderer.links(remaining);\n            renderers.push(defaultRenderer);\n        }\n        return renderers;\n    }\n    _calculateLinkRenderers() {\n        // An array to store renderers\n        const renderers = [];\n        // Create a set of all group names in order to keep track of groups\n        // that have been assigned to a renderer\n        const groupnames = new Set();\n        this._edges.forEach(edge => {\n            if (edge.group)\n                groupnames.add(edge.group);\n        });\n        // Flatten styles and build renderers\n        this._styles.forEach(style => {\n            parseLinkStyles(style).forEach((groups, linkStyle) => {\n                // Create the renderer\n                const linkRenderer = new NaturalCurveRenderer(linkStyle);\n                // Get the links associated with these groups\n                const links = this._router.getLinks(groups);\n                // Assign the links to the renderer\n                linkRenderer.links(links);\n                // Add the renderer to the list\n                renderers.push(linkRenderer);\n                // Remove groups from set of group names\n                groups.forEach(group => groupnames.delete(group));\n            });\n        });\n        // Create a default renderer for links that are not part of a\n        // styling or whose group does not have a style defined\n        const defaultRenderer = new NaturalCurveRenderer();\n        const links = this._router\n            .getLinks(Array.from(groupnames))\n            .concat(this._router.getUngroupedLinks());\n        defaultRenderer.links(links);\n        renderers.push(defaultRenderer);\n        return renderers;\n    }\n    _recalculateRenderers() {\n        // Create new renderers\n        this._links = this._calculateLinkRenderers();\n        this._labels = this._calculateLabelRenderers();\n    }\n}\nexport { EdgeManager };\n","import * as d3 from 'd3';\nimport { Delaunay } from 'd3-delaunay';\nimport { EventDispatcher } from '../EventDispatcher';\nclass HoverManager extends EventDispatcher {\n    constructor(canvas, x, y) {\n        super();\n        this._canvas = canvas;\n        this._delaunay = null;\n        this._links = [];\n        this._transform = d3.zoomIdentity;\n        this._x = x;\n        this._y = y;\n        this._lastLink = null;\n        this._maxDist = 25;\n        this._numsections = 25;\n        d3.select(this._canvas)\n            .on('mousemove', this._onHover.bind(this));\n    }\n    render(context) {\n        if (this._delaunay) {\n            context.save();\n            this._delaunay.render(context);\n            context.strokeStyle = 'red';\n            context.lineWidth = 2;\n            context.stroke();\n            context.restore();\n        }\n    }\n    setData(linkEdgeMap) {\n        // Array of points\n        const points = [];\n        this._links = [];\n        // Create a bunch of control points for each link\n        for (let link of linkEdgeMap.keys()) {\n            const path = link.path;\n            if (path) {\n                const p = 1 / this._numsections;\n                for (let i = 0; i <= this._numsections; ++i) {\n                    points.push(path.pointAlong(p * i, this._x, this._y));\n                    this._links.push(link);\n                }\n            }\n        }\n        // Create the triangulation\n        this._delaunay = Delaunay.from(points, p => p.x, p => p.y);\n        return this;\n    }\n    setTransform(transform) {\n        this._transform = transform;\n        return this;\n    }\n    _distance(x, y, path) {\n        let min = Infinity;\n        for (let i = 0; i <= this._numsections; ++i) {\n            const p = path.pointAlong(i / this._numsections, this._x, this._y);\n            const d = distanceSq(x, y, p.x, p.y);\n            if (d < min)\n                min = d;\n        }\n        return Math.sqrt(min);\n    }\n    _onHover() {\n        const mouse = d3.mouse(this._canvas);\n        const worldx = this._transform.invertX(mouse[0]);\n        const worldy = this._transform.invertY(mouse[1]);\n        if (this._delaunay) {\n            const index = this._delaunay.find(worldx, worldy);\n            if (index < this._links.length) {\n                const link = this._links[index];\n                const path = link.path;\n                const dist = this._distance(worldx, worldy, path);\n                this._setHover(link, dist);\n            }\n        }\n    }\n    _setHover(link, distance) {\n        if (distance < this._maxDist) {\n            if (link !== this._lastLink) {\n                this._lastLink = link;\n                this.dispatchEvent({\n                    type: 'hover',\n                    link: link\n                });\n            }\n        }\n        else {\n            if (this._lastLink !== null) {\n                this._lastLink = null;\n                this.dispatchEvent({\n                    type: 'hover',\n                    link: null\n                });\n            }\n        }\n    }\n}\nfunction distanceSq(x1, y1, x2, y2) {\n    return (x2 - x1) ** 2 + (y2 - y1) ** 2;\n}\nexport { HoverManager };\n","import { Renderer } from '../Renderer';\nclass LabelRenderer extends Renderer {\n    constructor(style) {\n        super();\n        this._nodes = [];\n        this.color = LabelRenderer.defaultColor;\n        this.font = LabelRenderer.defaultFont;\n        if (style) {\n            if (style.color)\n                this.color = style.color;\n            if (style.font)\n                this.font = style.font;\n        }\n    }\n    nodes(points) {\n        return arguments.length\n            ? (this._nodes = points, this)\n            : this._nodes;\n    }\n    render(context, x, y) {\n        if (!this._nodes.length)\n            return;\n        context.save();\n        context.beginPath();\n        if (this.color)\n            context.fillStyle = this.color;\n        context.font = this.font;\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        this._nodes.forEach(node => {\n            if (!node.labels) {\n                context.fillText(node.id, x(node.x) + (node.dx ? node.dx : 0), y(node.y) + (node.dy ? node.dy : 0));\n            }\n            else {\n                const match = this.font.match(/(\\d*)px/);\n                const size = match ? match.length > 1 ? parseInt(match[1]) : 12 : 12;\n                const text = [node.id, ...node.labels];\n                const base = Math.floor((text.length * size) / 2 - size / 2) - 1;\n                text.forEach((label, index) => {\n                    context.fillText(label, x(node.x) + (node.dx ? node.dx : 0), y(node.y) + (node.dy ? node.dy : 0) - base + index * size);\n                });\n            }\n        });\n        context.restore();\n    }\n}\nLabelRenderer.defaultColor = '#333333';\nLabelRenderer.defaultFont = '14px sans-serif';\nexport { LabelRenderer };\n","import { isCircleStyle } from '../../styles/ShapeStyle';\nimport { BBox } from '../../types/BBox';\nimport { ShapeRenderer } from './ShapeRenderer';\nconst TWOPI = 2 * Math.PI;\nconst PI6 = Math.PI / 6;\nclass CircleRenderer extends ShapeRenderer {\n    constructor(style) {\n        super(style);\n        this._radius = CircleRenderer.defaultRadius;\n        if (style && isCircleStyle(style)) {\n            if (style.radius)\n                this._radius = style.radius;\n        }\n    }\n    bounds(x, y) {\n        const bounds = new BBox();\n        this._nodes.forEach(node => {\n            const nx = x(node.x);\n            const ny = y(node.y);\n            bounds.expand(nx + this._radius, ny + this._radius);\n            bounds.expand(nx - this._radius, ny - this._radius);\n        });\n        return bounds;\n    }\n    containsPoint(node, x, y, scale) {\n        scale = scale || 1;\n        const dx = x - node.x;\n        const dy = y - node.y;\n        const d2 = dx * dx + dy * dy;\n        const r = this._radius / scale;\n        return d2 < r * r;\n    }\n    intersect(angle) {\n        return {\n            x: this._radius * Math.cos(angle),\n            y: this._radius * Math.sin(angle)\n        };\n    }\n    radius(radius) {\n        return arguments.length\n            ? (this._radius = +radius, this)\n            : this._radius;\n    }\n    render(context, x, y) {\n        if (!this._nodes.length)\n            return;\n        context.save();\n        context.beginPath();\n        this._nodes.forEach(point => {\n            const px = x(point.x);\n            const py = y(point.y);\n            context.moveTo(px + this._radius, py);\n            context.arc(px, py, this._radius, 0, TWOPI);\n        });\n        this._doStrokeAndFill(context);\n        context.restore();\n    }\n    selfLoopPoints(node) {\n        const nx = node.x;\n        const ny = node.y;\n        const d = 3;\n        return [{\n                x: nx,\n                y: ny,\n                dx: this._radius * Math.cos(-PI6),\n                dy: this._radius * Math.sin(-PI6)\n            }, {\n                x: nx,\n                y: ny,\n                dx: d * this._radius * Math.cos(-PI6),\n                dy: d * this._radius * Math.sin(-PI6)\n            }, {\n                x: nx,\n                y: ny,\n                dx: d * this._radius * Math.cos(PI6),\n                dy: d * this._radius * Math.sin(PI6)\n            }, {\n                x: nx,\n                y: ny,\n                dx: this._radius * Math.cos(PI6),\n                dy: this._radius * Math.sin(PI6)\n            }];\n    }\n}\nCircleRenderer.defaultRadius = 60;\nexport { CircleRenderer };\n","import { LabelRenderer } from '../renderers/labels/LabelRenderer';\nimport { CircleRenderer } from '../renderers/shapes/CircleRenderer';\nimport { RectangleRenderer } from '../renderers/shapes/RectangleRenderer';\nimport { isCircleStyle, isRectangleStyle } from '../styles/ShapeStyle';\nimport { parseLabelStyles, parseShapeStyles } from '../styles/StyleParsers';\nclass NodeManager {\n    constructor() {\n        this._nodes = new Map();\n        this._labels = [];\n        this._shapes = [];\n        this._styles = [];\n    }\n    labelRenderers() {\n        return this._labels;\n    }\n    nodes(nodes) {\n        // Return the array nodes\n        if (!nodes)\n            return Array.from(this._nodes.values());\n        // Clear the node map\n        this._nodes = new Map();\n        // Make sure all nodes are node objects\n        const nodeobjs = nodes.map(node => {\n            if (typeof node === 'string') {\n                return {\n                    id: node,\n                    x: 0,\n                    y: 0\n                };\n            }\n            return node;\n        });\n        // Add all nodes to node map\n        nodeobjs.forEach(node => {\n            if (this._nodes.has(node.id))\n                throw Error(`Duplicate node ${node.id}`);\n            this._nodes.set(node.id, node);\n        });\n        return this;\n    }\n    shapeRenderers() {\n        return this._shapes;\n    }\n    setStyles(styles) {\n        this._styles = styles;\n        return this;\n    }\n    update() {\n        // Recalculate the renderers\n        this._shapes = this._calculateShapeRenderers();\n        this._labels = this._calculateLabelRenderers();\n    }\n    _calculateLabelRenderers() {\n        // An array to store renderers\n        const renderers = [];\n        // Create a map of node IDs to nodes\n        const nodemap = new Map(this._nodes);\n        // Flatten styles and build renderers\n        this._styles.forEach(style => {\n            parseLabelStyles(style).forEach((nodes, labelStyle) => {\n                // Create the renderer\n                let labelRenderer = new LabelRenderer(labelStyle);\n                // Extract nodes that haven't already been assigned to a renderer\n                const available = extractNodes(nodes, nodemap);\n                // Set the nodes that the renderer will render\n                labelRenderer.nodes(available);\n                // Add the renderer to the list\n                renderers.push(labelRenderer);\n            });\n        });\n        // Create a default renderer for those not yet assigned\n        if (nodemap.size > 0) {\n            const defaultRenderer = new LabelRenderer();\n            const remaining = Array.from(nodemap.values());\n            defaultRenderer.nodes(remaining);\n            renderers.push(defaultRenderer);\n        }\n        return renderers;\n    }\n    _calculateShapeRenderers() {\n        // An array to store renderers\n        const renderers = [];\n        // Create a map of node IDs to nodes\n        const nodemap = new Map(this._nodes);\n        // Flatten styles and build renderers\n        this._styles.forEach(style => {\n            parseShapeStyles(style).forEach((nodes, shapeStyle) => {\n                // Create the node renderer\n                let shapeRenderer;\n                if (isCircleStyle(shapeStyle))\n                    shapeRenderer = new CircleRenderer(shapeStyle);\n                else if (isRectangleStyle(shapeStyle))\n                    shapeRenderer = new RectangleRenderer(shapeStyle);\n                else\n                    shapeRenderer = new CircleRenderer(shapeStyle);\n                // Extract nodes that haven't already been assigned to a renderer\n                const available = extractNodes(nodes, nodemap);\n                // Set the nodes that the renderer will render\n                shapeRenderer.nodes(available);\n                // Add the renderer to the list\n                renderers.push(shapeRenderer);\n            });\n        });\n        // Create a default renderer for those not yet assigned\n        if (nodemap.size > 0) {\n            const defaultRenderer = new CircleRenderer();\n            const remaining = Array.from(nodemap.values());\n            defaultRenderer.nodes(remaining);\n            renderers.push(defaultRenderer);\n        }\n        return renderers;\n    }\n}\nfunction extractNodes(names, nodemap) {\n    const available = [];\n    names.forEach(name => {\n        if (nodemap.has(name)) {\n            available.push(nodemap.get(name));\n            nodemap.delete(name);\n        }\n    });\n    return available;\n}\nexport { NodeManager };\n","import { Renderer } from './Renderer';\nclass AxesRenderer extends Renderer {\n    constructor() {\n        super();\n        this._axesVisible = true;\n        this._gridVisible = true;\n        this._axisColor = '#bbbbbb';\n        this._gridColor = '#dddddd';\n        this._ticks = 10;\n        this._ticksize = 8;\n        this._labelpadding = 4;\n        this._gridPattern = [5, 5];\n    }\n    axesVisible(visible) {\n        this._axesVisible = visible;\n        return this;\n    }\n    gridVisible(visible) {\n        this._gridVisible = visible;\n        return this;\n    }\n    render(context, x, y) {\n        // constants\n        const x0 = align(x(0));\n        const y0 = align(y(0));\n        const xrange = x.range().map(align);\n        const yrange = y.range().map(align);\n        const ratio = Math.abs(xrange[1] / yrange[1]);\n        const tickoffset = this._ticksize / 2;\n        const xticks = x.ticks(this._ticks * ratio);\n        const yticks = y.ticks(this._ticks);\n        context.save();\n        context.beginPath();\n        if (this._gridVisible) {\n            // x-grid\n            yticks.forEach(tick => {\n                if (tick !== 0 || !this._axesVisible) {\n                    const ty = align(y(tick));\n                    context.moveTo(xrange[0], ty);\n                    context.lineTo(xrange[1], ty);\n                }\n            });\n            context.setLineDash(this._gridPattern);\n            context.lineDashOffset = -x0;\n            context.strokeStyle = this._gridColor;\n            context.stroke();\n            // y-grid\n            context.beginPath();\n            xticks.forEach(tick => {\n                if (tick !== 0 || !this._axesVisible) {\n                    const tx = align(x(tick));\n                    context.moveTo(tx, yrange[0]);\n                    context.lineTo(tx, yrange[1]);\n                }\n            });\n            context.lineDashOffset = -y0;\n            context.stroke();\n        }\n        if (this._axesVisible) {\n            // x-axis\n            context.beginPath();\n            context.moveTo(xrange[0], y0);\n            context.lineTo(xrange[1], y0);\n            // x-ticks\n            xticks.forEach(tick => {\n                if (tick !== 0) {\n                    const tx = align(x(tick));\n                    context.moveTo(tx, y0 - tickoffset);\n                    context.lineTo(tx, y0 + tickoffset);\n                }\n            });\n            // y-axis\n            context.moveTo(x0, yrange[0]);\n            context.lineTo(x0, yrange[1]);\n            // y-ticks\n            yticks.forEach(tick => {\n                if (tick !== 0) {\n                    const ty = align(y(tick));\n                    context.moveTo(x0 - tickoffset, ty);\n                    context.lineTo(x0 + tickoffset, ty);\n                }\n            });\n            // draw lines\n            context.setLineDash([]);\n            context.strokeStyle = this._axisColor;\n            context.stroke();\n            // labels\n            context.font = '10px sans-serif';\n            context.textAlign = 'center';\n            context.textBaseline = 'top';\n            context.fillStyle = this._axisColor;\n            xticks.forEach(tick => {\n                if (tick !== 0) {\n                    const tx = align(x(tick));\n                    context.fillText(tick.toString(), tx, y0 + tickoffset + this._labelpadding);\n                }\n            });\n            context.textAlign = 'left';\n            context.textBaseline = 'middle';\n            yticks.forEach(tick => {\n                if (tick !== 0) {\n                    const ty = align(y(tick));\n                    context.fillText(tick.toString(), x0 + tickoffset + this._labelpadding, ty);\n                }\n            });\n        }\n        context.restore();\n    }\n}\nfunction align(value) {\n    return Math.round(value) + 0.5;\n}\nexport { AxesRenderer };\n","import * as d3 from 'd3';\nimport { DragManager } from './managers/DragManager';\nimport { EdgeManager } from './managers/EdgeManager';\nimport { HoverManager } from './managers/HoverManager';\nimport { NodeManager } from './managers/NodeManager';\nimport { AxesRenderer } from './renderers/AxesRenderer';\nimport { BundleRouter } from './routers/BundleRouter';\nimport { BBox } from './types/BBox';\nclass Graph {\n    constructor(canvas) {\n        // Canvas rendering\n        this._canvas = canvas || null;\n        this._context = null;\n        // Renderers\n        this._axes = new AxesRenderer();\n        this._linkLabelRenderers = [];\n        this._linkRenderers = [];\n        this._nodeLabelRenderers = [];\n        this._nodeRenderers = [];\n        // Sizing, scaling\n        this._width = 0;\n        this._height = 0;\n        this._x = d3.scaleLinear();\n        this._y = d3.scaleLinear();\n        this._transform = d3.zoomIdentity;\n        this._zoom = d3.zoom();\n        // Managers\n        this._nodeManager = new NodeManager();\n        this._edgeManager = new EdgeManager();\n        this._dragManager = null;\n        this._hoverManager = null;\n        // Settings\n        this._axesVisible = true;\n        // Attempt to initialize the canvas\n        this._initializeCanvas();\n    }\n    axesVisible(visible) {\n        this._axes.axesVisible(visible);\n        return this;\n    }\n    boundingBox() {\n        const t = this._transform.invertY(0);\n        const r = this._transform.invertX(this._width);\n        const b = this._transform.invertY(this._height);\n        const l = this._transform.invertX(0);\n        return [\n            this._y.invert(t),\n            this._x.invert(r),\n            this._y.invert(b),\n            this._x.invert(l)\n        ];\n    }\n    bundleFactor(factor) {\n        const router = this._edgeManager.getRouter();\n        if (!arguments.length)\n            return router instanceof BundleRouter\n                ? router.getFactor()\n                : undefined;\n        if (router instanceof BundleRouter)\n            router.setFactor(factor);\n        return this;\n    }\n    canvas(canvas) {\n        this._canvas = canvas;\n        this._initializeCanvas();\n        return this;\n    }\n    edgeLabelPlacement(placement) {\n        return arguments.length\n            ? (this._edgeManager.setLabelPlacement(placement), this)\n            : this._edgeManager.getLabelPlacement();\n    }\n    edges(edges) {\n        if (!edges)\n            return this._edgeManager.getEdges();\n        this._edgeManager.setEdges(edges);\n        return this;\n    }\n    edgeStyles(styles) {\n        this._edgeManager.setStyles(styles);\n        return this;\n    }\n    gridVisible(visible) {\n        this._axes.gridVisible(visible);\n        return this;\n    }\n    resize() {\n        if (this._canvas) {\n            const styles = getComputedStyle(this._canvas);\n            const width = parseInt(styles.getPropertyValue('width'));\n            const height = parseInt(styles.getPropertyValue('height'));\n            this._setDimensions(width, height);\n            this._render();\n        }\n    }\n    nodes(nodes) {\n        if (!nodes)\n            return this._nodeManager.nodes();\n        // Set the nodes, converting all strings to node objects\n        this._nodeManager.nodes(nodes);\n        // Get the node objects\n        const nodeobjs = this._nodeManager.nodes();\n        // Tell everyone else about the nodes\n        this._edgeManager.setNodes(nodeobjs);\n        return this;\n    }\n    nodeStyles(styles) {\n        this._nodeManager.setStyles(styles);\n        return this;\n    }\n    update() {\n        // Get the node renderers\n        this._nodeManager.update();\n        this._nodeRenderers = this._nodeManager.shapeRenderers();\n        // Tell the edge manager which shapes will be rendering the nodes\n        this._edgeManager.setShapes(this._nodeRenderers);\n        this._edgeManager.update();\n        // Tell the drag manager which shapes will be rendering the nodes\n        if (this._dragManager)\n            this._dragManager.setShapes(this._nodeRenderers);\n        // The the hover manager which edges to hover with\n        if (this._hoverManager)\n            this._hoverManager.setData(this._edgeManager.getRouter().getLinkMap());\n        // Get the link renderers\n        this._linkRenderers = this._edgeManager.linkRenderers();\n        // Get the label renderers\n        this._linkLabelRenderers = this._edgeManager.labelRenderers();\n        this._nodeLabelRenderers = this._nodeManager.labelRenderers();\n        this._render();\n    }\n    zoomToFit() {\n        if (this._canvas && this._nodeRenderers.length) {\n            const width = this._width;\n            const height = this._height;\n            const bbox = new BBox();\n            this._nodeRenderers.forEach(renderer => {\n                bbox.expand(renderer.bounds(this._x, this._y));\n            });\n            const [[x0, y0], [x1, y1]] = bbox.bounds();\n            d3.select(this._canvas)\n                .transition()\n                .duration(750)\n                .call(this._zoom.transform, d3.zoomIdentity\n                .translate(this._x(0), this._y(0))\n                .scale(Math.min(8, 0.9 / Math.max((x1 - x0) / width, (y1 - y0) / height)))\n                .translate(-(x0 + x1) / 2, -(y0 + y1) / 2));\n        }\n    }\n    _initializeCanvas() {\n        const canvas = this._canvas;\n        if (canvas) {\n            // Get the 2D rendering context\n            const context = canvas.getContext('2d');\n            if (context === null)\n                throw Error('Unable to initialize canvas');\n            this._context = context;\n            // Create the drag manager and hover manager\n            this._dragManager = new DragManager(canvas, this._x, this._y);\n            this._hoverManager = new HoverManager(canvas, this._x, this._y);\n            // Initialize interactivity\n            this._zoom\n                .scaleExtent([0.1, 500])\n                .on('zoom', this._zoomed.bind(this));\n            d3.select(canvas)\n                .call(this._zoom)\n                .call(this._zoom.transform, this._transform);\n            this._dragManager\n                .addEventListener('drag', event => {\n                this._edgeManager.updateEdgesConnectedTo(event.node);\n                this._render();\n            })\n                .addEventListener('end', () => {\n                if (this._hoverManager) {\n                    this._hoverManager.setData(this._edgeManager.getRouter().getLinkMap());\n                    this._render();\n                }\n            });\n            this._hoverManager\n                .addEventListener('hover', event => {\n                this._linkRenderers.forEach(r => r.highlight(event.link));\n                this._linkLabelRenderers.forEach(r => r.highlight(event.link));\n                this._render();\n            });\n            this.update();\n            this.resize();\n        }\n        else {\n            this._context = null;\n            this._dragManager = null;\n        }\n    }\n    _render() {\n        const context = this._context;\n        if (context) {\n            window.requestAnimationFrame(() => {\n                const x = this._transform.rescaleX(this._x);\n                const y = this._transform.rescaleY(this._y);\n                // Clear the context\n                context.clearRect(0, 0, this._width, this._height);\n                // Render axes\n                if (this._axesVisible)\n                    this._axes.render(context, x, y);\n                // Render links\n                this._linkRenderers.forEach(renderer => {\n                    renderer.render(context, x, y);\n                });\n                // Render link labels\n                this._linkLabelRenderers.forEach(renderer => {\n                    renderer.render(context, x, y);\n                });\n                // Render nodes\n                this._nodeRenderers.forEach(renderer => {\n                    renderer.render(context, x, y);\n                });\n                // Render labels\n                this._nodeLabelRenderers.forEach(renderer => {\n                    renderer.render(context, x, y);\n                });\n            });\n        }\n    }\n    _setDimensions(width, height) {\n        if (this._canvas) {\n            this._canvas.setAttribute('width', width.toString());\n            this._canvas.setAttribute('height', height.toString());\n            this._width = width;\n            this._height = height;\n            this._x.domain([-width / 2, width / 2]).range([0, width]);\n            this._y.domain([height / 2, -height / 2]).range([0, height]);\n        }\n    }\n    _setTransform(transform) {\n        this._transform = transform;\n        if (this._dragManager)\n            this._dragManager.setTransform(transform);\n        if (this._hoverManager)\n            this._hoverManager.setTransform(transform);\n    }\n    _zoomed() {\n        this._setTransform(d3.event.transform);\n        this._render();\n    }\n}\nexport { Graph };\n","import { StaticLayout } from './StaticLayout';\nclass GridLayout extends StaticLayout {\n    apply(graph) {\n        const bbox = graph.boundingBox();\n        const cx = (bbox[1] + bbox[3]) / 2;\n        const cy = (bbox[0] + bbox[2]) / 2;\n        const w = 0.8 * Math.abs(bbox[1] - bbox[3]);\n        const h = 0.8 * Math.abs(bbox[0] - bbox[2]);\n        const nodes = graph.nodes();\n        const ratio = w / h;\n        let r = 0, c = 0;\n        while (r * c < nodes.length) {\n            c / r < ratio ? ++c : ++r;\n        }\n        const t = cy + h / 2;\n        const l = cx - w / 2;\n        const dx = w / c;\n        const dy = h / r;\n        let row = 0, col = 0;\n        nodes.forEach(node => {\n            node.x = l + col * dx;\n            node.y = t - row * dy;\n            if (col++ === c) {\n                col = 0;\n                row++;\n            }\n        });\n    }\n}\nexport { GridLayout };\n","import { isDefined } from 'ts-is-present';\nimport { StaticLayout } from './StaticLayout';\nclass RowLayout extends StaticLayout {\n    constructor() {\n        super();\n        this._groups = [];\n    }\n    apply(graph) {\n        const bbox = graph.boundingBox();\n        const cx = (bbox[1] + bbox[3]) / 2;\n        const cy = (bbox[0] + bbox[2]) / 2;\n        const w = 0.8 * Math.abs(bbox[1] - bbox[3]);\n        const h = 0.8 * Math.abs(bbox[0] - bbox[2]);\n        const groups = [];\n        const nodemap = new Map(graph.nodes().map(node => [node.id, node]));\n        this._groups.forEach(group => {\n            const nodes = group\n                .map(id => {\n                const node = nodemap.get(id);\n                nodemap.delete(id);\n                return node;\n            })\n                .filter(isDefined);\n            if (nodes.length)\n                groups.push(nodes);\n        });\n        groups.push(Array.from(nodemap.values()));\n        const ngroup = groups.length || 1;\n        const t = cy + h / 2;\n        const l = cx - w / 2;\n        const dx = w / Math.max(...groups.map(group => group.length));\n        const dy = h / ((ngroup - 1) || 1);\n        groups.forEach((group, g) => {\n            const y = t - g * dy;\n            group.forEach((node, n) => {\n                node.x = l + dx * n;\n                node.y = y;\n            });\n        });\n    }\n    groups(groups) {\n        this._groups = groups;\n        return this;\n    }\n}\nexport { RowLayout };\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance } from 'alloy-ts';\n\n// Sterling view types\nexport type MainView = 'graph' | 'table' | 'source';\nexport type TableView = 'settings' | 'evaluator' | null;\nexport type GraphView = 'node' | 'edge' | 'layout' | 'settings' | 'evaluator' | null;\nexport type SourceView = 'files' | 'evaluator' | null;\n\n// Sterling state\nexport interface SterlingState {\n    instance: AlloyInstance | null\n    mainView: MainView\n    tableView: TableView\n    graphView: GraphView\n    sourceView: SourceView\n    welcomeDescription: string\n    welcomeTitle: string\n}\n\nconst initialState: SterlingState = {\n    instance: null,\n    mainView: 'graph',\n    tableView: null,\n    graphView: null,\n    sourceView: 'files',\n    welcomeDescription: 'Use Alloy to generate an instance.',\n    welcomeTitle: 'Welcome to Sterling'\n};\n\nconst sterlingSlice = createSlice({\n    name: 'sterling',\n    initialState: initialState,\n    reducers: {\n\n        setGraphView (state, action: PayloadAction<GraphView>) {\n            state.graphView = action.payload === state.graphView\n                ? null\n                : action.payload;\n        },\n\n        setInstance (state, action: PayloadAction<AlloyInstance | null>) {\n\n            state.instance = action.payload;\n\n        },\n\n        setMainView (state, action: PayloadAction<MainView>) {\n            state.mainView = action.payload;\n        },\n\n        setSourceView (state, action: PayloadAction<SourceView>) {\n            state.sourceView = action.payload === state.sourceView\n                ? null\n                : action.payload;\n        },\n\n        setTableView (state, action: PayloadAction<TableView>) {\n            state.tableView = action.payload === state.tableView\n                ? null\n                : action.payload;\n        }\n\n    }\n});\n\nexport const {\n    setGraphView,\n    setInstance,\n    setMainView,\n    setSourceView,\n    setTableView\n} = sterlingSlice.actions;\nexport default sterlingSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance } from 'alloy-ts';\nimport { List, Map } from 'immutable';\nimport { setInstance } from '../../../../sterling/sterlingSlice'\n\nexport interface DataState {\n    asAttribute: Map<string, boolean>\n    atoms: Map<string, string[]>\n    collapseProjections: boolean\n    projections: Map<string, string>\n    unprojected: List<string>\n}\n\nconst initialState: DataState = {\n    asAttribute: Map(),\n    atoms: Map(),\n    collapseProjections: false,\n    projections: Map(),\n    unprojected: List()\n};\n\nconst dataSlice = createSlice({\n    name: 'graphdata',\n    initialState: initialState,\n    reducers: {\n        addProjection (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            const atoms = state.atoms.get(sig);\n            if (atoms && atoms.length) {\n                const atom = atoms[0];\n                state.projections = state.projections.set(sig, atom);\n                const index = state.unprojected.indexOf(sig);\n                if (index !== -1)\n                    state.unprojected = state.unprojected.delete(index);\n            }\n        },\n        nextAtom (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            const cur = state.projections.get(sig);\n            const atm = state.atoms.get(sig);\n            if (cur && atm) {\n                const idx = atm.indexOf(cur);\n                const nxt = idx + 1;\n                if (idx !== -1 && nxt < atm.length) {\n                    state.projections = state.projections.set(sig, atm[nxt]);\n                }\n            }\n        },\n        previousAtom (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            const cur = state.projections.get(sig);\n            const atm = state.atoms.get(sig);\n            if (cur && atm) {\n                const idx = atm.indexOf(cur);\n                const nxt = idx - 1;\n                if (idx !== -1 && nxt >= 0) {\n                    state.projections = state.projections.set(sig, atm[nxt]);\n                }\n            }\n        },\n        removeProjection (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            state.projections = state.projections.delete(sig);\n            state.unprojected = state.unprojected.push(sig).sort(alphabetical);\n        },\n        setProjection (state, action: PayloadAction<{sig: string, atom: string}>) {\n            const { sig, atom } = action.payload;\n            if (state.projections.has(sig) && state.projections.get(sig) !== atom) {\n                state.projections = state.projections.set(sig, atom);\n            }\n        },\n        toggleAsAttribute (state, action: PayloadAction<string|null>) {\n            const field = action.payload;\n            if (field) {\n                const curr = state.asAttribute.get(field);\n                state.asAttribute = state.asAttribute.set(field, !curr);\n            }\n        },\n        toggleCollapseProjections (state) {\n            state.collapseProjections = !state.collapseProjections\n        },\n    },\n    extraReducers: build =>\n        build.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance) {\n\n                const univ = instance.signatures().find(sig => sig.id() === 'univ');\n\n                if (univ) {\n\n                    const signatures = univ.subTypes();\n                    const fields = instance.fields();\n                    const skolems = instance.skolems().filter(s => s.arity() > 1);\n                    const both = [...fields, ...skolems];\n\n                    // Keep any existing projections\n                    state.projections = Map<string, string>().withMutations(map => {\n                        signatures.forEach(sig => {\n                            const atom = state.projections.get(sig.id());\n                            if (atom && sig.findAtom(atom)) {\n                                map.set(sig.id(), atom);\n                            }\n                        });\n                    });\n\n                    // Keep any fields set to display as attributes\n                    state.asAttribute = Map(both.map(item => {\n                        const id = item.id();\n                        return state.asAttribute.has(id)\n                            ? [id, state.asAttribute.get(id)!]\n                            : [id, false];\n                    }));\n\n                    // Create the list of unprojected signatures\n                    state.unprojected = List<string>().withMutations(list => {\n                        signatures.forEach(sig => {\n                            const id = sig.id();\n                            const count = sig.atoms(true).length;\n                            if (count && !state.projections.has(id))\n                                list.push(id);\n                        });\n                    }).sort(alphabetical);\n\n                    // Extract atoms\n                    state.atoms = Map(signatures.map(sig => [\n                            sig.id(),\n                            sig.atoms(true).map(atom => atom.name())\n                        ]));\n\n\n                } else {\n\n                    state.asAttribute = Map();\n                    state.atoms = Map();\n                    state.projections = Map();\n                    state.unprojected = List();\n\n                }\n\n            } else {\n\n                state.atoms = Map();\n                state.projections = Map();\n                state.unprojected = List();\n\n            }\n\n        })\n});\n\nfunction alphabetical (a: string, b: string): number {\n    return a.localeCompare(b);\n}\n\nexport const {\n    addProjection,\n    nextAtom,\n    previousAtom,\n    removeProjection,\n    setProjection,\n    toggleAsAttribute,\n    toggleCollapseProjections\n} = dataSlice.actions;\nexport default dataSlice.reducer;\n","import * as d3 from 'd3-color';\nimport * as schemes from 'd3-scale-chromatic';\n\nconst POPPER_MODIFIERS = {\n    preventOverflow: {\n        enabled: false\n    },\n    hide: {\n        enabled: false\n    }\n};\n\nconst COLOR_SCHEMES: [string, string[]][] = [\n    ['Tableu', colors(\"4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab\")],\n    ['Turbo', [0, 1, 2, 4, 5, 6, 7].map(i => turboScheme(i/8)).map(c => d3.rgb(c).hex())],\n    ['Categorical', schemes.schemeCategory10.slice()],\n    ['Accent', schemes.schemeAccent.slice()],\n    ['Dark', schemes.schemeDark2.slice()],\n    ['Pastel', schemes.schemePastel1.slice()],\n    ['Paired', schemes.schemePaired.slice()]\n];\n\nconst DEFAULT_COLORS = [\"#f44336\", \"#e91e63\", \"#9c27b0\", \"#673ab7\", \"#3f51b5\",\n    \"#2196f3\", \"#03a9f4\", \"#00bcd4\", \"#009688\", \"#4caf50\", \"#8bc34a\", \"#cddc39\",\n    \"#ffc107\", \"#ff9800\", \"#ff5722\", \"#795548\", \"#607d8b\",\n    \"#333333\", \"#777777\", \"#bbbbbb\", \"#ffffff\"];\n\nfunction background (color?: string | null): string | undefined {\n    if (!color) return;\n    const c = d3.color(color);\n    return c ? c.hex() : undefined;\n}\n\nfunction backgroundGradient (colors: string[]): string {\n    if (!colors.length) return '';\n    const percent = 100 / colors.length;\n    const strings = colors.map((color, i) => `${color} ${i*percent}% ${(i+1)*percent}%`);\n    return `linear-gradient(to right, ${strings.join(',')})`;\n}\n\nfunction colors (specifier: string): string[] {\n    let n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n    while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n    return colors;\n}\n\nfunction foreground (color?: string | null): string | undefined {\n    if (!color) return;\n    const c = d3.color(color);\n    if (!c) return;\n    const rgb = c.rgb();\n    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000 > 125\n        ? '#000000'\n        : '#ffffff';\n}\n\nfunction turboScheme (t: number): string {\n    t = Math.max(0, Math.min(1, t));\n    return \"rgb(\"\n        + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + \", \"\n        + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + \", \"\n        + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))\n        + \")\";\n}\n\nexport {\n    COLOR_SCHEMES,\n    DEFAULT_COLORS,\n    POPPER_MODIFIERS,\n    background,\n    backgroundGradient,\n    foreground\n}\n","import { Icon, Tag } from '@blueprintjs/core';\nimport { AlloyField, AlloySignature, AlloySkolem } from 'alloy-ts';\nimport * as React from 'react';\nimport { SigFieldSkolem } from './tableTypes';\n\nexport interface IAlloyTagProps {\n    fill?: boolean\n    nameFunction?: (item: SigFieldSkolem) => string\n}\n\nexport interface ISignatureTagProps extends IAlloyTagProps {\n    signature: AlloySignature | string\n}\n\nexport interface IFieldTagProps extends IAlloyTagProps {\n    field: AlloyField | string\n}\n\nexport interface ISkolemTagProps extends IAlloyTagProps {\n    skolem: AlloySkolem | string\n}\n\nclass SignatureTag extends React.Component<ISignatureTagProps> {\n\n    static className = 'sig-tag';\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const name = typeof props.signature === 'string'\n            ? props.signature\n            : props.nameFunction\n                ? props.nameFunction(props.signature)\n                : props.signature.name();\n\n        return (\n            <Tag className={SignatureTag.className} fill={props.fill}>\n                { name }\n            </Tag>\n        );\n\n    }\n\n}\n\nclass FieldTag extends React.Component<IFieldTagProps> {\n\n    static className = 'field-tag';\n\n    render (): React.ReactNode {\n\n        const name = typeof this.props.field === 'string'\n            ? this.props.field\n            : this.props.nameFunction\n                ? this.props.nameFunction(this.props.field)\n                : this.props.field.name();\n\n        const tokens = name.split('<:');\n\n        return (\n            <Tag\n                className={FieldTag.className}\n                fill={true}>\n                { FieldTag.FieldTagEls(tokens) }\n            </Tag>\n        )\n\n    }\n\n    public static FieldTagEls (tokens: Array<string>): React.ReactElement {\n\n        if (tokens.length !== 2)\n            return <>{tokens.join('')}</>;\n\n        return (<>\n            {tokens[0]}\n            <Icon\n                icon='symbol-triangle-down'\n                iconSize={14}\n                style={{\n                    padding: '1px',\n                    transform: 'rotate(90deg)'\n                }}/>\n            {tokens[1]}\n        </>);\n\n    }\n\n}\n\nclass SkolemTag extends React.Component<ISkolemTagProps> {\n\n    static className = 'skolem-tag';\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const name = typeof props.skolem === 'string'\n            ? props.skolem\n            : props.nameFunction\n                ? props.nameFunction(props.skolem)\n                : props.skolem.name();\n\n        return (\n            <Tag className={SkolemTag.className} fill={true}>\n                { name }\n            </Tag>\n\n        );\n\n    }\n\n}\n\nexport {\n    SignatureTag,\n    FieldTag,\n    SkolemTag\n}\n","import { AlloyField, AlloySkolem } from 'alloy-ts';\nimport { FieldTag } from '../../../table/TableTags';\nimport { Tree } from '../../graphTypes';\n\nfunction buildFieldTree (fields: AlloyField[], hideEmpty: boolean): Tree | null {\n\n    const flds = hideEmpty\n        ? fields.filter(field => field.tuples().length)\n        : fields;\n\n    return {\n        id: 'Fields',\n        children: flds.map(field => {\n            return {\n                id: field.id(),\n                label: FieldTag.FieldTagEls(field.id().split('<:')),\n                icon: 'flows',\n                children: []\n            }\n        })\n    };\n\n}\n\nfunction buildSkolemTree (skolems: AlloySkolem[]): Tree | null {\n\n    return {\n        id: 'Skolems',\n        children: skolems\n            .map(skolem => {\n                return {\n                    id: skolem.id(),\n                    icon: 'flows',\n                    children: []\n                }\n            })\n    };\n\n}\n\nexport {\n    buildFieldTree,\n    buildSkolemTree\n}\n","import {\n    cloneLabelStyle,\n    cloneLinkStyle,\n    LabelStyle,\n    LinkStyle\n} from '@atdyer/graph-js';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyField, AlloyInstance, AlloySkolem } from 'alloy-ts';\nimport { Map } from 'immutable';\nimport { setInstance } from '../../../../sterling/sterlingSlice';\nimport { Tree } from '../../graphTypes';\nimport { COLOR_SCHEMES } from '../../util';\nimport { buildFieldTree, buildSkolemTree } from './edgeTypes';\n\nexport interface EdgeStylingState {\n    collapsed: Map<string, boolean>\n    collapseEdgeStyle: boolean\n    collapseScheme: boolean\n    fields: AlloyField[]\n    hideEmptyFields: boolean\n    labelStyles: Map<string, LabelStyle>\n    linkStyles: Map<string, LinkStyle>\n    selected: string | null\n    skolems: AlloySkolem[]\n    treeField: Tree | null\n    treeSkolem: Tree | null\n}\n\nconst initialState: EdgeStylingState = {\n    collapsed: Map({\n        Fields: false,\n        Skolems: false\n    }),\n    collapseEdgeStyle: false,\n    collapseScheme: false,\n    fields: [],\n    hideEmptyFields: true,\n    labelStyles: Map(),\n    linkStyles: Map(),\n    selected: null,\n    skolems: [],\n    treeField: null,\n    treeSkolem: null\n};\n\nconst edgeStylingSlice = createSlice({\n    name: 'edgestyles',\n    initialState: initialState,\n    reducers: {\n        clearAll (state) {\n            state.labelStyles = state.labelStyles.map(() => ({}));\n            state.linkStyles = state.linkStyles.map(() => ({}));\n        },\n        clearCurrent (state) {\n            if (state.selected) {\n                state.labelStyles = state.labelStyles.set(state.selected, {});\n                state.linkStyles = state.linkStyles.set(state.selected, {});\n            }\n        },\n        collapseTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, true);\n        },\n        expandTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, false);\n        },\n        selectTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            if (state.linkStyles.has(target)\n                || target === 'Fields'\n                || target === 'Skolems') state.selected = target;\n        },\n        setColorScheme (state, action: PayloadAction<string[]>) {\n            const colors = action.payload;\n            if (!colors.length) return;\n            state.linkStyles = state.linkStyles.withMutations(styles => {\n                [...state.fields, ...state.skolems].forEach((item, index) => {\n                    const id = item.id();\n                    const color = colors[index % colors.length];\n                    const link = state.linkStyles.get(id);\n                    if (link) {\n                        const newlink = cloneLinkStyle(link);\n                        newlink.stroke = color;\n                        styles.set(id, newlink);\n                    }\n                });\n            });\n            state.labelStyles = state.labelStyles.withMutations(styles => {\n                [...state.fields, ...state.skolems].forEach((item, index) => {\n                    const id = item.id();\n                    const color = colors[index % colors.length];\n                    const label = state.labelStyles.get(id);\n                    if (label) {\n                        const newlabel = cloneLabelStyle(label);\n                        newlabel.color = color;\n                        styles.set(id, newlabel);\n                    }\n                });\n            });\n        },\n        setLabelColor (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const label = state.labelStyles.get(state.selected);\n                if (label) {\n                    const color = action.payload;\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    color === null\n                        ? delete newlabel.color\n                        : newlabel.color = color;\n                    state.labelStyles = state.labelStyles.set(state.selected, newlabel);\n                }\n            }\n        },\n        setLabelSize (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const label = state.labelStyles.get(state.selected);\n                if (label) {\n                    const size = parseInt(action.payload);\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    isNaN(size) || size === 0\n                        ? delete newlabel.font\n                        : newlabel.font = `${size}px sans-serif`;\n                    state.labelStyles = state.labelStyles.set(state.selected, newlabel);\n                }\n            }\n        },\n        setStroke (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const link = state.linkStyles.get(state.selected);\n                if (link) {\n                    const color = action.payload;\n                    const newlink = cloneLinkStyle(link)!;\n                    color === null\n                        ? delete newlink.stroke\n                        : newlink.stroke = color;\n                    state.linkStyles = state.linkStyles.set(state.selected, newlink);\n                }\n            }\n        },\n        setStrokeWidth (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const link = state.linkStyles.get(state.selected);\n                if (link) {\n                    const width = parseInt(action.payload);\n                    const newlink = cloneLinkStyle(link)!;\n                    isNaN(width) || width === 0\n                        ? delete newlink.strokeWidth\n                        : newlink.strokeWidth = width;\n                    state.linkStyles = state.linkStyles.set(state.selected, newlink);\n                }\n            }\n        },\n        toggleCollapseEdgeStyle (state) {\n            state.collapseEdgeStyle = !state.collapseEdgeStyle;\n        },\n        toggleCollapseScheme (state) {\n            state.collapseScheme = !state.collapseScheme;\n        },\n        toggleHideEmptyFields (state) {\n            state.hideEmptyFields = !state.hideEmptyFields;\n            state.treeField = buildFieldTree(state.fields as AlloyField[], state.hideEmptyFields);\n        }\n    },\n    extraReducers: builder =>\n        builder.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance) {\n\n                const fields = instance.fields();\n                const skolems = instance.skolems().filter(s => s.arity() > 1);\n                const both = [...fields, ...skolems];\n\n                state.fields = fields;\n                state.skolems = skolems;\n                state.treeField = buildFieldTree(fields, state.hideEmptyFields);\n                state.treeSkolem = buildSkolemTree(skolems);\n\n                // Keep any existing label styles\n                state.labelStyles = Map(both.map(item => {\n                    const id = item.id();\n                    return state.labelStyles.has(id)\n                        ? [id, cloneLabelStyle(state.labelStyles.get(id)!)]\n                        : [id, {}]\n                }));\n\n                // Keep any exiting link styles\n                state.linkStyles = Map(both.map(item => {\n                    const id = item.id();\n                    return state.linkStyles.has(id)\n                        ? [id, cloneLinkStyle(state.linkStyles.get(id)!)]\n                        : [id, {}]\n                }));\n\n                // If they don't already exist, create empty link and label\n                // styles for the two categories we've got (fields and skolems)\n                if (!state.labelStyles.has('Fields'))\n                    state.labelStyles = state.labelStyles.set('Fields', {});\n                if (!state.labelStyles.has('Skolems'))\n                    state.labelStyles = state.labelStyles.set('Skolems', {});\n                if (!state.linkStyles.has('Fields'))\n                    state.linkStyles = state.linkStyles.set('Fields', {\n                        strokeWidth: 2\n                    });\n                if (!state.linkStyles.has('Skolems'))\n                    state.linkStyles = state.linkStyles.set('Skolems', {\n                        strokeWidth: 2\n                    });\n\n                // For the Forge folks, let's apply a default color scheme to\n                // anything that isn't already colored (except for the categories).\n                const defaultScheme = COLOR_SCHEMES[2][1]\n                    .concat(COLOR_SCHEMES[1][1])\n                    .concat(COLOR_SCHEMES[0][1]);\n                state.linkStyles = state.linkStyles.withMutations(styles => {\n                    [...state.fields, ...state.skolems].forEach((item, index) => {\n                        const id = item.id();\n                        const link = state.linkStyles.get(id);\n                        if (link && !link.stroke) {\n                            const newlink = cloneLinkStyle(link);\n                            newlink.stroke = defaultScheme[index % defaultScheme.length];\n                            styles.set(id, newlink);\n                        }\n                    });\n                });\n                state.labelStyles = state.labelStyles.withMutations(styles => {\n                    [...state.fields, ...state.skolems].forEach((item, index) => {\n                        const id =item.id();\n                        const label = state.labelStyles.get(id);\n                        if (label && !label.color) {\n                            const newlabel = cloneLabelStyle(label);\n                            newlabel.color = defaultScheme[index % defaultScheme.length];\n                            styles.set(id, newlabel);\n                        }\n                    });\n                });\n\n            } else {\n\n                state.fields = [];\n                state.labelStyles = Map();\n                state.linkStyles = Map();\n                state.selected = null;\n                state.skolems = [];\n                state.treeField = null;\n                state.treeSkolem = null;\n\n            }\n\n        })\n});\n\nexport const {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setColorScheme,\n    setLabelColor,\n    setLabelSize,\n    setStroke,\n    setStrokeWidth,\n    toggleCollapseEdgeStyle,\n    toggleCollapseScheme,\n    toggleHideEmptyFields\n} = edgeStylingSlice.actions;\nexport default edgeStylingSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { LabelPlacement } from '@atdyer/graph-js';\n\nexport interface GraphSettingsState {\n    axesVisible: boolean\n    bundleFactor: number\n    collapseEdgeSettings: boolean\n    collapseGraphSettings: boolean\n    edgeLabelPlacement: LabelPlacement\n    gridVisible: boolean\n}\n\nconst initialState: GraphSettingsState = {\n    axesVisible: false,\n    bundleFactor: 0.15,\n    collapseEdgeSettings: false,\n    collapseGraphSettings: false,\n    gridVisible: false,\n    edgeLabelPlacement: 'spread'\n};\n\nconst graphSettingsSlice = createSlice({\n    name: 'graphsettings',\n    initialState: initialState,\n    reducers: {\n        setBundleFactor (state, action: PayloadAction<number>) {\n            const value = action.payload;\n            if (value >= 0) state.bundleFactor = value;\n        },\n        setLabelPlacement (state, action: PayloadAction<LabelPlacement>) {\n            state.edgeLabelPlacement = action.payload;\n        },\n        toggleAxesVisible (state) { state.axesVisible = !state.axesVisible },\n        toggleCollapseEdgeSettings (state) { state.collapseEdgeSettings = !state.collapseEdgeSettings },\n        toggleCollapseGraphSettings (state) { state.collapseGraphSettings = !state.collapseGraphSettings },\n        toggleGridVisible (state) { state.gridVisible = !state.gridVisible }\n    }\n});\n\nexport const {\n    setBundleFactor,\n    setLabelPlacement,\n    toggleAxesVisible,\n    toggleCollapseEdgeSettings,\n    toggleCollapseGraphSettings,\n    toggleGridVisible\n} = graphSettingsSlice.actions;\nexport default graphSettingsSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport type Alignment = 'UL' | 'UR' | 'DL' | 'DR' | undefined;\nexport type Direction = 'TB' | 'BT' | 'LR' | 'RL';\nexport type Ranker = 'network-simplex' | 'tight-tree' | 'longest-path';\n\nexport interface LayoutState {\n    align: Alignment\n    nodesep: number\n    rankdir: Direction\n    ranker: Ranker\n    ranksep: number\n}\n\nconst initialState: LayoutState = {\n    align: undefined,\n    nodesep: 100,\n    rankdir: 'BT',\n    ranker: 'network-simplex',\n    ranksep: 200\n};\n\nconst layoutSlice = createSlice({\n    name: 'layout',\n    initialState: initialState,\n    reducers: {\n        setAlign (state, action: PayloadAction<Alignment>) {\n            state.align = action.payload;\n        },\n        setNodeSep (state, action: PayloadAction<number>) {\n            state.nodesep = action.payload;\n        },\n        setRankDir (state, action: PayloadAction<Direction>) {\n            state.rankdir = action.payload;\n        },\n        setRanker (state, action: PayloadAction<Ranker>) {\n            state.ranker = action.payload;\n        },\n        setRankSep (state, action: PayloadAction<number>) {\n            state.ranksep = action.payload;\n        }\n    }\n});\n\nexport const {\n    setAlign,\n    setNodeSep,\n    setRankDir,\n    setRanker,\n    setRankSep\n} = layoutSlice.actions;\nexport default layoutSlice.reducer;\n","import { AlloySignature } from 'alloy-ts';\nimport { Tree } from '../../graphTypes';\n\nfunction buildTypeTree (univ: AlloySignature | null, hideEmpty: boolean): Tree | null {\n\n    if (!univ) return null;\n\n    const populate = (sig: AlloySignature): Tree => {\n\n        const subs = hideEmpty\n            ? sig.subTypes().filter(s => s.atoms().length || s.subTypes().length)\n            : sig.subTypes();\n\n        const children = subs.map(populate);\n        return {\n            id: sig.id(),\n            icon: 'group-objects',\n            children\n        };\n\n    };\n\n    return populate(univ);\n\n}\n\nexport {\n    buildTypeTree\n}\n","import {\n    CircleStyle,\n    cloneLabelStyle,\n    cloneShapeStyle,\n    convertToShape,\n    LabelStyle,\n    RectangleStyle,\n    ShapeStyle\n} from '@atdyer/graph-js';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance, AlloySignature } from 'alloy-ts';\nimport { Map } from 'immutable';\nimport { setInstance } from '../../../../sterling/sterlingSlice';\nimport { Tree } from '../../graphTypes';\nimport { COLOR_SCHEMES, foreground } from '../../util';\nimport { buildTypeTree } from './nodeTypes';\n\nexport interface NodeStylingState {\n    collapsed: Map<string, boolean>\n    collapseNodeStyle: boolean\n    hideDisconnected: Map<string, boolean>\n    hideEmptySets: boolean\n    labels: Map<string, LabelStyle>\n    nodeTree: Tree | null\n    selected: string | null\n    shapes: Map<string, ShapeStyle>\n    univ: AlloySignature | null\n}\n\nconst initialState: NodeStylingState = {\n    collapsed: Map(),\n    collapseNodeStyle: false,\n    hideDisconnected: Map(),\n    hideEmptySets: true,\n    labels: Map(),\n    nodeTree: null,\n    selected: null,\n    shapes: Map(),\n    univ: null\n};\n\nconst nodeStylingSlice = createSlice({\n    name: 'nodestyles',\n    initialState: initialState,\n    reducers: {\n        clearAll (state) {\n            state.labels = state.labels.map(() => ({}));\n            state.shapes = state.shapes.map(() => ({}));\n        },\n        clearCurrent (state) {\n            if (state.selected) {\n                state.labels = state.labels.set(state.selected, {});\n                state.shapes = state.shapes.set(state.selected, {});\n            }\n        },\n        collapseTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, true);\n        },\n        expandTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, false);\n        },\n        selectTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            if (state.shapes.has(target)) state.selected = target;\n        },\n        setFill (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape) {\n                    const color = action.payload;\n                    const newshape = shape ? cloneShapeStyle(shape) : {};\n                    color === null\n                        ? delete newshape.fill\n                        : newshape.fill = color;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setHeight (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape && shape.type === 'rectangle') {\n                    const height = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape) as RectangleStyle;\n                    isNaN(height) || height === 0\n                        ? delete newshape.height\n                        : newshape.height = height;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setLabelColor (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const label = state.labels.get(state.selected);\n                if (label) {\n                    const color = action.payload;\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    color === null\n                        ? delete newlabel.color\n                        : newlabel.color = color;\n                    state.labels = state.labels.set(state.selected, newlabel);\n                }\n            }\n        },\n        setLabelSize (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const label = state.labels.get(state.selected);\n                if (label) {\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    const size = parseInt(action.payload);\n                    isNaN(size) || size === 0\n                        ? delete newlabel.font\n                        : newlabel.font = `${size}px sans-serif`;\n                    state.labels = state.labels.set(state.selected, newlabel);\n                }\n            }\n        },\n        setRadius (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape && shape.type === 'circle') {\n                    const radius = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape) as CircleStyle;\n                    isNaN(radius) || radius === 0\n                        ? delete newshape.radius\n                        : newshape.radius = radius;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setShape (state, action: PayloadAction<'circle' | 'rectangle' | null>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                const type = action.payload;\n                if (shape === undefined) return;\n                if ((shape && shape.type !== type) || shape !== type) {\n                    const newshape = convertToShape(shape, type);\n                    state.shapes = state.shapes.set(\n                        state.selected,\n                        newshape\n                    );\n                }\n            }\n        },\n        setStroke (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape) {\n                    const color = action.payload;\n                    const newshape = cloneShapeStyle(shape)!;\n                    color === null\n                        ? delete newshape.stroke\n                        : newshape.stroke = color;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setStrokeWidth (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape) {\n                    const width = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape)!;\n                    isNaN(width) || width === -1\n                        ? delete newshape.strokeWidth\n                        : newshape.strokeWidth = width;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setWidth (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape && shape.type === 'rectangle') {\n                    const width = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape) as RectangleStyle;\n                    isNaN(width) || width === 0\n                        ? delete newshape.width\n                        : newshape.width = width;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        toggleCollapseNodeStyle (state) {\n            state.collapseNodeStyle = !state.collapseNodeStyle;\n        },\n        toggleHideDisconnected (state) {\n            const selected = state.selected;\n            if (selected) {\n                const next = !state.hideDisconnected.get(selected);\n                state.hideDisconnected = state.hideDisconnected.set(selected, next);\n            }\n        },\n        toggleHideEmptySets (state) {\n            state.hideEmptySets = !state.hideEmptySets;\n            state.nodeTree = buildTypeTree(state.univ as AlloySignature, state.hideEmptySets);\n        }\n    },\n    extraReducers: builder =>\n        builder.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance !== null) {\n\n                const signatures = instance.signatures();\n                const univ = signatures.find(sig => sig.id() === 'univ') || null;\n\n                // Build the signature tree using only IDs\n                state.univ = univ;\n                state.nodeTree = buildTypeTree(univ, state.hideEmptySets);\n\n                // For all maps, keeps existing signatures, get rid of ones that\n                // no longer exist, and add new ones\n                state.collapsed = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.collapsed.has(id)\n                        ? [id, !!state.collapsed.get(id)]\n                        : [id, false];\n                }));\n\n                state.hideDisconnected = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.hideDisconnected.has(id)\n                        ? [id, !!state.hideDisconnected.get(id)]\n                        : [id, true];\n                }));\n\n                state.labels = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.labels.has(id)\n                        ? [id, cloneLabelStyle(state.labels.get(id)!)]\n                        : [id, {}];\n                }));\n\n                state.shapes = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.shapes.has(id)\n                        ? [id, cloneShapeStyle(state.shapes.get(id)!)]\n                        : [id, {}];\n                }));\n\n                // For the Forge folks, let's apply a default color scheme to\n                // top level signatures that aren't already colored.\n                const defaultScheme = COLOR_SCHEMES[0][1]\n                    .concat(COLOR_SCHEMES[1][1])\n                    .concat(COLOR_SCHEMES[2][1]);\n                let next = 0;\n                state.shapes = state.shapes.withMutations(styles => {\n                    signatures.forEach(signature => {\n                        const id = signature.id();\n                        const shape = state.shapes.get(id);\n                        if (shape && !shape.fill) {\n                            const newshape = cloneShapeStyle(shape);\n                            newshape.fill = defaultScheme[next++ % defaultScheme.length];\n                            styles.set(id, newshape);\n                        }\n                    });\n                });\n                state.labels = state.labels.withMutations(styles => {\n                    signatures.forEach((signature, index) => {\n                        const id = signature.id();\n                        const shape = state.shapes.get(id);\n                        const label = state.labels.get(id);\n                        if (label && shape && shape.fill) {\n                            const newlabel = cloneLabelStyle(label);\n                            newlabel.color = foreground(shape.fill);\n                            styles.set(id, newlabel);\n                        }\n                    });\n                });\n\n                // If an item was selected, make sure it still exists\n                if (state.selected && !state.shapes.has(state.selected)){\n                    state.selected = null;\n                }\n\n            } else {\n\n                state.collapsed = Map();\n                state.hideDisconnected = Map();\n                state.labels = Map();\n                state.nodeTree = null;\n                state.shapes = Map();\n                state.selected = null;\n                state.univ = null;\n\n            }\n\n        })\n});\n\nexport const {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setFill,\n    setHeight,\n    setLabelColor,\n    setLabelSize,\n    setRadius,\n    setShape,\n    setStroke,\n    setStrokeWidth,\n    setWidth,\n    toggleCollapseNodeStyle,\n    toggleHideDisconnected,\n    toggleHideEmptySets\n} = nodeStylingSlice.actions;\nexport default nodeStylingSlice.reducer;\n","import {\n    AlloyElement,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem, sorting\n} from 'alloy-ts';\n\nexport enum HorizontalAlignment { Left, Center, Right}\nexport enum LayoutDirection { Row, Column}\nexport enum SortDirection { Ascending, Descending}\nexport enum SortMethod { Alphabetical, Builtin, Group, Size}\nexport enum TablesType { All, Signatures, Fields, Skolems, Select}\n\nexport type AlloyNameFn = (item: AlloyElement) => string;\nexport type AlloySortFn = (a: AlloyElement, b: AlloyElement) => number;\nexport type SigFieldSkolem = AlloySignature | AlloyField | AlloySkolem;\nexport type SortType = {\n    method: SortMethod\n    direction: SortDirection\n};\n\nexport const SKOLEM_COLORS = [\n    \"#2965CC\", \"#29A634\", \"#D99E0B\", \"#D13913\", \"#8F398F\",\n    \"#00B3A4\", \"#DB2C6F\", \"#9BBF30\", \"#96622D\", \"#7157D9\"\n];\n\nfunction buildNameFunction (removeThis: boolean): AlloyNameFn {\n    return (item: AlloyElement) => {\n        return removeThis\n            ? item.id().replace(/^this\\//, '')\n            : item.id();\n    }\n}\n\nfunction buildSortFunction (type: SortType, nameFunction: AlloyNameFn): AlloySortFn {\n    if (type.method === SortMethod.Size) {\n        return sorting.sizeSort(type.direction === SortDirection.Ascending);\n    }\n    if (type.method === SortMethod.Alphabetical) {\n        return sorting.alphabeticalSort(nameFunction, type.direction === SortDirection.Ascending);\n    }\n    if (type.method === SortMethod.Group) {\n        return sorting.groupSort();\n    }\n    return () => 0;\n}\n\nfunction getAlignClass (alignment: HorizontalAlignment): string {\n    return alignment === HorizontalAlignment.Left ? 'left' :\n        alignment === HorizontalAlignment.Center ? 'center' :\n            alignment === HorizontalAlignment.Right ? 'right' : '';\n}\n\nfunction getLayoutClass (direction: LayoutDirection): string {\n    return direction === LayoutDirection.Row ? 'row' :\n        direction === LayoutDirection.Column ? 'column' : '';\n}\n\nexport {\n    getAlignClass,\n    buildNameFunction,\n    buildSortFunction,\n    getLayoutClass\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { Graph } from '@atdyer/graph-js';\nimport { createSlice } from '@reduxjs/toolkit';\nimport dataSlice from './drawer-views/data/dataSlice';\nimport edgeStylingSlice from './drawer-views/edge-styling/edgeStylingSlice';\nimport graphSettingsSlice from './drawer-views/graph-settings/graphSettingsSlice';\nimport layoutSlice from './drawer-views/layout/layoutSlice';\nimport nodeStylingSlice from './drawer-views/node-styling/nodeStylingSlice';\n\nexport interface GraphState {\n    graph: Graph\n}\n\nconst initialState: GraphState = {\n    graph: new Graph(),\n};\n\nconst graphSlice = createSlice({\n    name: 'graph',\n    initialState: initialState,\n    reducers: {}\n});\n\nexport default combineReducers({\n    dataSlice,\n    edgeStylingSlice,\n    graphSlice: graphSlice.reducer,\n    graphSettingsSlice,\n    layoutSlice,\n    nodeStylingSlice\n});\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloySource } from 'alloy-ts';\nimport { setInstance } from '../../sterling/sterlingSlice';\n\nexport interface SourceState {\n    selected: AlloySource | null\n}\n\nconst initialState: SourceState = {\n    selected: null\n};\n\nconst sourceSlice = createSlice({\n    name: 'source',\n    initialState: initialState,\n    reducers: {\n        setSelected (state, action: PayloadAction<AlloySource>) {\n            state.selected = action.payload;\n        }\n    },\n    extraReducers: build =>\n        build.addCase(setInstance, state => { state.selected = null })\n});\n\nexport const {\n    setSelected\n} = sourceSlice.actions;\nexport default sourceSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance, AlloySkolem } from 'alloy-ts';\nimport { setInstance } from '../../sterling/sterlingSlice';\nimport {\n    HorizontalAlignment,\n    LayoutDirection,\n    SigFieldSkolem,\n    SKOLEM_COLORS,\n    SortDirection,\n    SortMethod,\n    SortType,\n    TablesType\n} from './tableTypes';\n\n// Table view state\nexport interface TableState {\n    alignment: HorizontalAlignment\n    collapseData: boolean\n    collapseLayout: boolean\n    collapseTables: boolean\n    data: SigFieldSkolem[]\n    dataSelected: SigFieldSkolem[]\n    highlightSkolems: boolean\n    layoutDirection: LayoutDirection\n    removeBuiltin: boolean\n    removeEmpty: boolean\n    removeThis: boolean\n    primarySort: SortType\n    secondarySort: SortType\n    skolemColors: Map<AlloySkolem, string>\n    tablesType: TablesType\n}\n\n// The initial table view state\nconst initialState: TableState = {\n    alignment: HorizontalAlignment.Left,\n    collapseData: false,\n    collapseLayout: false,\n    collapseTables: false,\n    data: [],\n    dataSelected: [],\n    highlightSkolems: true,\n    layoutDirection: LayoutDirection.Row,\n    removeBuiltin: true,\n    removeEmpty: true,\n    removeThis: true,\n    primarySort: {\n        method: SortMethod.Group,\n        direction: SortDirection.Descending\n    },\n    secondarySort: {\n        method: SortMethod.Size,\n        direction: SortDirection.Descending\n    },\n    skolemColors: new Map(),\n    tablesType: TablesType.All\n};\n\n// The table slice\nconst tableSlice = createSlice({\n    name: 'table',\n    initialState: initialState,\n    reducers: {\n        clearSelectedData (state) { state.dataSelected = [] },\n        deselectData (state, action: PayloadAction<SigFieldSkolem>) {\n            const index = state.dataSelected.indexOf(action.payload);\n            if (index !== -1) {\n                state.dataSelected.splice(index, 1);\n            }\n            state.tablesType = TablesType.Select;\n        },\n        selectData (state, action: PayloadAction<SigFieldSkolem>) {\n            if (!state.dataSelected.includes(action.payload)) {\n                state.dataSelected.push(action.payload);\n            }\n            state.tablesType = TablesType.Select;\n        },\n        setAlignment (state, action: PayloadAction<HorizontalAlignment>) { state.alignment = action.payload },\n        setLayoutDirection (state, action: PayloadAction<LayoutDirection>) { state.layoutDirection = action.payload },\n        setSort (state, action: PayloadAction<SortType>) {\n            if (state.primarySort.method !== action.payload.method) {\n                state.secondarySort = state.primarySort;\n            }\n            state.primarySort = action.payload;\n        },\n        setTableTypes (state, action: PayloadAction<TablesType>) { state.tablesType = action.payload },\n        toggleCollapseData (state) { state.collapseData = !state.collapseData },\n        toggleCollapseLayout (state) { state.collapseLayout = !state.collapseLayout },\n        toggleCollapseTables (state) { state.collapseTables = !state.collapseTables },\n        toggleHighlightSkolems (state) {\n            state.highlightSkolems = !state.highlightSkolems;\n            if (state.highlightSkolems && state.tablesType === TablesType.Skolems) {\n                state.tablesType = TablesType.All;\n            }\n        },\n        toggleRemoveBuiltin (state) { state.removeBuiltin = !state.removeBuiltin },\n        toggleRemoveEmpty (state) { state.removeEmpty = !state.removeEmpty },\n        toggleRemoveThis (state) { state.removeThis = !state.removeThis }\n    },\n    extraReducers: builder =>\n        builder.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance) {\n\n                const skolems = instance.skolems();\n\n                state.data = [\n                    ...instance.signatures(),\n                    ...instance.fields(),\n                    ...skolems\n                ];\n\n                state.skolemColors = new Map(skolems.map((skolem, i) => {\n                    return [skolem, SKOLEM_COLORS[i % skolems.length]];\n                }));\n\n                state.dataSelected = state.dataSelected.filter(item => {\n                    return state.data.find(curr => curr.id() === item.id()) !== undefined;\n                })\n\n            }\n\n        })\n});\n\nexport const {\n    clearSelectedData,\n    deselectData,\n    selectData,\n    setAlignment,\n    setLayoutDirection,\n    setSort,\n    setTableTypes,\n    toggleCollapseData,\n    toggleCollapseLayout,\n    toggleCollapseTables,\n    toggleHighlightSkolems,\n    toggleRemoveBuiltin,\n    toggleRemoveEmpty,\n    toggleRemoveThis\n} = tableSlice.actions;\n\nexport default tableSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport graphSlice from './features/graph/graphSlice';\nimport sourceSlice from './features/source/sourceSlice';\nimport sterlingSlice from './sterling/sterlingSlice';\nimport tableSlice from './features/table/tableSlice';\n\n\nexport const sterlingApp = combineReducers({\n    graphSlice,\n    sourceSlice,\n    sterlingSlice,\n    tableSlice\n});\n\nexport type RootState = ReturnType<typeof sterlingApp>;\n","import { SterlingConnection } from '../sterling/SterlingConnection';\nimport { EventDispatcher } from '../util/EventDispatcher';\n\nexport interface Expression {\n    id: number\n    expression: string\n    error: boolean\n    result: null | boolean | number | string\n}\n\nclass Evaluator extends EventDispatcher {\n\n    private _connection: SterlingConnection;\n    private _expressions: Expression[];\n    private _pending: Expression | null;\n\n    protected static _nextid: number = 0;\n\n    constructor (connection: SterlingConnection) {\n\n        super();\n\n        this._connection = connection;\n        this._expressions = [];\n        this._pending = null;\n\n        connection.addEventListener('eval', event => {\n            this._parse(event.data);\n        });\n\n    }\n\n    clear (): void {\n\n        this._expressions = [];\n\n    }\n\n    evaluate (expression: string): void {\n\n        this._request({\n            id: Evaluator._nextid++,\n            error: false,\n            expression: expression,\n            result: null\n        });\n\n    }\n\n    expressions (): Expression[] {\n\n        return this._expressions;\n\n    }\n\n    private _parse (response: string): void {\n\n        const expression = this._pending;\n        const tokens = response.match(/(-?\\d+):(.*)/);\n\n        if (tokens === null) return;\n\n        const id = parseInt(tokens[1]);\n\n        if (expression && expression.id === id) {\n\n            const result = tokens[2].trim();\n\n            if (result.slice(0, 4) === 'ERR:') {\n                expression.result = result.slice(4);\n                expression.error = true;\n            }\n            else {\n                expression.result = result;\n                expression.error = false;\n            }\n\n            this._expressions.push(expression);\n            this._setPending(null);\n\n        }\n\n    }\n\n    private _request (expression: Expression): void {\n\n        this._setPending(expression);\n\n        const submitted = this._connection.requestEvaluateExpression(\n            expression.id,\n            expression.expression\n        );\n\n        if (!submitted) {\n\n            this._parse(`${expression.id}:ERR:Error: Not Connected`);\n\n        }\n\n    }\n\n    private _setPending (expression: Expression | null): void {\n\n        this._pending = expression;\n\n        if (expression !== null) {\n\n            this.dispatchEvent({\n                type: 'pending'\n            });\n\n        } else {\n            \n            this.dispatchEvent({\n                type: 'ready'\n            });\n            \n        }\n\n    }\n\n}\n\nexport {\n    Evaluator\n}\n","import React from 'react';\n\ninterface EvaluatorTableProps {\n    result: string\n}\n\nconst EvaluatorTable: React.FunctionComponent<EvaluatorTableProps> = props => {\n\n    return (\n        <table className={'bp3-html-table bp3-html-table-condensed bp3-html-table-striped .bp3-interactive'}>\n            <tbody>\n            {\n                parseResult(props.result).map((row, i) => (\n                    <tr key={i}>\n                        {\n                            row.map((col, j) => (\n                                <td key={j}>\n                                    { col }\n                                </td>\n                            ))\n                        }\n                    </tr>\n                ))\n            }\n            </tbody>\n        </table>\n    );\n\n};\n\nfunction parseResult (result: string): string[][] {\n\n    if (result[0] === '{' && result[result.length-1] === '}') {\n\n        const text = result.slice(1, -1);\n        const rows = text.split(',');\n        return rows.map(row => {\n            return row.split('->');\n        });\n\n    }\n\n    return [];\n\n}\n\nexport default EvaluatorTable;\n","import {\n    Button,\n    Callout,\n    Icon,\n    Intent,\n    NonIdealState, Tooltip\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { Evaluator, Expression } from './Evaluator';\nimport EvaluatorTable from './EvaluatorTable';\n\nexport interface IEvaluatorProps {\n    evaluator: Evaluator\n}\n\ninterface IEvaluatorState {\n    count: number\n    expressions: Expression[]\n    history: number\n    table: boolean\n}\n\nconst MESSAGE = 'The evaluator allows you to type in Alloy expressions and see ' +\n    'their values. For example, \\'univ\\' shows the list of atoms. Type an ' +\n    'expression below and press Enter to evaluate (you can press the up and down ' +\n    'arrow keys to recall old inputs).';\n\nclass EvaluatorView extends React.Component<IEvaluatorProps, IEvaluatorState> {\n\n    private readonly _botRef: React.RefObject<HTMLDivElement>;\n    private readonly _textRef: React.RefObject<HTMLTextAreaElement>;\n\n    constructor (props: IEvaluatorProps) {\n\n        super(props);\n\n        const evaluator = props.evaluator;\n        evaluator.addEventListener('pending', this._onPending);\n        evaluator.addEventListener('ready', this._onReady);\n\n        this._botRef = React.createRef();\n        this._textRef = React.createRef();\n\n        const expressions = props.evaluator.expressions();\n        this.state = {\n            count: expressions.length,\n            expressions: expressions,\n            history: expressions.length,\n            table: false\n        }\n\n    }\n\n    componentDidMount(): void {\n\n        this._scrollDown();\n\n    }\n\n    componentDidUpdate(prevProps: Readonly<IEvaluatorProps>, prevState: Readonly<IEvaluatorState>): void {\n\n        if (prevState.count !== this.state.count) {\n\n            this._scrollDown();\n\n        }\n\n    }\n\n    componentWillUnmount(): void {\n\n        const evaluator = this.props.evaluator;\n        evaluator.removeEventListener('pending', this._onPending);\n        evaluator.removeEventListener('ready', this._onReady);\n\n    }\n\n    render (): React.ReactNode {\n\n        const state = this.state;\n        const SuccessIcon = <Icon icon={'blank'} iconSize={12}/>;\n        const ErrorIcon = <Icon icon={'cross'} iconSize={12}/>;\n\n        state.history < state.count\n            ? this._setText(state.expressions[state.history].expression)\n            : this._setText('');\n\n        return (\n            <div className={'evaluator'}>\n                <div className={'evaluator-bar bp3-dark'}>\n                    <Tooltip\n                        content={'Clear'}\n                        hoverOpenDelay={500}\n                        intent={Intent.PRIMARY}>\n                        <Button\n                            small={true}\n                            minimal={true}\n                            icon={'clean'}\n                            onClick={() => {\n                                this.props.evaluator.clear();\n                                const expressions = this.props.evaluator.expressions();\n                                this.setState({\n                                    expressions: expressions,\n                                    count: expressions.length,\n                                    history: expressions.length\n                                });\n                            }}/>\n                    </Tooltip>\n                    <Tooltip\n                        content={state.table ? 'Display Text' : 'Display Tables'}\n                        hoverOpenDelay={500}\n                        intent={Intent.PRIMARY}>\n                        <Button\n                            small={true}\n                            minimal={true}\n                            icon={state.table ? 'align-left' : 'th'}\n                            onClick={() => this.setState({ table: !state.table })}/>\n                    </Tooltip>\n                </div>\n                <div className={'evaluator-output'}>\n                    {\n                        state.expressions.length\n                            ? state.expressions.map(expression => (\n                                <Callout\n                                    key={expression.id}\n                                    icon={expression.error ? ErrorIcon : SuccessIcon}\n                                    title={expression.expression}\n                                    intent={expression.error ? Intent.DANGER : Intent.NONE}\n                                >\n                                    {\n                                        state.table && isTableable(expression) && typeof expression.result === 'string'\n                                            ? <EvaluatorTable result={expression.result}/>\n                                            : expression.result\n                                    }\n                                </Callout>\n                            ))\n                            : <NonIdealState\n                                title={'Evaluator'}\n                                description={MESSAGE}\n                                icon={'console'}/>\n                    }\n                    <div ref={this._botRef}/>\n                </div>\n                <div className={'evaluator-input'}>\n                    <textarea\n                        autoComplete={'off'}\n                        placeholder={'Enter an expression...'}\n                        spellCheck={'false'}\n                        onKeyDown={this._onKeyDown}\n                        ref={this._textRef}\n                    />\n                </div>\n            </div>\n        );\n\n    }\n\n    private _onDown = (): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            const pos = textarea.selectionStart;\n            const len = textarea.value.length;\n\n            if (pos === len) {\n\n                const history = this.state.history < this.state.count\n                    ? this.state.history + 1\n                    : this.state.count;\n\n                this.setState({\n                    history: history\n                });\n\n            }\n        }\n\n    };\n\n    private _onEnter = (): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            const value = textarea.value;\n            textarea.value = '';\n\n            if (value.length)\n                this.props.evaluator.evaluate(value);\n\n        }\n\n    };\n\n    private _onKeyDown = (event: React.KeyboardEvent): void => {\n        const key = event.key;\n        switch (key) {\n            case 'Enter':\n                event.preventDefault();\n                this._onEnter();\n                break;\n            case 'ArrowUp':\n                this._onUp();\n                break;\n            case 'ArrowDown':\n                this._onDown();\n                break;\n            default:\n                break;\n        }\n    };\n\n    private _onPending = (): void => {\n\n        this._setActive(false);\n\n    };\n\n    private _onReady = (): void => {\n\n        this._setActive(true);\n        const expressions = this.props.evaluator.expressions();\n        this.setState({\n            count: expressions.length,\n            expressions: expressions,\n            history: expressions.length\n        });\n\n    };\n\n    private _onUp = (): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            if (textarea.selectionStart === 0) {\n\n                const history = this.state.history > 0\n                    ? this.state.history - 1\n                    : 0;\n\n                this.setState({\n                    history: history\n                });\n\n            }\n\n        }\n\n    };\n\n    private _scrollDown = (): void => {\n\n        const bottom = this._botRef.current;\n\n        if (bottom) {\n\n            bottom.scrollIntoView();\n\n        }\n\n    };\n\n    private _setActive = (active: boolean): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            textarea.readOnly = !active;\n\n        }\n\n    };\n\n    private _setText = (text: string): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            textarea.value = text;\n\n        }\n\n    };\n\n}\n\nfunction isTableable (expression: Expression): boolean {\n    const r = expression.result;\n    return !expression.error\n        && typeof r === 'string'\n        && r.length > 0\n        && r[0] === '{' && r[r.length-1] === '}';\n}\n\nexport default EvaluatorView;\n","import { Button, Collapse } from '@blueprintjs/core';\nimport React, { CSSProperties } from 'react';\n\ninterface ISectionProps {\n    collapsed?: boolean\n    onToggle?: () => void\n    style?: CSSProperties\n    title?: string\n}\n\nconst Section: React.FunctionComponent<ISectionProps> = props => {\n\n    const collapseIcon = props.collapsed ? 'expand-all' : 'collapse-all';\n\n    return (\n        <div\n            className={`section ${props.collapsed ? 'collapsed' : ''}`}\n            style={props.style}>\n            {\n                !!props.title &&\n                <div className='header'>\n                    <div className='title'>\n                        {props.title.toUpperCase()}\n                    </div>\n                    {\n                        props.onToggle && <Button\n                            icon={collapseIcon}\n                            minimal={true}\n                            onClick={props.onToggle}/>\n                    }\n                </div>\n            }\n            <Collapse\n                isOpen={!props.collapsed}\n                keepChildrenMounted={true}>\n                <div className='body'>\n                    {props.children}\n                </div>\n            </Collapse>\n        </div>\n    );\n};\n\nclass SterlingDrawer extends React.Component {\n\n    static Section = Section;\n\n    render (): React.ReactNode {\n\n        return (\n            <div className={'drawer'}>\n                { this.props.children }\n            </div>\n        );\n\n    }\n\n}\n\nexport default SterlingDrawer;\n","import { Button, ButtonGroup, Tooltip } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport { backgroundGradient, COLOR_SCHEMES } from '../../util';\nimport { setColorScheme, toggleCollapseScheme } from './edgeStylingSlice';\n\nconst mapState = (state: RootState) => ({\n    collapse: state.graphSlice.edgeStylingSlice.collapseScheme,\n    labelStyles: state.graphSlice.edgeStylingSlice.labelStyles,\n    linkStyles: state.graphSlice.edgeStylingSlice.linkStyles\n});\n\nconst mapDispatch = {\n    setColorScheme,\n    toggleCollapseScheme\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype QuickEdgeStylingProps = ConnectedProps<typeof connector>;\n\nconst QuickEdgeStyling: React.FunctionComponent<QuickEdgeStylingProps> = props => {\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapse}\n            onToggle={props.toggleCollapseScheme}\n            title={'Quick Color Scheme'}>\n            <ButtonGroup minimal={true} style={{\n                flexWrap: 'wrap',\n                maxHeight: '15px',\n                overflow: 'hidden'\n            }}>\n                {\n                    COLOR_SCHEMES.map(([name, scheme]) => (\n                        <Tooltip content={name} key={name}>\n                            <Button minimal={true} style={{\n                                background: backgroundGradient(scheme.slice(0, 6)),\n                                margin: '0 5px',\n                                minWidth: '40px',\n                                minHeight: '15px'\n                            }} onClick={() => props.setColorScheme(scheme)}/>\n                        </Tooltip>\n                    ))\n                }\n            </ButtonGroup>\n        </SterlingDrawer.Section>\n    );\n};\n\nexport default connector(QuickEdgeStyling);\n","import { LabelPlacement } from '@atdyer/graph-js';\nimport { FormGroup, HTMLSelect, NumericInput } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport {\n    setBundleFactor,\n    setLabelPlacement,\n    toggleCollapseEdgeSettings\n} from './graphSettingsSlice';\n\nconst LABEL_PLACEMENT_OPTIONS = [\n    { value: 'center', label: 'Center' },\n    { value: 'join', label: 'Join' },\n    { value: 'spread', label: 'Spread' }\n];\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.graphSettingsSlice\n});\n\nconst mapDispatch = {\n    setBundleFactor,\n    setLabelPlacement,\n    toggleCollapseEdgeSettings\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype EdgeSettingsProps = ConnectedProps<typeof connector>;\n\nconst EdgeSettings: React.FunctionComponent<EdgeSettingsProps> = props => (\n    <SterlingDrawer.Section\n        collapsed={props.collapseEdgeSettings}\n        onToggle={props.toggleCollapseEdgeSettings}\n        title={'Edge Settings'}>\n        <FormGroup inline={true} label={'Bundle Factor'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                fill={false}\n                value={props.bundleFactor}\n                min={0}\n                minorStepSize={0.001}\n                stepSize={0.01}\n                majorStepSize={0.1}\n                onValueChange={value => props.setBundleFactor(value)}/>\n        </FormGroup>\n        <FormGroup inline={true} label={'Label Placement'}>\n            <HTMLSelect\n                minimal={true}\n                options={LABEL_PLACEMENT_OPTIONS}\n                value={props.edgeLabelPlacement}\n                onChange={event => {\n                    props.setLabelPlacement(event.target.value as LabelPlacement)\n                }}/>\n        </FormGroup>\n    </SterlingDrawer.Section>\n);\n\nexport default connector(EdgeSettings);\n","import { DagreLayout } from '@atdyer/graph-js';\nimport { Button, FormGroup, HTMLSelect, NumericInput } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport {\n    Alignment, Direction, Ranker,\n    setAlign,\n    setNodeSep,\n    setRankDir,\n    setRanker,\n    setRankSep\n} from './layoutSlice';\n\nconst ALIGN_OPTIONS = [\n    { value: 'undefined', label: '---' },\n    { value: 'UL', label: 'Bottom Left'},\n    { value: 'UR', label: 'Bottom Right'},\n    { value: 'DL', label: 'Top Left' },\n    { value: 'DR', label: 'Top Right' }\n];\n\nconst DIRECTION_OPTIONS = [\n    { value: 'TB', label: 'Bottom to Top' },\n    { value: 'BT', label: 'Top to Bottom' },\n    { value: 'LR', label: 'Left to Right' },\n    { value: 'RL', label: 'Right to Left' }\n];\n\nconst RANKER_OPTIONS = [\n    { value: 'network-simplex', label: 'Network Simplex' },\n    { value: 'tight-tree', label: 'Tight Tree' },\n    { value: 'longest-path', label: 'Longest Path' }\n];\n\nconst mapState = (state: RootState) => ({\n    graph: state.graphSlice.graphSlice.graph,\n    options: state.graphSlice.layoutSlice\n});\n\nconst mapDispatch = {\n    setAlign,\n    setNodeSep,\n    setRankDir,\n    setRanker,\n    setRankSep\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype LayoutProps = ConnectedProps<typeof connector>;\n\nconst Layout: React.FunctionComponent<LayoutProps> = props => {\n\n    const options = Object.assign({}, props.options);\n\n    return (\n        <SterlingDrawer.Section\n            title={'Layout'}>\n            <FormGroup inline={true} label={'Align'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={ALIGN_OPTIONS}\n                    value={options.align === undefined ? 'undefined' : options.align}\n                    onChange={event => {\n                        const value = event.target.value === 'undefined' ? undefined : event.target.value;\n                        props.setAlign(value as Alignment)\n                    }}/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Node Separation'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    value={options.nodesep}\n                    onValueChange={value => props.setNodeSep(value)}/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Ranking Method'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={RANKER_OPTIONS}\n                    value={options.ranker}\n                    onChange={event =>\n                        props.setRanker(event.target.value as Ranker)\n                    }/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Rank Direction'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={DIRECTION_OPTIONS}\n                    value={options.rankdir}\n                    onChange={event =>\n                        props.setRankDir(event.target.value as Direction)\n                    }/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Rank Separation'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    value={options.ranksep}\n                    onValueChange={value => props.setRankSep(value)}/>\n            </FormGroup>\n            <Button\n                minimal={true}\n                text={'Apply Layout'}\n                onClick={() => {\n                    if (props.graph) {\n                        const dagre = new DagreLayout();\n                        dagre.apply(props.graph, options);\n                        props.graph.update();\n                    }\n                }}/>\n        </SterlingDrawer.Section>\n    );\n\n};\n\nexport default connector(Layout);\n","import { Button } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\n\nconst mapState = (state: RootState) => ({\n    graph: state.graphSlice.graphSlice.graph\n});\n\nconst connector = connect(mapState);\n\ntype ZoomSettingsProps = ConnectedProps<typeof connector>;\n\nconst ZoomSettings: React.FunctionComponent<ZoomSettingsProps> = props => (\n    <SterlingDrawer.Section\n        title={'Zoom Settings'}>\n        <Button\n            icon={'zoom-to-fit'}\n            text={'Zoom to Fit'}\n            onClick={() => {\n                props.graph.zoomToFit();\n            }}/>\n    </SterlingDrawer.Section>\n);\n\nexport default connector(ZoomSettings);\n","import {\n    Button,\n    ControlGroup,\n    HTMLSelect,\n    Popover,\n    Position,\n    Text\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport { POPPER_MODIFIERS } from '../../util';\nimport {\n    addProjection,\n    nextAtom,\n    previousAtom,\n    removeProjection,\n    setProjection,\n    toggleCollapseProjections\n} from '../data/dataSlice';\n\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.dataSlice\n});\n\nconst mapDispatch = {\n    addProjection,\n    nextAtom,\n    previousAtom,\n    removeProjection,\n    setProjection,\n    toggleCollapseProjections\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype ProjectionsProps = ConnectedProps<typeof connector>;\n\nconst Projections: React.FunctionComponent<ProjectionsProps> = props => {\n\n    const projections = props.projections.toArray();\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapseProjections}\n            onToggle={props.toggleCollapseProjections}\n            title={'Projections'}>\n            <div className={'projections'}>\n                {\n                    projections.map(projection => {\n                        const sig = projection[0];\n                        const atom = projection[1];\n                        const atoms = props.atoms.get(sig) || [];\n                        return <React.Fragment key={sig}>\n                            <Text ellipsize={true}>{ sig }</Text>\n                            <HTMLSelect\n                                minimal={true}\n                                onChange={event => {\n                                    props.setProjection({\n                                        sig: sig,\n                                        atom: event.target.value\n                                    })\n                                }}\n                                options={atoms}\n                                value={atom}/>\n                            <div className={'buttons'}>\n                                <Button\n                                    icon={'chevron-left'}\n                                    minimal={true}\n                                    onClick={() => props.previousAtom(sig)}/>\n                                <Button\n                                    icon={'cross'}\n                                    minimal={true}\n                                    onClick={() => props.removeProjection(sig)}/>\n                                <Button\n                                    icon={'chevron-right'}\n                                    minimal={true}\n                                    onClick={() => props.nextAtom(sig)}/>\n                            </div>\n                        </React.Fragment>\n                    })\n                }\n            </div>\n            {\n                props.unprojected.size > 0 && (\n                    <Popover\n                        className={'centered'}\n                        hasBackdrop={true}\n                        modifiers={POPPER_MODIFIERS}\n                        position={Position.BOTTOM}\n                        usePortal={true}\n                        wrapperTagName={'div'}>\n                        <Button\n                            icon={'add'}\n                            minimal={true}\n                            text={'Add Projection'}/>\n                        <ControlGroup vertical={true}>\n                            {\n                                props.unprojected.map(sig => (\n                                    <Button\n                                        key={sig}\n                                        minimal={true}\n                                        onClick={() => props.addProjection(sig)}\n                                        text={sig}/>\n                                ))\n                            }\n                        </ControlGroup>\n                    </Popover>\n                )\n            }\n        </SterlingDrawer.Section>\n    );\n\n};\n\nexport default connector(Projections);\n","import {\n    Button,\n    FormGroup,\n    NumericInput,\n    Popover,\n    Position\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {\n    background,\n    POPPER_MODIFIERS,\n    DEFAULT_COLORS,\n    foreground\n} from '../util';\n\ninterface ILabelStyle {\n    color?: string\n    size?: number\n    onChangeColor: (color: string | null) => void\n    onChangeSize: (size: string) => void\n}\n\nconst LabelStyler: React.FunctionComponent<ILabelStyle> = props => {\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Label Size (px)'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    min={0}\n                    minorStepSize={null}\n                    onValueChange={(_, strVal) => props.onChangeSize(strVal)}\n                    placeholder={'Inheret'}\n                    value={props.size}/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Label Color'}>\n                {\n                    props.color &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeColor(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(props.color),\n                            color: foreground(props.color)\n                        }}\n                        text={props.color || 'Inheret'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(props.color)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeColor(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n        </>\n    );\n\n};\n\nexport default LabelStyler;\n","import { IconName, ITreeNode, MaybeElement } from '@blueprintjs/core';\nimport { Map } from 'immutable';\n\nexport type Tree = {\n    id: string\n    icon?: IconName | MaybeElement\n    label?: string | JSX.Element\n    children: Tree[]\n}\n\nfunction mapTreeToNodes (tree: Tree | null, collapsed: Map<string, boolean>, selected: string | null): ITreeNode {\n\n    if (tree === null) return {\n        id: 'error',\n        label: 'No Instance',\n        icon: 'error'\n    };\n\n    const populate = (t: Tree): ITreeNode => {\n        const childNodes = t.children.map(populate);\n        return {\n            id: t.id,\n            label: t.label ? t.label : t.id,\n            icon: t.icon,\n            isExpanded: !collapsed.get(t.id),\n            isSelected: t.id === selected,\n            hasCaret: !!childNodes.length,\n            childNodes\n        }\n    };\n\n    return populate(tree);\n\n}\n\nexport {\n    mapTreeToNodes\n}\n","import { Button, FormGroup, NumericInput, Popover } from '@blueprintjs/core';\nimport { Position } from '@blueprintjs/core/lib/esm/common/position';\nimport React from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {\n    background,\n    DEFAULT_COLORS,\n    foreground,\n    POPPER_MODIFIERS\n} from '../../../util';\n\ninterface ILinkStyle {\n    stroke?: string\n    strokeWidth?: number\n    onChangeStroke: (color: string | null) => void\n    onChangeStrokeWidth: (width: string) => void\n}\n\nconst LinkStyler: React.FunctionComponent<ILinkStyle> = props => {\n\n    const stroke = props.stroke;\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Stroke'}>\n                {\n                    props.stroke &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeStroke(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(stroke),\n                            color: foreground(stroke)\n                        }}\n                        text={stroke || 'Inherit'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(stroke)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeStroke(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n            <FormGroup inline={true} label={'Stroke Width'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    min={0}\n                    onValueChange={(_, strVal) => props.onChangeStrokeWidth(strVal)}\n                    placeholder={'Inherit'}\n                    value={props.strokeWidth}/>\n            </FormGroup>\n        </>\n    );\n\n};\n\nexport default LinkStyler;\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    Divider, FormGroup,\n    NonIdealState, Switch,\n    Tooltip,\n    Tree\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport LabelStyler from '../../drawer-components/LabelStyler';\nimport { mapTreeToNodes } from '../../graphTypes';\nimport LinkStyler from './components/LinkStyler';\nimport {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setLabelColor,\n    setLabelSize,\n    setStroke,\n    setStrokeWidth,\n    toggleCollapseEdgeStyle,\n    toggleHideEmptyFields\n} from './edgeStylingSlice';\nimport { toggleAsAttribute } from '../data/dataSlice';\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.edgeStylingSlice,\n    asAttribute: state.graphSlice.dataSlice.asAttribute\n});\n\nconst mapDispatch = {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setLabelColor,\n    setLabelSize,\n    setStroke,\n    setStrokeWidth,\n    toggleAsAttribute,\n    toggleCollapseEdgeStyle,\n    toggleHideEmptyFields\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype EdgeStylingProps = ConnectedProps<typeof connector>;\n\nconst EdgeStyling: React.FunctionComponent<EdgeStylingProps> = props => {\n\n    const selected = props.selected;\n\n    // Link properties\n    const link = selected ? props.linkStyles.get(selected) || {} : {};\n    const attr = selected ? props.asAttribute.get(selected) : false;\n    const stroke = link ? link.stroke : undefined;\n    const strokeWidth = link ? link.strokeWidth : undefined;\n\n    // Label properties\n    const label = selected ? props.labelStyles.get(selected) || {} : {};\n    const labelColor = label ? label.color : undefined;\n    const font = label ? label.font : undefined;\n    const match = font ? font.match(/(\\d*)px/) : [];\n    const labelSize = match\n        ? match.length > 1\n            ? parseInt(match[1])\n            : undefined\n        : undefined;\n\n    // Tree properties\n    const fieldTree = mapTreeToNodes(props.treeField, props.collapsed, selected);\n    const skolemTree = mapTreeToNodes(props.treeSkolem, props.collapsed, selected);\n    const isempty = fieldTree.id === 'error' && skolemTree.id === 'error';\n    const hasskolem = skolemTree.childNodes && skolemTree.childNodes.length;\n    const trees = (isempty || !hasskolem) ? [fieldTree] : [fieldTree, skolemTree];\n    const hideFld = props.hideEmptyFields;\n    fieldTree.secondaryLabel = (\n        <Tooltip\n            content={hideFld ? 'Show Empty Fields' : 'Hide Empty Fields'}>\n            <Button\n                icon={hideFld ? 'eye-off' : 'eye-open'}\n                minimal={true}\n                onClick={props.toggleHideEmptyFields}/>\n        </Tooltip>\n    );\n\n\n    return (\n        <>\n            <SterlingDrawer.Section\n                collapsed={props.collapseEdgeStyle}\n                onToggle={props.toggleCollapseEdgeStyle}\n                title={'Edge Styling'}>\n                <Tree\n                    contents={trees}\n                    onNodeClick={node => props.selectTreeNode(node.id.toString())}\n                    onNodeCollapse={node => props.collapseTreeNode(node.id.toString())}\n                    onNodeExpand={node => props.expandTreeNode(node.id.toString())}/>\n                <Divider/>\n                {\n                    selected\n                        ? (\n                            <>\n                                <FormGroup>\n                                    <Switch\n                                        alignIndicator={Alignment.RIGHT}\n                                        checked={attr}\n                                        label={'Show as Attribute'}\n                                        onChange={() => props.toggleAsAttribute(selected)}/>\n                                </FormGroup>\n                                <LinkStyler\n                                    stroke={stroke}\n                                    strokeWidth={strokeWidth}\n                                    onChangeStroke={props.setStroke}\n                                    onChangeStrokeWidth={props.setStrokeWidth}/>\n                                <LabelStyler\n                                    color={labelColor}\n                                    size={labelSize}\n                                    onChangeColor={props.setLabelColor}\n                                    onChangeSize={props.setLabelSize}/>\n                                <ButtonGroup\n                                    fill={true}\n                                    minimal={true}>\n                                    <Button\n                                        icon={'clean'}\n                                        onClick={props.clearCurrent}\n                                        text={'Clear Selected'}/>\n                                    <Button\n                                        icon={'clean'}\n                                        onClick={props.clearAll}\n                                        text={'Clear All'}/>\n                                </ButtonGroup>\n                            </>\n                        )\n                        : (\n                            <NonIdealState\n                                title={'Edge Styling'}\n                                description={'Select a field or skolem from the tree'}\n                                icon={'style'}/>\n\n                        )\n                }\n            </SterlingDrawer.Section>\n        </>\n    )\n};\n\nexport default connector(EdgeStyling);\n","import { Alignment, Switch } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport {\n    toggleAxesVisible,\n    toggleCollapseGraphSettings,\n    toggleGridVisible\n} from './graphSettingsSlice';\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.graphSettingsSlice\n});\n\nconst mapDispatch = {\n    toggleAxesVisible,\n    toggleCollapseGraphSettings,\n    toggleGridVisible\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype GraphSettingsProps = ConnectedProps<typeof connector>;\n\nconst GraphSettings: React.FunctionComponent<GraphSettingsProps> = props => (\n    <SterlingDrawer.Section\n        collapsed={props.collapseGraphSettings}\n        onToggle={props.toggleCollapseGraphSettings}\n        title={'Graph Settings'}>\n        <Switch\n            alignIndicator={Alignment.RIGHT}\n            checked={props.axesVisible}\n            label={'Display Axes'}\n            onChange={props.toggleAxesVisible}/>\n        <Switch\n            alignIndicator={Alignment.RIGHT}\n            checked={props.gridVisible}\n            label={'Display Grid'}\n            onChange={props.toggleGridVisible}/>\n    </SterlingDrawer.Section>\n);\n\nexport default connector(GraphSettings);\n","import {\n    CircleLayout,\n    DagreLayout,\n    GridLayout,\n    RowLayout\n} from '@atdyer/graph-js';\nimport { Button, ButtonGroup, Tooltip } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\n\n// Map redux state to layout settings props\nconst mapState = (state: RootState) => ({\n    graph: state.graphSlice.graphSlice.graph,\n    instance: state.sterlingSlice.instance\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype LayoutProps = ConnectedProps<typeof connector>;\n\n// The layout and projections component\nconst QuickLayout: React.FunctionComponent<LayoutProps> = props => {\n    return (\n        <SterlingDrawer.Section title={'Quick Layout'}>\n            <ButtonGroup minimal={true}>\n                <Tooltip content={'Circle Layout'}>\n                    <Button icon={'layout-circle'} onClick={() => {\n                        if (props.graph) {\n                            const circle = new CircleLayout();\n                            circle.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n                <Tooltip content={'Grid Layout'}>\n                    <Button icon={'layout-grid'} onClick={() => {\n                        if (props.graph) {\n                            const grid = new GridLayout();\n                            grid.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n                <Tooltip content={'Grouped Row Layout'}>\n                    <Button icon={'layout-linear'} onClick={() => {\n                        if (props.graph && props.instance) {\n                            const row = new RowLayout();\n                            const univ = props.instance.signatures().find(sig => sig.id() === 'univ');\n                            if (univ) {\n                                row.groups(univ.subTypes().map(sig => sig.atoms(true).map(atom => atom.name())))\n                            }\n                            row.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n                <Tooltip content={'Layered Layout'}>\n                    <Button icon={'layout-hierarchy'} onClick={() => {\n                        if (props.graph) {\n                            const dagre = new DagreLayout();\n                            dagre.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n            </ButtonGroup>\n        </SterlingDrawer.Section>\n    );\n};\n\nexport default connector(QuickLayout);\n","import { CircleStyle, RectangleStyle, ShapeStyle } from '@atdyer/graph-js';\nimport { FormGroup, HTMLSelect, NumericInput } from '@blueprintjs/core';\nimport React from 'react';\n\ninterface IShapeSelector {\n    shape: ShapeStyle\n    onSetHeight: (height: string) => void\n    onSetRadius: (radius: string) => void\n    onSetShape: (shape: 'circle' | 'rectangle' | null) => void\n    onSetWidth: (width: string) => void\n}\n\nconst ShapeSelector: React.FunctionComponent<IShapeSelector> = props => {\n\n    const shape = props.shape;\n    const type = shape ? shape.type || 'inherit' : 'inherit';\n\n    const options = [\n        { value: 'inherit', label: 'Inherit' },\n        { value: 'circle', label: 'Circle' },\n        { value: 'rectangle', label: 'Rectangle' }\n    ];\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Shape'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={options}\n                    value={type}\n                    onChange={event => {\n                        let value = event.target.value;\n                        props.onSetShape(valueToShape(value));\n                    }}\n                />\n            </FormGroup>\n            {\n                type === 'circle' ?\n                    <CircleProps\n                        style={shape as CircleStyle}\n                        onSetRadius={props.onSetRadius}/> :\n                type === 'rectangle' ?\n                    <RectangleProps\n                        style={shape as RectangleStyle}\n                        onSetWidth={props.onSetWidth}\n                        onSetHeight={props.onSetHeight}/> :\n                null\n            }\n        </>\n    )\n};\n\ninterface ICircleProps {\n    style: CircleStyle\n    onSetRadius: (radius: string) => void\n}\nconst CircleProps: React.FunctionComponent<ICircleProps> = props => {\n    const radius = props.style.radius;\n    return (\n        <FormGroup inline={true} label={'Radius'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                fill={false}\n                min={0}\n                onValueChange={(_, strVal) => props.onSetRadius(strVal)}\n                placeholder={'Inherit'}\n                value={radius || undefined}/>\n        </FormGroup>\n    )\n};\n\ninterface IRectangleProps {\n    style: RectangleStyle,\n    onSetHeight: (height: string) => void\n    onSetWidth: (width: string) => void\n}\nconst RectangleProps: React.FunctionComponent<IRectangleProps> = props => {\n    const width = props.style.width;\n    const height = props.style.height;\n    return <>\n        <FormGroup inline={true} label={'Width'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                fill={false}\n                min={0}\n                onValueChange={(_, strVal) => props.onSetWidth(strVal)}\n                placeholder={'Inherit'}\n                value={width || undefined}\n                />\n        </FormGroup>\n        <FormGroup inline={true} label={'Height'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                min={0}\n                onValueChange={(_, strVal) => props.onSetHeight(strVal)}\n                placeholder={'Inherit'}\n                value={height || undefined}\n            />\n        </FormGroup>\n    </>;\n};\n\nfunction valueToShape (value: string): (null | 'circle' | 'rectangle') {\n    if (value === 'circle' || value === 'rectangle') return value;\n    return null;\n}\n\nexport default ShapeSelector;\n","import {\n    Button,\n    FormGroup,\n    NumericInput,\n    Popover,\n    Position\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {\n    background,\n    foreground,\n    POPPER_MODIFIERS,\n    DEFAULT_COLORS\n} from '../../../util';\n\ninterface IShapeStyle {\n    fill?: string\n    stroke?: string\n    strokeWidth?: number\n    onChangeFill: (color: string|null) => void\n    onChangeStroke: (color: string|null) => void\n    onChangeStrokeWidth: (width: string) => void\n}\n\nconst ShapeStyler: React.FunctionComponent<IShapeStyle> = props => {\n\n    const fill = props.fill;\n    const stroke = props.stroke;\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Fill'}>\n                {\n                    fill &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeFill(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(fill),\n                            color: foreground(fill)\n                        }}\n                        text={fill || 'Inherit'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(fill)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeFill(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n            <FormGroup inline={true} label={'Stroke'}>\n                {\n                    stroke &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeStroke(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(stroke),\n                            color: foreground(stroke)\n                        }}\n                        text={stroke || 'Inherit'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(stroke)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeStroke(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n            <FormGroup inline={true} label={'Stroke Width'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    min={-1}\n                    onValueChange={(_, strVal) => props.onChangeStrokeWidth(strVal)}\n                    placeholder={'Inherit'}\n                    value={props.strokeWidth}/>\n            </FormGroup>\n        </>\n    );\n};\n\nexport default ShapeStyler;\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    Divider, FormGroup,\n    NonIdealState, Switch,\n    Tooltip,\n    Tree\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport LabelStyler from '../../drawer-components/LabelStyler';\nimport { mapTreeToNodes } from '../../graphTypes';\nimport ShapeSelector from './components/ShapeSelector';\nimport ShapeStyler from './components/ShapeStyler';\nimport {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setFill,\n    setHeight,\n    setLabelColor,\n    setLabelSize,\n    setRadius,\n    setShape,\n    setStroke,\n    setStrokeWidth,\n    setWidth,\n    toggleCollapseNodeStyle,\n    toggleHideDisconnected,\n    toggleHideEmptySets\n} from './nodeStylingSlice';\n\n// Map redux state to node styling props\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.nodeStylingSlice\n});\n\n// Actions\nconst mapDispatch = {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setFill,\n    setHeight,\n    setLabelColor,\n    setLabelSize,\n    setRadius,\n    setShape,\n    setStroke,\n    setStrokeWidth,\n    setWidth,\n    toggleCollapseNodeStyle,\n    toggleHideDisconnected,\n    toggleHideEmptySets\n};\n\n// Create connector\nconst connector = connect(mapState, mapDispatch);\n\n// Create props for things from redux\ntype NodeStylingProps = ConnectedProps<typeof connector>;\n\nconst NodeStyling: React.FunctionComponent<NodeStylingProps> = props => {\n\n    const selected = props.selected;\n\n    // Hide disconnected\n    const hideDisconnected = props.selected\n        ? props.hideDisconnected.get(props.selected)\n        : false;\n\n    // Shape properties\n    const shape = selected ? props.shapes.get(selected) || {} : {};\n    const fill = shape ? shape.fill : undefined;\n    const stroke = shape ? shape.stroke : undefined;\n    const strokeWidth = shape ? shape.strokeWidth : undefined;\n\n    // Label properties\n    const label = selected ? props.labels.get(selected) || {} : {};\n    const labelColor = label ? label.color : undefined;\n    const font = label ? label.font : undefined;\n    const match = font ? font.match(/(\\d*)px/) : [];\n    const labelSize = match\n        ? match.length > 1\n            ? parseInt(match[1])\n            : undefined\n        : undefined;\n\n    // Tree properties\n    const tree = mapTreeToNodes(props.nodeTree, props.collapsed, selected);\n    const hide = props.hideEmptySets;\n    tree.secondaryLabel = (\n        <Tooltip\n            content={hide ? 'Show Empty Sets' : 'Hide Empty Sets'}>\n            <Button\n                icon={hide ? 'eye-off' : 'eye-open'}\n                minimal={true}\n                onClick={props.toggleHideEmptySets}/>\n        </Tooltip>\n    );\n\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapseNodeStyle}\n            onToggle={props.toggleCollapseNodeStyle}\n            title={'Node Styling'}>\n            <Tree\n                contents={[tree]}\n                onNodeClick={node => props.selectTreeNode(node.id.toString())}\n                onNodeCollapse={node => props.collapseTreeNode(node.id.toString())}\n                onNodeExpand={node => props.expandTreeNode(node.id.toString())}\n            />\n            <Divider/>\n            {\n                selected\n                    ? (\n                        <>\n                            <FormGroup\n                                contentClassName={'fill'}\n                                inline={true}>\n                                <Switch\n                                    alignIndicator={Alignment.RIGHT}\n                                    checked={hideDisconnected}\n                                    onChange={props.toggleHideDisconnected}\n                                    label={'Hide Disconnected Nodes'}/>\n                            </FormGroup>\n                            <ShapeSelector\n                                shape={shape}\n                                onSetHeight={props.setHeight}\n                                onSetRadius={props.setRadius}\n                                onSetShape={props.setShape}\n                                onSetWidth={props.setWidth}\n                            />\n                            <ShapeStyler\n                                fill={fill}\n                                stroke={stroke}\n                                strokeWidth={strokeWidth}\n                                onChangeFill={props.setFill}\n                                onChangeStroke={props.setStroke}\n                                onChangeStrokeWidth={props.setStrokeWidth}\n                            />\n                            <LabelStyler\n                                color={labelColor}\n                                size={labelSize}\n                                onChangeColor={props.setLabelColor}\n                                onChangeSize={props.setLabelSize}/>\n                            <ButtonGroup\n                                fill={true}\n                                minimal={true}>\n                                <Button\n                                    icon={'clean'}\n                                    onClick={props.clearCurrent}\n                                    text={'Clear Selected'}/>\n                                <Button\n                                    icon={'clean'}\n                                    onClick={props.clearAll}\n                                    text={'Clear All'}/>\n                            </ButtonGroup>\n                        </>\n                    )\n                    : (\n                        <NonIdealState\n                            title={'Node Styling'}\n                            description={'Select a type or set from the tree'}\n                            icon={'style'}/>\n                    )\n            }\n\n        </SterlingDrawer.Section>\n    );\n};\n\nexport default connector(NodeStyling);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport QuickEdgeStyling from './drawer-views/edge-styling/QuickEdgeStyling';\nimport EdgeSettings from './drawer-views/graph-settings/EdgeSettings';\nimport Layout from './drawer-views/layout/Layout';\nimport ZoomSettings from './drawer-views/layout/ZoomSettings';\nimport Projections from './drawer-views/projections/Projections';\nimport EdgeStyling from './drawer-views/edge-styling/EdgeStyling';\nimport GraphSettings from './drawer-views/graph-settings/GraphSettings';\nimport QuickLayout from './drawer-views/layout/QuickLayout';\nimport NodeStyling from './drawer-views/node-styling/NodeStyling';\n\n// Map redux state to graph settings props\nconst mapState = (state: RootState) => ({\n    view: state.sterlingSlice.graphView\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype GraphStageProps = ConnectedProps<typeof connector>;\n\n// The graph settings component\nconst GraphDrawer: React.FunctionComponent<GraphStageProps> = props => {\n\n    if (props.view === 'node') return (\n        <>\n            <Projections/>\n            <NodeStyling/>\n        </>\n    );\n    if (props.view === 'edge') return (\n        <>\n            <QuickEdgeStyling/>\n            <EdgeStyling/>\n        </>\n    );\n    if (props.view === 'layout') return (\n        <>\n            <QuickLayout/>\n            <Layout/>\n            <ZoomSettings/>\n        </>\n    );\n    if (props.view === 'settings') return (\n        <>\n            <GraphSettings/>\n            <EdgeSettings/>\n        </>\n    );\n\n    return null;\n};\n\nexport default connector(GraphDrawer);\n","import {\n    cloneLabelStyle,\n    cloneShapeStyle, DagreLayout,\n    EdgeStyle, Graph, Node,\n    NodeStyle\n} from '@atdyer/graph-js';\nimport { NonIdealState } from '@blueprintjs/core';\nimport {\n    AlloyField,\n    AlloyInstance,\n    AlloySignature,\n    AlloySkolem\n} from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport { generateGraph } from './graphData';\n\nconst DEFAULT_EDGE_STYLES: EdgeStyle[] = [];\n\nconst DEFAULT_NODE_STYLES: NodeStyle[] = [{\n    nodes: [],\n    shape: { type: 'circle' }\n}];\n\n// Map redux state to graph settings props\nconst mapState = (state: RootState) => ({\n    asAttribute: state.graphSlice.dataSlice.asAttribute,\n    bundleFactor: state.graphSlice.graphSettingsSlice.bundleFactor,\n    description: state.sterlingSlice.welcomeDescription,\n    edgeLabelPlacement: state.graphSlice.graphSettingsSlice.edgeLabelPlacement,\n    edgeLabels: state.graphSlice.edgeStylingSlice.labelStyles,\n    graph: state.graphSlice.graphSlice.graph,\n    hideDisconnected: state.graphSlice.nodeStylingSlice.hideDisconnected,\n    instance: state.sterlingSlice.instance,\n    links: state.graphSlice.edgeStylingSlice.linkStyles,\n    nodeLabels: state.graphSlice.nodeStylingSlice.labels,\n    projections: state.graphSlice.dataSlice.projections,\n    shapes: state.graphSlice.nodeStylingSlice.shapes,\n    settings: state.graphSlice.graphSettingsSlice,\n    title: state.sterlingSlice.welcomeTitle\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype GraphStageProps = ConnectedProps<typeof connector>;\n\n// Create a node cache\nconst NODE_CACHE = new Map<string, Node>();\n\n// The graph stage component\nclass GraphStage extends React.Component<GraphStageProps> {\n\n    private _ref: React.RefObject<HTMLCanvasElement>;\n\n    constructor (props: GraphStageProps) {\n\n        super(props);\n\n        this._ref = React.createRef<HTMLCanvasElement>();\n\n    }\n\n    componentDidMount (): void {\n\n        const canvas = this._ref.current;\n        const props = this.props;\n        const graph = props.graph;\n        const instance = props.instance;\n\n        if (instance) this._update(graph, instance);\n        if (canvas) this.props.graph.canvas(canvas);\n\n        graph.update();\n\n    }\n\n    componentDidUpdate (prevProps: GraphStageProps): void {\n\n        const props = this.props;\n        const graph = props.graph;\n        const instance = props.instance;\n        const common = prevProps.instance && instance ? anyInCommon(prevProps.instance, instance) : false;\n\n        if (instance) this._update(graph, instance);\n\n        // Always update the layout for the Forge folks\n        // const didProjectionsUpdate = prevProps.projections !== props.projections;\n        //\n        // if (!prevProps.instance || props.instance !== prevProps.instance || didProjectionsUpdate) {\n        //     const dagre = new DagreLayout();\n        //     dagre.apply(graph, {\n        //         nodesep: 100,\n        //         rankdir: 'BT',\n        //         ranksep: 150\n        //     });\n        // }\n\n        if (!common) {\n            NODE_CACHE.clear();\n        }\n\n        if (!prevProps.instance || (instance && !common)) {\n            const dagre = new DagreLayout();\n            dagre.apply(graph, {\n                nodesep: 100,\n                rankdir: 'BT',\n                ranksep: 150\n            });\n        }\n\n        graph.update();\n\n    }\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        return this.props.instance\n            ? <canvas className={'graph'} ref={this._ref}/>\n            : <NonIdealState\n                title={props.title}\n                description={props.description}\n                icon={'graph'}/>;\n\n    }\n\n    private _buildEdgeStyles (): EdgeStyle[] {\n\n        const instance = this.props.instance;\n        const links = this.props.links;\n        const labels = this.props.edgeLabels;\n\n        if (!instance) return DEFAULT_EDGE_STYLES;\n\n        const fields = instance.fields();\n        const skolems = instance.skolems().filter(s => s.arity() > 1);\n\n        const toStyle = (item: AlloyField | AlloySkolem): EdgeStyle => {\n            const id = item.id();\n            return {\n                groups: [id],\n                link: links.get(id),\n                label: labels.get(id)\n            }\n        };\n\n        const fieldStyle: EdgeStyle = {\n            groups: [],\n            link: links.get('Fields'),\n            label: labels.get('Fields'),\n            children: fields.map(toStyle)\n        };\n\n        const skolemStyle: EdgeStyle = {\n            groups: [],\n            link: links.get('Skolems'),\n            label: labels.get('Skolems'),\n            children: skolems.map(toStyle)\n        };\n\n        return [fieldStyle, skolemStyle];\n\n    }\n\n    private _buildNodeStyles (): NodeStyle[] {\n\n        const instance = this.props.instance;\n        const shapes = this.props.shapes;\n        const labels = this.props.nodeLabels;\n\n        if (!instance) return DEFAULT_NODE_STYLES;\n\n        const univ = instance.signatures().find(sig => sig.id() === 'univ');\n\n        if (!univ) return DEFAULT_NODE_STYLES;\n\n        const populate = (sig: AlloySignature): NodeStyle => {\n\n            const children = sig.subTypes().map(populate);\n            const shape = shapes.get(sig.id());\n            const label = labels.get(sig.id());\n\n            return {\n                nodes: sig.atoms().map(atom => atom.name()),\n                shape: shape ? cloneShapeStyle(shape) : undefined,\n                label: label ? cloneLabelStyle(label) : undefined,\n                children\n            }\n\n        };\n\n        const styletree = populate(univ);\n        if (!styletree.shape) styletree.shape = {};\n        if (!styletree.shape.type) styletree.shape.type = 'rectangle';\n\n        return [styletree];\n\n    }\n\n    private _update (graph: Graph, instance: AlloyInstance): void {\n\n        const props = this.props;\n        const settings = props.settings;\n\n        if (instance) {\n\n            const [nodes, edges] = generateGraph(\n                instance,\n                graph.nodes(),\n                NODE_CACHE,\n                props.projections,\n                props.asAttribute,\n                props.hideDisconnected\n            );\n\n            // Cache the nodes\n            nodes.forEach(node => NODE_CACHE.set(node.id, node));\n\n            // Set the nodes and edges\n            graph.nodes(nodes);\n            graph.edges(edges);\n            graph.bundleFactor(props.bundleFactor);\n            graph.edgeLabelPlacement(props.edgeLabelPlacement);\n\n            // Create the styles\n            graph.nodeStyles(this._buildNodeStyles());\n            graph.edgeStyles(this._buildEdgeStyles());\n\n        } else {\n\n            graph.nodes([]);\n            graph.edges([]);\n\n        }\n\n        graph.axesVisible(settings.axesVisible);\n        graph.gridVisible(settings.gridVisible);\n\n        const canvas = this._ref.current;\n        if (canvas) this.props.graph.canvas(canvas);\n\n    }\n\n}\n\nfunction anyInCommon (a: AlloyInstance, b: AlloyInstance): boolean {\n    const atoms = new Set();\n    a.atoms().forEach(atom => {\n        if (!atom.type().isBuiltin()) atoms.add(atom.id());\n    });\n    const batoms = b.atoms();\n    for (let i=0; i<batoms.length; ++i) {\n        const atom = batoms[i];\n        if (!atom.type().isBuiltin() && atoms.has(atom.id())) return true;\n    }\n    return false;\n}\n\nexport default connector(GraphStage);\n","import { Edge, Node } from '@atdyer/graph-js';\nimport {\n    AlloyAtom,\n    AlloyField,\n    AlloyInstance,\n    AlloySignature,\n    AlloySkolem,\n    AlloyTuple\n} from 'alloy-ts';\nimport { Map as IMap, Set } from 'immutable';\nimport { isDefined } from 'ts-is-present';\n\nfunction generateGraph (\n    instance: AlloyInstance,\n    existingNodes: Node[],\n    nodeCache: Map<string, Node>,\n    projections: IMap<string, string>,\n    attributes: IMap<string, boolean>,\n    hideDisconnected: IMap<string, boolean>\n): [Node[], Edge[]] {\n\n    /**\n     * Need instance, existing nodes, projections, fields that are rendered as attributes, and\n     * whether or not to render disconnected nodes for each signature.\n     * With these five things we can build the set of nodes (updating any existing ones):\n     * {\n     *     id: atom name\n     *     x: 0\n     *     y: 0\n     *     labels: [\n     *         ...skolems,\n     *         ...fields as attributes\n     *     ]\n     * }\n     *\n     * and the set of edges:\n     * {\n     *     source: source node (after projections)\n     *     target: target node (after projections)\n     *     group: field or skolem name\n     *     label: field or skolem name [any atom names that fall betweet source and target]\n     * }\n     */\n\n    // Create a map of Signature objects to their projected Atom objects and a\n    // set of all projected atoms\n    const _projections: IMap<AlloySignature, AlloyAtom|undefined> = IMap(instance.signatures().map(sig => {\n        const id = sig.id();\n        return projections.has(id)\n            ? [sig, getAtom(projections.get(id)!)]\n            : [sig, undefined];\n    }));\n\n    // Project every tuple of every field, remove empty tuples and empty fields\n    const fields = IMap<AlloyField, AlloyTuple[]>(instance.fields().map(field => {\n        return [\n            field,\n            field.tuples().map(project).filter(isDefined).filter(hasAtoms)\n        ];\n    })).filter(tuples => tuples.length > 0);\n\n    // Project every tuple of every skolem, remove empty tuples and empty skolems\n    const skolems = IMap<AlloySkolem, AlloyTuple[]>(instance.skolems().map(skolem => {\n        return [\n            skolem,\n            skolem.tuples().map(project).filter(isDefined).filter(hasAtoms)\n        ];\n    })).filter(tuples => tuples.length > 0);\n\n    // Check for anything wonky happening during projection. Within a single\n    // field or skolem, the arity of every tuple should be identical and positive\n    // const fieldsOK = fields.every(tuplesSameArity);\n    // const skolemsOK = skolems.every(tuplesSameArity);\n    // if (!fieldsOK || !skolemsOK) {\n    //     console.error('OH GOD NO!!!!');\n    // } else {\n    //     console.log('HOORAY!');\n    // }\n\n    // Separate fields into those that will be edges and those that will be labels.\n    // Fields that will be labels must have an arity greater than 1 (otherwise the label would be empty)\n    const edgeFields = fields.filter((tuples, field) => !isAttribute(field) && tuples[0].arity() > 1);\n    const labelFields = fields.filter((tuples, field) => isAttribute(field) || tuples[0].arity() === 1);\n\n    // Separate skolems into those that will be edges and those that will be labels\n    const edgeSkolems = skolems.filter(tuples => tuples[0].arity() > 1);\n    const labelSkolems = skolems.filter(tuples => tuples[0].arity() === 1);\n\n    // Create an empty list for edges\n    const edges: Edge[] = [];\n\n    // Create all edges, building a set of connected atoms\n    const connected = Set<AlloyAtom>().withMutations(connected => {\n        edgeFields.forEach((tuples, field) => {\n            tuples.forEach(tuple => buildEdge(field, tuple));\n        });\n        edgeSkolems.forEach((tuples, skolem) => {\n            tuples.forEach(tuple => buildEdge(skolem, tuple));\n        });\n        function buildEdge (item: AlloyField | AlloySkolem, tuple: AlloyTuple) {\n            const atoms = tuple.atoms();\n            const source = atoms[0];\n            const target = atoms[atoms.length - 1];\n            const middle = atoms.slice(1, atoms.length - 1);\n            const label = item.name() + (middle.length ? ` [${middle.join(', ')}]` : '');\n            connected.add(source);\n            connected.add(target);\n            edges.push({\n                source: source.name(),\n                target: target.name(),\n                group: item.id(),\n                label: label\n            });\n        }\n    });\n\n    // Create the labels for each atom\n    const labelMap = IMap<AlloyAtom, string[]>()\n        .withMutations(map => {\n\n            labelFields.forEach(addLabel);\n            labelSkolems.forEach(addLabel);\n\n            function addLabel (tuples: AlloyTuple[], item: AlloyField|AlloySkolem) {\n\n                // Create a map of atoms to labels for this particular field/skolem\n                const labels = IMap<AlloyAtom, string[]>()\n                    .withMutations(labels => {\n                        tuples.forEach(tuple => {\n                            const atoms = tuple.atoms();\n                            const target = atoms[0];\n                            const label = atoms.slice(1).map(atom => atom.name()).join('->');\n                            if (!labels.has(target)) labels.set(target, []);\n                            if (label.length) labels.get(target)!.push(label);\n                        });\n                    });\n\n                // Combine all labels for this particular field/skolem and add\n                // them to the appropriate atom\n                labels.forEach((labels, atom) => {\n                    const paren = item.expressionType() === 'field' && !isAttribute(item);\n                    const joined = labels.length ? `: ${labels.join(', ')}` : '';\n                    const label = `${item.name()}${joined}`;\n                    if (!map.has(atom)) map.set(atom, []);\n                    map.get(atom)!.push(paren ? `(${label})` : label);\n                });\n\n            }\n\n        });\n\n    // Debug print\n    // labelMap.forEach((labels, atom) => console.log(atom.name(), labels));\n\n    // Create nodes\n    const nodes: Node[] = instance.atoms().map(atom => {\n\n        // First determine if the atom should be visible. It's visible if it's\n        // connected or if its type is not explicitly hidden.\n        const type = atom.type();\n        const visible = connected.has(atom) || !hideDisconnected.get(type.id());\n\n        if (visible) {\n\n            // If it's visible, look for an existing node, otherwise create a new one\n            const node = existingNodes.find(node => node.id === atom.name())\n                || nodeCache.get(atom.name())\n                || {\n                    id: atom.name(),\n                    x: 0,\n                    y: 0\n                };\n\n            // Get any labels associated with this atom\n            node.labels = labelMap.get(atom);\n\n            return node;\n\n        }\n\n        return undefined;\n\n    }).filter(isDefined);\n\n    return [nodes, edges];\n\n    /**\n     * Find an atom in the instance provided to the generateGraph function\n     * @param atom\n     */\n    function getAtom (atom: string): AlloyAtom | undefined {\n        return instance.atoms().find(a => a.name() === atom);\n    }\n\n    /**\n     * Returns true if a tuple has atoms\n     * @param tuple\n     */\n    function hasAtoms (tuple: AlloyTuple): boolean {\n        return tuple.arity() > 0;\n    }\n\n    /**\n     * Returns true if the item is to be displayed as an attribute\n     * @param item\n     */\n    function isAttribute (item: AlloyField | AlloySkolem): boolean {\n        return !!attributes.get(item.id());\n    }\n\n    /**\n     * Project a tuple using the projections provided to the generateGraph function.\n     * A tuple that has no types with projections will remain unchanged. A tuple\n     * that has projected types but any atoms of those types are not the projected\n     * atom will be removed completely (ie. return undefined). A tuple that has\n     * projected types will have a projection if all of the atoms are of their\n     * respective projected types.\n     * @param tuple\n     */\n    function project (tuple: AlloyTuple): AlloyTuple | undefined {\n\n        const projectedAtoms = tuple\n            .types()\n            .map(projectable)\n            .map(sig => _projections.get(sig));\n\n        if (projectedAtoms.some(isDefined)) {\n\n            const atoms = tuple.atoms();\n            const keep = atoms.every((atom, index) => projectedAtoms[index] === undefined || projectedAtoms[index] === atom);\n\n            if (keep) {\n\n                return new AlloyTuple(tuple.id(), atoms.filter((atom, index) => {\n                    return projectedAtoms[index] === undefined;\n                }));\n\n            }\n\n        } else {\n\n            return tuple;\n\n        }\n\n    }\n\n    /**\n     * Only top level signatures (those that are direct descendants of univ)\n     * can be projected. This function return the top level type of any signature\n     * in the instance.\n     * @param signature\n     */\n    function projectable (signature: AlloySignature): AlloySignature {\n        return signature.typeHierarchy()[1];\n    }\n\n    /**\n     * Returns true if there are tuples in the list and they are all the same arity\n     * @param tuples\n     */\n    // function tuplesSameArity (tuples: AlloyTuple[]): boolean {\n    //     if (!tuples.length) return false;\n    //     const arity = tuples[0].arity();\n    //     return tuples.every(tuple => tuple.arity() === arity);\n    // }\n\n}\n\nexport {\n    generateGraph\n}\n","import {\n    Button,\n    Classes, Navbar,\n    NavbarDivider,\n    NavbarHeading\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../rootReducer';\nimport { setMainView } from '../../../sterling/sterlingSlice';\n\nconst mapState = (state: RootState) => ({\n    view: state.sterlingSlice.mainView\n});\n\nconst mapDispatch = {\n    setMainView\n};\n\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\ntype ViewNavigationProps = ConnectedProps<typeof connector>;\n\nconst ViewGroup: React.FunctionComponent<ViewNavigationProps> = props => {\n\n    return (\n        <Navbar.Group>\n            <NavbarHeading className={'nav-heading'}>\n                Sterling\n            </NavbarHeading>\n            <NavbarDivider/>\n            <Button\n                active={props.view === 'graph'}\n                className={Classes.MINIMAL}\n                icon={'graph'}\n                large={true}\n                text={'Graph'}\n                onClick={() => props.setMainView('graph')}\n            />\n            <Button\n                active={props.view === 'table'}\n                className={Classes.MINIMAL}\n                icon={'th'}\n                large={true}\n                text={'Table'}\n                onClick={() => props.setMainView('table')}\n            />\n            <Button\n                active={props.view === 'source'}\n                className={Classes.MINIMAL}\n                icon={'document'}\n                large={true}\n                text={'Source'}\n                onClick={() => props.setMainView('source')}\n            />\n            <NavbarDivider/>\n        </Navbar.Group>\n    );\n\n};\n\nexport default connector(ViewGroup);\n","import {\n    Button,\n    Menu,\n    MenuDivider,\n    MenuItem,\n    Navbar,\n    NavbarDivider,\n    Popover,\n    Tag\n} from '@blueprintjs/core';\nimport { AlloyInstance } from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport { setInstance } from '../../sterling/sterlingSlice';\nimport ViewGroup from './components/ViewGroup';\n\nconst mapState = (state: RootState) => ({\n    instance: state.sterlingSlice.instance\n});\n\nconst mapDispatch = {\n    setInstance\n};\n\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\ntype StaticNavbarProps = ConnectedProps<typeof connector>;\n\nconst StaticNavbar: React.FunctionComponent<StaticNavbarProps> = props => {\n\n    const command = props.instance ? props.instance.command() : '';\n    const fileref = React.createRef<HTMLInputElement>();\n\n    const setInstance = (text: string | ArrayBuffer | null) => {\n        if (typeof text === 'string' && text.length) {\n            try {\n                const instance = new AlloyInstance(text);\n                props.setInstance(instance);\n            } catch (e) {\n                props.setInstance(null);\n            }\n        } else {\n            props.setInstance(null);\n        }\n    };\n\n    const onFileChange = () => {\n        if (fileref.current) {\n            const files = fileref.current.files;\n            if (files && files.length) {\n                const file = files[0];\n                const reader = new FileReader();\n                reader.addEventListener('load', event => {\n                    setInstance(event.target ? event.target.result : null);\n                });\n                reader.readAsText(file);\n            }\n        }\n    };\n\n    const fetchExample = (path: string) => {\n        fetch(path)\n            .then(response => response.text())\n            .then(setInstance)\n            .catch(() => setInstance(null));\n    };\n\n    return (\n        <Navbar fixedToTop className={'nav bp3-dark'}>\n            <ViewGroup/>\n            <Navbar.Group className={'collapsing'}>\n                {\n                    command.length > 0 &&\n                    <Tag minimal={true}>\n                        { command }\n                    </Tag>\n                }\n                <NavbarDivider/>\n                <input\n                    type={'file'}\n                    style={{ display: 'none' }}\n                    onChange={onFileChange}\n                    ref={fileref}/>\n                <Popover>\n                    <Button\n                        rightIcon={'caret-down'}\n                        intent={'success'}\n                        large={true}\n                        text={'Open'}/>\n                    <Menu>\n                        <MenuItem\n                            text={'Open XML...'}\n                            onClick={() => {\n                                if (fileref.current) {\n                                    fileref.current.click();\n                                }\n                            }}/>\n                        <MenuDivider title={'Examples'}/>\n                        <MenuItem\n                            text={'Finite Element Mesh'}\n                            onClick={() => fetchExample('examples/mesh.xml')}/>\n                        <MenuItem\n                            text={'Geneaology'}\n                            onClick={() => fetchExample('examples/genealogy.xml')}/>\n                        <MenuItem\n                            text={'Mathematical Matrix'}\n                            onClick={() => fetchExample('examples/matrix.xml')}/>\n                        <MenuItem\n                            text={'River Crossing Puzzle'}\n                            onClick={() => fetchExample('examples/river-crossing.xml')}/>\n                        <MenuItem\n                            text={'Wetting and Drying'}\n                            onClick={() => fetchExample('examples/wetdry.xml')}/>\n                    </Menu>\n                </Popover>\n            </Navbar.Group>\n        </Navbar>\n    )\n};\n\nexport default connector(StaticNavbar);\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    NonIdealState\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport SterlingDrawer from '../../sterling/SterlingDrawer';\nimport { setSelected } from './sourceSlice';\n\nconst mapState = (state: RootState) => ({\n    instance: state.sterlingSlice.instance,\n    selected: state.sourceSlice.selected\n});\n\nconst mapDispatch = {\n    setSelected\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype SourceDrawerProps = ConnectedProps<typeof connector>;\n\nconst SourcePlaceholder: React.FunctionComponent<SourceDrawerProps> = props => (\n    <NonIdealState\n        title={'No Files'}\n        icon={'document'}/>\n);\n\nconst SourceDrawer: React.FunctionComponent<SourceDrawerProps> = props => {\n\n    const instance = props.instance;\n\n    return <SterlingDrawer.Section title={'Model Sources'}>\n        {\n            instance\n                ? <ButtonGroup\n                    alignText={Alignment.LEFT}\n                    minimal={true}\n                    vertical={true}> {\n                    instance.sources().map(source => (\n                        <Button\n                            active={props.selected === source}\n                            icon={'document'}\n                            key={source.filename()}\n                            onClick={() => props.setSelected(source)}\n                            text={source.filename().split(/(\\\\|\\/)/g).pop()}/>\n                    ))\n                }</ButtonGroup>\n                : <SourcePlaceholder {...props}/>\n        }\n    </SterlingDrawer.Section>\n};\n\nexport default connector(SourceDrawer);\n","import { Button, Navbar, NavbarDivider, Tag } from '@blueprintjs/core';\nimport React from 'react';\nimport { SterlingConnection } from '../../sterling/SterlingConnection';\nimport ViewGroup from './components/ViewGroup';\n\nexport interface SterlingNavbarProps {\n    connection: SterlingConnection\n}\n\ninterface ISterlingNavbarState {\n    command: string\n    connected: boolean\n    ready: boolean\n}\n\nclass SterlingNavbar extends React.Component<SterlingNavbarProps, ISterlingNavbarState> {\n\n    constructor (props: SterlingNavbarProps) {\n\n        super(props);\n\n        this.state = {\n            command: '',\n            connected: false,\n            ready: false\n        }\n\n    }\n\n    componentDidMount (): void {\n\n        const connection = this.props.connection;\n\n        connection\n            .addEventListener('connect', () => {\n                this.setState({ connected: true });\n            })\n            .addEventListener('disconnect', () => {\n                this.setState({ connected: false, ready: false });\n            })\n            .addEventListener('instance', event => {\n                this.setState({\n                    command: event.instance.command(),\n                    ready: this.state.connected\n                });\n            });\n\n    }\n\n    render (): React.ReactNode {\n\n        const state = this.state;\n\n        return (\n            <Navbar fixedToTop className={'nav bp3-dark'}>\n                <ViewGroup/>\n                <Navbar.Group className={'collapsing'}>\n                    {\n                        state.command.length > 0 &&\n                        <Tag minimal={true}>\n                            {state.command}\n                        </Tag>\n                    }\n                    <NavbarDivider/>\n                    <Button disabled={!state.ready}\n                            intent={state.connected ? 'success' : 'danger'}\n                            large={true}\n                            onClick={this._requestNext}\n                            rightIcon={'circle-arrow-right'}\n                            text={'Next'}\n                    />\n                </Navbar.Group>\n            </Navbar>\n        )\n\n    }\n\n    private _requestNext = () => {\n\n        this.props.connection.requestNextInstance();\n\n    }\n\n}\n\nexport default SterlingNavbar;\n","import { NonIdealState } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport { Light as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { githubGist } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { COMMENT } from 'highlight.js';\n\nconst STYLE = githubGist;\n\nSyntaxHighlighter.registerLanguage('alloy', function () {\n\n    let NUMBER_RE = '\\\\b\\\\d+';\n\n    return {\n        // case_insensitive\n        case_insensitive: false,\n\n        // keywords\n        keywords: 'abstract all and as assert but check disj ' +\n            'else exactly expect extends fact for fun iden iff implies ' +\n            'in Int let lone module no none not one open or pred ' +\n            'run set sig some sum univ',\n\n        // contains\n        contains: [\n\n            // hljs.COMMENT\n            COMMENT('//', '$', {}),\n            COMMENT('--', '$', {}),\n            COMMENT('/\\\\*', '\\\\*/', {}),\n\n            {\n                // className\n                className: 'number',\n                // begin\n                begin: NUMBER_RE,\n                // relevance\n                relevance: 0\n            }\n        ]\n    };\n});\n\nconst mapState = (state: RootState) => ({\n    instance: state.sterlingSlice.instance,\n    selected: state.sourceSlice.selected,\n    welcome: state.sterlingSlice.welcomeTitle,\n    welcomeDescription: state.sterlingSlice.welcomeDescription\n});\n\nconst connector = connect(mapState);\n\ntype SourceStageProps = ConnectedProps<typeof connector>;\n\nconst SourceStage: React.FunctionComponent<SourceStageProps> = props => {\n\n    if (!props.instance) {\n        return (\n            <NonIdealState\n                description={props.welcomeDescription}\n                icon={'document'}\n                title={props.welcome}/>\n        );\n    }\n\n    if (!props.selected) {\n        return (\n            <NonIdealState\n                description={'Choose a File'}\n                icon={'document'}\n                title={props.welcome}/>\n        );\n    }\n\n    return (\n        <SyntaxHighlighter\n            className={'source'}\n            language={'alloy'}\n            showLineNumbers={false}\n            style={STYLE}>\n            { props.selected.source() }\n        </SyntaxHighlighter>\n    );\n\n};\n\n\nexport default connector(SourceStage);\n","import {\n    Button,\n    Icon,\n    ITagProps,\n    Menu,\n    MenuDivider,\n    MenuItem\n} from '@blueprintjs/core';\nimport {\n    IItemListRendererProps,\n    IItemRendererProps,\n    ItemPredicate,\n    MultiSelect\n} from '@blueprintjs/select';\nimport { AlloyField, AlloySignature, AlloySkolem, sorting } from 'alloy-ts';\nimport * as React from 'react';\nimport { AlloyNameFn, SigFieldSkolem } from '../tableTypes';\nimport { FieldTag, SignatureTag } from '../TableTags';\n\nconst AlloySelect = MultiSelect.ofType<SigFieldSkolem>();\n\nexport interface IAlloyMultiSelectProps {\n    items: SigFieldSkolem[],\n    itemsSelected: SigFieldSkolem[],\n    onClearSelectedItems: () => void,\n    onDeselectItem: (item: SigFieldSkolem) => void,\n    onSelectItem: (item: SigFieldSkolem) => void,\n    nameFunction: AlloyNameFn\n}\n\nclass AlloyMultiSelect extends React.Component<IAlloyMultiSelectProps> {\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const sortItems = (items: SigFieldSkolem[]): SigFieldSkolem[] => {\n\n            const sigs = items.filter(item => item.expressionType() === 'signature');\n            const flds = items.filter(item => item.expressionType() === 'field');\n            const skls = items.filter(item => item.expressionType() === 'skolem');\n            const alpha = sorting.alphabeticalSort(this.props.nameFunction);\n            (sigs as AlloySignature[]).sort(alpha).sort(sorting.builtinSort());\n            (flds as AlloyField[]).sort(alpha);\n            (skls as AlloySkolem[]).sort(alpha);\n            return [...sigs, ...flds, ...skls];\n\n        };\n\n        const clearButton = this.props.itemsSelected.length\n            ? <Button\n                icon='cross'\n                minimal={true}\n                onClick={this.props.onClearSelectedItems}/>\n            : undefined;\n\n        return (\n            <AlloySelect\n                fill={true}\n                items={sortItems(props.items)}\n                itemPredicate={this._filterItem}\n                itemRenderer={this._renderItem}\n                itemListRenderer={this._renderList}\n                onItemSelect={this._onSelectItem}\n                popoverProps={{\n                    usePortal: false\n                }}\n                placeholder='Choose Tables...'\n                resetOnSelect={true}\n                scrollToActiveItem={true}\n                selectedItems={this.props.itemsSelected}\n                tagInputProps={{\n                    onRemove: this._onRemoveTag,\n                    rightElement: clearButton,\n                    tagProps: this._tagProps\n                }}\n                tagRenderer={this._renderTag}\n                />\n        )\n\n    }\n\n    /**\n     * Predicate used to determine if a query string exists in the name of a\n     * Signature, Field, or Skolem.\n     * @param query The query string\n     * @param item The Signature, Field, or Skolem\n     * @private\n     * @return Returns true if the query string appears in the name of the item,\n     * false otherwise.\n     */\n    private _filterItem: ItemPredicate<SigFieldSkolem> = (query: string, item: SigFieldSkolem): boolean => {\n\n        const name = item.expressionType() === 'field'\n            ? this.props.nameFunction(item).split('<:')[1]\n            : this.props.nameFunction(item);\n\n        return name.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n\n    };\n\n    /**\n     * Determine if an item is currently selected\n     * @param item The item in question\n     * @private\n     * @return Returns true if the item is currently selected, false otherwise\n     */\n    private _isItemSelected = (item: SigFieldSkolem) => {\n        return this.props.itemsSelected.includes(item);\n    };\n\n    /**\n     * Event handler used when a tag is removed from the current selection\n     * @param tag The tag text\n     * @param index The index of the tag in the selected items list\n     * @private\n     */\n    private _onRemoveTag = (tag: string, index: number): void => {\n        this.props.onDeselectItem(this.props.itemsSelected[index]);\n    };\n\n    /**\n     * Event handler used when an item in the list is selected\n     * @param item The selected item\n     * @private\n     */\n    private _onSelectItem = (item: SigFieldSkolem): void => {\n\n        this._isItemSelected(item)\n            ? this.props.onDeselectItem(item)\n            : this.props.onSelectItem(item);\n\n    };\n\n    /**\n     * Custom renderer for an Alloy item in the dropdown list.\n     * @param item The Alloy item to render\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderItem = (item: SigFieldSkolem, props: IItemRendererProps): React.ReactElement | null => {\n\n        if (!props.modifiers.matchesPredicate) return null;\n        switch (item.expressionType()) {\n            case 'signature':\n                return this._renderSignature(item as AlloySignature, props);\n            case 'field':\n                return this._renderField(item as AlloyField, props);\n            case 'skolem':\n                return this._renderSkolem(item as AlloySkolem, props);\n            default:\n                return null;\n        }\n\n    };\n\n    /**\n     * Custom renderer for the contents of the dropdown list. Splits list into\n     * three categories (Signatures, Fields, Skolems) sorted alphabetically.\n     * @param props Properties describing how to render a list of items\n     * @private\n     */\n    private _renderList = (props: IItemListRendererProps<SigFieldSkolem>): React.ReactElement => {\n\n        const sigs = props.items.filter(item => item.expressionType() === 'signature');\n        const flds = props.items.filter(item => item.expressionType() === 'field');\n        const skls = props.items.filter(item => item.expressionType() === 'skolem');\n        const alpha = sorting.alphabeticalSort(this.props.nameFunction);\n        (sigs as AlloySignature[]).sort(alpha).sort(sorting.builtinSort());\n        (flds as AlloyField[]).sort(alpha);\n        (skls as AlloySkolem[]).sort(alpha);\n        const renderedSigs = sigs.map(props.renderItem).filter(item => item != null);\n        const renderedFlds = flds.map(props.renderItem).filter(item => item != null);\n        const renderedSkls = skls.map(props.renderItem).filter(item => item != null);\n        return (\n            <Menu ulRef={props.itemsParentRef}>\n                <MenuDivider title='Signatures'/>\n                {renderedSigs.length ? renderedSigs : <MenuItem disabled={true} text='None'/>}\n                <MenuDivider title='Fields'/>\n                {renderedFlds.length ? renderedFlds : <MenuItem disabled={true} text='None'/>}\n                <MenuDivider title='Skolems'/>\n                {renderedSkls.length ? renderedSkls : <MenuItem disabled={true} text='None'/>}\n            </Menu>\n        );\n\n    };\n\n    /**\n     * Custom renderer for an Alloy Signature in the dropdown list\n     * @param item The Signature\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderSignature = (item: AlloySignature, props: IItemRendererProps): React.ReactElement => {\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                key={item.id()}\n                labelElement={highlightText(this.props.nameFunction(item), props.query)}\n                icon={selected ? 'tick' : 'blank'}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for an Alloy Field in the dropdown list\n     * @param item The Field\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderField = (item: AlloyField, props: IItemRendererProps) => {\n        const name = this.props.nameFunction(item);\n        const tokens = name.split('<:');\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                key={item.id()}\n                icon={<>\n                    { selected && <Icon icon='tick'/>}\n                    <SignatureTag signature={tokens[0]}/>\n                </>}\n                labelElement={highlightText(tokens[1], props.query)}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for an Alloy Skolem in the dropdown list\n     * @param item The Skolem\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderSkolem = (item: AlloySkolem, props: IItemRendererProps) => {\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                icon={selected ? 'tick' : 'blank'}\n                key={item.id()}\n                labelElement={highlightText(item.name(), props.query)}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for tags in the select. Does not actually generate a Tag,\n     * but instead returns the node that will be used as the label of the tag.\n     * @param item The Alloy item to render\n     * @private\n     */\n    private _renderTag = (item: SigFieldSkolem): React.ReactNode => {\n\n        const name = this.props.nameFunction(item);\n        return item.expressionType() === 'field'\n            ? FieldTag.FieldTagEls(name.split('<:'))\n            : name;\n\n    };\n\n    /**\n     * Custom properties to pass to each Tag based on type of item the tag\n     * represents\n     * @param value The node\n     * @param index The index of the item in the selected items list\n     * @private\n     */\n    private _tagProps = (value: React.ReactNode, index: number): ITagProps => {\n\n        const itemType = this.props.itemsSelected[index].expressionType();\n        const tag = itemType === 'signature'\n            ? 'sig-tag' : itemType === 'field'\n                ? 'field-tag' : itemType === 'skolem'\n                    ? 'skolem-tag' : '';\n        return {\n            className: tag\n        };\n\n    }\n\n}\n\nfunction highlightText (text: string, query: string) {\n    let lastIndex = 0;\n    const words = query\n        .split(/\\s+/)\n        .filter(word => word.length > 0)\n        .map(escapeRegExpChars);\n    if (words.length === 0) {\n        return [text];\n    }\n    const regexp = new RegExp(words.join(\"|\"), \"gi\");\n    const tokens: React.ReactNode[] = [];\n    while (true) {\n        const match = regexp.exec(text);\n        if (!match) {\n            break;\n        }\n        const length = match[0].length;\n        const before = text.slice(lastIndex, regexp.lastIndex - length);\n        if (before.length > 0) {\n            tokens.push(before);\n        }\n        lastIndex = regexp.lastIndex;\n        tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\n    }\n    const rest = text.slice(lastIndex);\n    if (rest.length > 0) {\n        tokens.push(rest);\n    }\n    return tokens;\n}\n\nfunction escapeRegExpChars (text: string) {\n    return text.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\n}\n\nexport default AlloyMultiSelect;\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    FormGroup,\n    Radio,\n    RadioGroup,\n    Switch\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport SterlingDrawer from '../../sterling/SterlingDrawer';\nimport AlloyMultiSelect from './drawer-components/AlloyMultiSelect';\nimport {\n    clearSelectedData,\n    deselectData,\n    selectData,\n    setAlignment,\n    setLayoutDirection,\n    setSort,\n    setTableTypes,\n    toggleCollapseData,\n    toggleCollapseLayout,\n    toggleCollapseTables,\n    toggleHighlightSkolems,\n    toggleRemoveBuiltin,\n    toggleRemoveEmpty,\n    toggleRemoveThis\n} from './tableSlice';\nimport {\n    buildNameFunction,\n    HorizontalAlignment,\n    LayoutDirection,\n    SortDirection,\n    SortMethod,\n    TablesType\n} from './tableTypes';\n\n// Map redux state to table settings props\nconst mapState = (state: RootState) => ({\n    ...state.tableSlice\n});\n\n// Actions\nconst mapDispatch = {\n    clearSelectedData,\n    deselectData,\n    selectData,\n    setAlignment,\n    setLayoutDirection,\n    setSort,\n    setTableTypes,\n    toggleCollapseData,\n    toggleCollapseLayout,\n    toggleCollapseTables,\n    toggleHighlightSkolems,\n    toggleRemoveBuiltin,\n    toggleRemoveEmpty,\n    toggleRemoveThis\n};\n\n// Connect the two\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\n// Create props for things from redux\ntype TableDrawerProps = ConnectedProps<typeof connector>;\n\n// The table settings view\nconst TableDrawer: React.FunctionComponent<TableDrawerProps> = props => {\n\n    return (\n        <>\n            <SterlingDrawer.Section\n                collapsed={props.collapseTables}\n                onToggle={props.toggleCollapseTables}\n                style={{ zIndex: 1 }}\n                title={'Tables'}>\n                <RadioGroup\n                    onChange={event => props.setTableTypes(parseInt(event.currentTarget.value))}\n                    selectedValue={props.tablesType}>\n                    <Radio label='All Tables' value={TablesType.All}/>\n                    <Radio label='Signatures' value={TablesType.Signatures}/>\n                    <Radio label='Fields' value={TablesType.Fields}/>\n                    <Radio label='Skolems' disabled={props.highlightSkolems} value={TablesType.Skolems}/>\n                    <Radio label='Choose Tables' value={TablesType.Select}/>\n                    <AlloyMultiSelect\n                        items={props.data}\n                        itemsSelected={props.dataSelected}\n                        onClearSelectedItems={props.clearSelectedData}\n                        onDeselectItem={props.deselectData}\n                        onSelectItem={props.selectData}\n                        nameFunction={buildNameFunction(props.removeThis)}/>\n                </RadioGroup>\n            </SterlingDrawer.Section>\n            <SterlingDrawer.Section\n                collapsed={props.collapseData}\n                onToggle={props.toggleCollapseData}\n                title={'Data Options'}>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.removeBuiltin}\n                    disabled={props.tablesType === TablesType.Select}\n                    label='Hide Built-in Signatures'\n                    onChange={props.toggleRemoveBuiltin}/>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.removeEmpty}\n                    disabled={props.tablesType === TablesType.Select}\n                    label='Hide Empty Tables'\n                    onChange={props.toggleRemoveEmpty}/>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.removeThis}\n                    label='Remove \"this\" from Signature names'\n                    onChange={props.toggleRemoveThis}/>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.highlightSkolems}\n                    label='Display Skolems as highlighted rows'\n                    onChange={props.toggleHighlightSkolems}/>\n            </SterlingDrawer.Section>\n            <SterlingDrawer.Section\n                collapsed={props.collapseLayout}\n                onToggle={props.toggleCollapseLayout}\n                title={'Layout Options'}>\n                <FormGroup inline={true} label='Layout Direction'>\n                    <ButtonGroup>\n                        <Button\n                            active={props.layoutDirection === LayoutDirection.Row}\n                            icon='vertical-distribution'\n                            onClick={() => props.setLayoutDirection(LayoutDirection.Row)}/>\n                        <Button\n                            active={props.layoutDirection === LayoutDirection.Column}\n                            icon='horizontal-distribution'\n                            onClick={() => props.setLayoutDirection(LayoutDirection.Column)}/>\n                    </ButtonGroup>\n                </FormGroup>\n                <FormGroup inline={true} label='Align'>\n                    <ButtonGroup>\n                        <Button\n                            active={props.alignment === HorizontalAlignment.Left}\n                            icon='align-left'\n                            onClick={() => props.setAlignment(HorizontalAlignment.Left)}/>\n                        <Button\n                            active={props.alignment === HorizontalAlignment.Center}\n                            icon='align-center'\n                            onClick={() => props.setAlignment(HorizontalAlignment.Center)}/>\n                        <Button\n                            active={props.alignment === HorizontalAlignment.Right}\n                            icon='align-right'\n                            onClick={() => props.setAlignment(HorizontalAlignment.Right)}/>\n                    </ButtonGroup>\n                </FormGroup>\n                <FormGroup inline={true} label='Sort'>\n                    <ButtonGroup>\n                        <Button\n                            icon='group-objects'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Group,\n                                    direction: SortDirection.Ascending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-alphabetical'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Alphabetical,\n                                    direction: SortDirection.Ascending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-alphabetical-desc'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Alphabetical,\n                                    direction: SortDirection.Descending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-numerical'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Size,\n                                    direction: SortDirection.Ascending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-numerical-desc'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Size,\n                                    direction: SortDirection.Descending\n                                });\n                            }}/>\n                    </ButtonGroup>\n                </FormGroup>\n            </SterlingDrawer.Section>\n        </>\n    )\n\n};\n\nexport default connector(TableDrawer);\n","import { Portal } from '@blueprintjs/core';\nimport React from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\ninterface IPopoverRowProps {\n    content: string | React.ReactElement,\n    colors: string[]\n}\n\ninterface IPopoverRowState {\n    enabled: boolean\n}\n\nexport default class PopoverRow extends React.Component<IPopoverRowProps, IPopoverRowState> {\n\n    public state = {\n        enabled: false\n    };\n\n    render (): React.ReactNode {\n\n        const colors = this.props.colors;\n        const thickness = this.state.enabled ? 4 : 2;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <tr onMouseEnter={this._onMouseEnter}\n                            onMouseLeave={this._onMouseLeave}\n                            ref={ref}\n                            style={{\n                                boxShadow: this._buildShadowStyle(colors, thickness)\n                            }}>\n                            {this.props.children}\n                        </tr>\n                    )}\n                </Reference>\n                <Portal>\n                    <Popper\n                        modifiers={{}}\n                        placement='right'>\n                        {({ ref, style, placement }) => (\n                            this.state.enabled &&\n                            <div\n                                ref={ref}\n                                style={{\n                                    ...style,\n                                    padding: (thickness * (colors.length - 1)) + 'px'\n                                }}\n                                data-placement={placement}>\n                                <div className='table-rowpop'>\n                                    {this.props.content}\n                                </div>\n                            </div>\n                        )}\n                    </Popper>\n                </Portal>\n            </Manager>\n        );\n\n    }\n\n    private _buildShadowStyle = (colors: string[], thickness: number): string => {\n        return colors.map((color: string, i: number) => {\n            return `0 0 0 ${(i+1) * thickness}px ${color}`\n        }).join(',');\n    };\n\n    private _onMouseEnter = () => {\n        this.setState({enabled: true});\n    };\n\n    private _onMouseLeave = () => {\n        this.setState({enabled: false});\n    };\n\n}\n","import { AlloySkolem } from 'alloy-ts';\nimport React from 'react';\n\nexport default function SkolemListPopover (skolems: AlloySkolem[], colors: string[]): React.ReactElement {\n\n    return (\n        <>\n            {\n                skolems.map((skolem: AlloySkolem, i: number) => {\n                    return (\n                        <div key={skolem.id()}\n                             style={{backgroundColor: colors[i]}}>\n                            { skolem.name() }\n                        </div>\n                    )\n                })\n            }\n        </>\n    )\n\n}\n","import { Card, NonIdealState } from '@blueprintjs/core';\nimport { AlloyField, AlloySignature, AlloySkolem, filtering } from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport FieldHTMLTable from './stage-components/FieldHTMLTable';\nimport SignatureHTMLTable from './stage-components/SignatureHTMLTable';\nimport SkolemHTMLTable from './stage-components/SkolemHTMLTable';\nimport { FieldTag, SignatureTag, SkolemTag } from './TableTags';\nimport {\n    getAlignClass,\n    AlloyNameFn,\n    buildNameFunction,\n    buildSortFunction,\n    getLayoutClass,\n    SigFieldSkolem,\n    TablesType\n} from './tableTypes';\n\n// Map redux state to table settings props\nconst mapState = (state: RootState) => ({\n    ...state.tableSlice,\n    description: state.sterlingSlice.welcomeDescription,\n    instance: state.sterlingSlice.instance,\n    title: state.sterlingSlice.welcomeTitle\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype TableStageProps = ConnectedProps<typeof connector>;\n\n// The table stage component\nconst TableStage: React.FunctionComponent<TableStageProps> = props => {\n\n    if (!props.instance) return (\n        <NonIdealState\n            title={props.title}\n            description={props.description}\n            icon={'th'}/>\n    );\n\n    const alignment = getAlignClass(props.alignment);\n    const direction = getLayoutClass(props.layoutDirection);\n    const nameFunction = buildNameFunction(props.removeThis);\n    const primarySort = buildSortFunction(props.primarySort, nameFunction);\n    const secondSort = buildSortFunction(props.secondarySort, nameFunction);\n    const type = props.tablesType;\n\n    let data = type === TablesType.All ? props.data :\n        type === TablesType.Signatures ? props.data.filter(filtering.keepSignatures) :\n        type === TablesType.Fields ? props.data.filter(filtering.keepFields) :\n        type === TablesType.Skolems ? props.data.filter(filtering.keepSkolems) :\n        type === TablesType.Select ? props.dataSelected.slice() : [];\n\n    const pass = () => true;\n    data = type === TablesType.Select\n        ? data\n        : data\n            .filter(props.removeBuiltin ? filtering.removeBuiltins : pass)\n            .filter(props.removeEmpty ? filtering.removeEmptys : pass)\n            .filter(props.highlightSkolems ? filtering.removeSkolems : pass);\n\n    data = data\n        .sort(secondSort)\n        .sort(primarySort);\n\n    return (\n        <div className={`tables ${alignment} ${direction}`}>\n            {\n                data.map(item => (\n                    <Card key={item.id()}\n                          elevation={1}>\n                        { buildTableHeader(item, nameFunction) }\n                        {\n                            item.expressionType() === 'signature' ?\n                                SignatureHTMLTable({\n                                    highlightSkolems: props.highlightSkolems,\n                                    signature: item as AlloySignature,\n                                    skolemColors: props.skolemColors\n                                }) :\n                            item.expressionType() === 'field' ?\n                                FieldHTMLTable({\n                                    field: item as AlloyField,\n                                    highlightSkolems: props.highlightSkolems,\n                                    nameFunction: nameFunction,\n                                    skolemColors: props.skolemColors\n                                }) :\n                            item.expressionType() === 'skolem' ?\n                                SkolemHTMLTable({\n                                    nameFunction: nameFunction,\n                                    skolem: item as AlloySkolem\n                                }) :\n                            null\n                        }\n                    </Card>\n                ))\n            }\n        </div>\n    );\n\n};\n\n\nfunction buildTableHeader (item: SigFieldSkolem, nameFunction: AlloyNameFn): React.ReactNode {\n\n    if (item.expressionType() === 'signature') {\n        return <SignatureTag\n            fill={true}\n            signature={item as AlloySignature}\n            nameFunction={nameFunction}/>;\n    }\n\n    if (item.expressionType() === 'field') {\n        return <FieldTag\n            fill={true}\n            field={item as AlloyField}\n            nameFunction={nameFunction}/>;\n    }\n\n    if (item.expressionType() === 'skolem') {\n        return <SkolemTag\n            fill={true}\n            skolem={item as AlloySkolem}\n            nameFunction={nameFunction}/>;\n    }\n\n    return null;\n\n}\n\n\nexport default connector(TableStage);\n","import { HTMLTable } from '@blueprintjs/core';\nimport { AlloyAtom, AlloySignature, AlloySkolem } from 'alloy-ts';\nimport React from 'react';\nimport PopoverRow from './PopoverRow';\nimport SkolemListPopover from './SkolemListPopover';\n\nexport interface ISignatureHTMLTableProps {\n    highlightSkolems: boolean,\n    signature: AlloySignature,\n    skolemColors: Map<AlloySkolem, string>\n}\n\nexport default function SignatureHTMLTable (props: ISignatureHTMLTableProps) {\n\n    const signature = props.signature;\n    const atoms: AlloyAtom[] = signature.atoms();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <tbody>\n            {\n                atoms.map((atom: AlloyAtom) => {\n\n                    const skolems = atom.skolems();\n\n                    if (props.highlightSkolems && skolems.length) {\n\n                        const colors = skolems.map(s => props.skolemColors.get(s) || '');\n\n                        return (\n                            <PopoverRow\n                                key={atom.id()}\n                                content={SkolemListPopover(skolems, colors)}\n                                colors={colors}>\n                                <td>{ atom.name() }</td>\n                            </PopoverRow>\n                        );\n\n                    } else {\n\n                        return (\n                            <tr key={atom.id()}>\n                                <td>{ atom.name() }</td>\n                            </tr>\n                        );\n\n                    }\n                })\n            }\n            </tbody>\n        </HTMLTable>\n    )\n}\n","import { HTMLTable } from '@blueprintjs/core';\nimport {\n    AlloyAtom,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem,\n    AlloyTuple\n} from 'alloy-ts';\nimport React from 'react';\nimport PopoverRow from './PopoverRow';\nimport SkolemListPopover from './SkolemListPopover';\n\n\nexport interface IFieldHTMLTableProps {\n    field: AlloyField,\n    highlightSkolems: boolean,\n    nameFunction: (item: AlloySignature | AlloyField | AlloySkolem) => string,\n    skolemColors: Map<AlloySkolem, string>\n}\n\nexport default function FieldHTMLTable (props: IFieldHTMLTableProps) {\n\n    const types: AlloySignature[] = props.field.types();\n    const tuples: AlloyTuple[] = props.field.tuples();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <thead>\n            <tr>\n            {\n                types.map((sig: AlloySignature, i: number) => (\n                    <th key={sig.id() + i}>\n                        {props.nameFunction(sig)}\n                    </th>\n                ))\n            }\n            </tr>\n            </thead>\n            <tbody>\n            {\n                tuples.map((tuple: AlloyTuple) => {\n\n                    const skolems = tuple.skolems();\n\n                    if (props.highlightSkolems && skolems.length) {\n\n                        const colors = skolems.map(s => props.skolemColors.get(s) || '');\n\n                        return (\n                            <PopoverRow\n                                key={tuple.id()}\n                                content={SkolemListPopover(skolems, colors)}\n                                colors={colors}>\n                                {\n                                    tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                        <td key={tuple.id() + '[' + i + ']'}>\n                                            {atom.name()}\n                                        </td>\n                                    ))\n                                }\n                            </PopoverRow>\n                        );\n\n                    } else {\n\n                        return (\n                            <tr key={tuple.id()}>\n                                {\n                                    tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                        <td key={tuple.id() + '[' + i + ']'}>\n                                            {atom.name()}\n                                        </td>\n                                    ))\n                                }\n                            </tr>\n                        )\n\n                    }\n\n                })\n            }\n            </tbody>\n        </HTMLTable>\n    )\n\n}\n","import { HTMLTable } from '@blueprintjs/core';\nimport {\n    AlloyAtom,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem,\n    AlloyTuple\n} from 'alloy-ts';\nimport React from 'react';\n\nexport interface ISkolemHTMLTableProps {\n    nameFunction: (item: AlloySignature | AlloyField | AlloySkolem) => string,\n    skolem: AlloySkolem\n}\n\nexport default function SkolemHTMLTable (props: ISkolemHTMLTableProps) {\n\n    const types: AlloySignature[] = props.skolem.types();\n    const tuples: AlloyTuple[] = props.skolem.tuples();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <thead>\n            <tr>\n            {\n                types.map((sig: AlloySignature, i: number) => (\n                    <th key={sig.id() + i}>\n                        {props.nameFunction(sig)}\n                    </th>\n                ))\n            }\n            </tr>\n            </thead>\n            <tbody>\n            {\n                tuples.map((tuple: AlloyTuple) => (\n                    <tr key={tuple.id()}>\n                        {\n                            tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                <td key={tuple.id() + '[' + i + ']'}>\n                                    {atom.name()}\n                                </td>\n                            ))\n                        }\n                    </tr>\n                ))\n            }\n            </tbody>\n        </HTMLTable>\n    );\n\n}\n","import React from 'react';\nimport { HotKeys } from 'react-hotkeys';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../rootReducer';\nimport { setMainView } from './sterlingSlice';\n\nconst keyMap = {\n    VIEW_GRAPH: 'g',\n    VIEW_SOURCE: 's',\n    VIEW_TABLE: 't',\n    ZOOM_TO_FIT: 'f'\n};\n\nconst mapState = (state: RootState) => ({\n    ...state\n});\n\nconst mapDispatch = {\n    setMainView\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype SterlingKeyboardProps = ConnectedProps<typeof connector>;\n\nclass SterlingKeyboard extends React.Component<SterlingKeyboardProps> {\n\n    render (): React.ReactNode {\n\n        return <HotKeys className={'sterling'} keyMap={keyMap} handlers={this._handlers()}>\n            {this.props.children}\n        </HotKeys>\n\n    }\n\n    private _handlers = (): {[key: string]: () => void} => {\n\n        return {\n            VIEW_GRAPH: () => {\n                this.props.setMainView('graph');\n            },\n            VIEW_SOURCE: () => {\n                this.props.setMainView('source');\n            },\n            VIEW_TABLE: () => {\n                this.props.setMainView('table');\n            },\n            ZOOM_TO_FIT: () => {\n                if (this.props.sterlingSlice.mainView === 'graph')\n                    this.props.graphSlice.graphSlice.graph.zoomToFit()\n            }\n        }\n\n    }\n\n}\n\nexport default connector(SterlingKeyboard);\n","import {\n    Button,\n    IconName,\n    Intent,\n    MaybeElement,\n    Position,\n    Tooltip\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../rootReducer';\nimport {\n    setGraphView,\n    setMainView,\n    setSourceView,\n    setTableView\n} from './sterlingSlice';\n\n// Map redux state to sidebar props\nconst mapState = (state: RootState) => ({\n    ...state.sterlingSlice,\n});\n\n// Actions\nconst mapDispatch = {\n    setGraphView,\n    setMainView,\n    setSourceView,\n    setTableView\n};\n\n// Connect the two\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\n// Create props\nexport type SterlingSidebarProps = ConnectedProps<typeof connector>;\n\n// Sidebar button component props\ninterface SidebarButtonProps {\n    active: boolean\n    click: () => void\n    icon: IconName | MaybeElement\n    text: string\n}\n\n// A sidebar button\nconst SidebarButton: React.FunctionComponent<SidebarButtonProps> = props => (\n    <Tooltip\n        content={<span>{props.text}</span>}\n        hoverOpenDelay={500}\n        intent={Intent.PRIMARY}\n        position={Position.RIGHT}>\n        <Button\n            icon={props.icon}\n            minimal={true}\n            large={true}\n            active={props.active}\n            onClick={props.click}/>\n    </Tooltip>\n);\n\n// The sidebar view\nconst SterlingSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n\n    const mainview = props.mainView;\n    const evalActive =\n        (mainview === 'graph' && props.graphView === 'evaluator') ||\n        (mainview === 'table' && props.tableView === 'evaluator') ||\n        (mainview === 'source' && props.sourceView === 'evaluator');\n\n    return (\n        <div className={'sidebar nav bp3-dark'}>\n            {\n                mainview === 'graph' ? <GraphSidebar {...props}/> :\n                mainview === 'table' ? <TableSidebar {...props}/> :\n                mainview === 'source' ? <SourceSidebar {...props}/> :\n                null\n            }\n            <div className={'divider'}/>\n            <SidebarButton\n                active={evalActive}\n                click={() => {\n                    if (mainview === 'graph') props.setGraphView('evaluator');\n                    if (mainview === 'table') props.setTableView('evaluator');\n                    if (mainview === 'source') props.setSourceView('evaluator');\n                }}\n                icon={'console'}\n                text={'Evaluator'}/>\n        </div>\n    );\n\n};\n\n// The graph sidebar section\nconst GraphSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n\n    const view = props.graphView;\n\n    return (\n        <>\n            <SidebarButton\n                active={view === 'node'}\n                click={() => props.setGraphView('node')}\n                icon={'group-objects'}\n                text={'Projections and Node Styling'}/>\n            <SidebarButton\n                active={view === 'edge'}\n                click={() => props.setGraphView('edge')}\n                icon={'flows'}\n                text={'Edge Styling'}/>\n            <SidebarButton\n                active={view === 'layout'}\n                click={() => props.setGraphView('layout')}\n                icon={'layout-auto'}\n                text={'Layout'}/>\n            <SidebarButton\n                active={view === 'settings'}\n                click={() => props.setGraphView('settings')}\n                icon={'settings'}\n                text={'Graph Settings'}/>\n        </>\n    );\n\n};\n\nconst TableSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n    return (\n        <SidebarButton\n            active={props.tableView === 'settings'}\n            click={() => props.setTableView('settings')}\n            icon={'settings'}\n            text={'Table Settings'}/>\n    );\n};\n\nconst SourceSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n    return (\n        <SidebarButton\n            active={props.sourceView === 'files'}\n            click={() => props.setSourceView('files')}\n            icon={'document'}\n            text={'Model Sources'}/>\n    )\n};\n\nexport default connector(SterlingSidebar);\n","import React from 'react';\n\nclass SterlingStage extends React.Component {\n\n    render (): React.ReactNode {\n\n        return (\n            <div className={'stage'}>\n                { this.props.children }\n            </div>\n        );\n\n    }\n\n}\n\nexport default SterlingStage;\n","import { FocusStyleManager, ResizeSensor } from '@blueprintjs/core';\nimport { AlloyInstance } from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport SplitPane from 'react-split-pane';\nimport { Evaluator } from '../evaluator/Evaluator';\nimport EvaluatorView, { IEvaluatorProps } from '../evaluator/EvaluatorView';\nimport GraphDrawer from '../features/graph/GraphDrawer';\nimport GraphStage from '../features/graph/GraphStage';\nimport StaticNavbar from '../features/nav/StaticNavbar';\nimport SterlingNavbar from '../features/nav/SterlingNavbar';\nimport SourceDrawer from '../features/source/SourceDrawer';\nimport SourceStage from '../features/source/SourceStage';\nimport TableDrawer from '../features/table/TableDrawer';\nimport TableStage from '../features/table/TableStage';\nimport { RootState } from '../rootReducer';\nimport { SterlingConnection } from './SterlingConnection';\nimport SterlingDrawer from './SterlingDrawer';\nimport SterlingKeyboard from './SterlingKeyboard';\nimport SterlingSidebar from './SterlingSidebar';\nimport { setInstance } from './sterlingSlice';\nimport SterlingStage from './SterlingStage';\n\n\nFocusStyleManager.onlyShowFocusOnTabs();\n\n// Map redux state to sterling props\nconst mapState = (state: RootState) => ({\n    graph: state.graphSlice.graphSlice.graph,\n    ...state.sterlingSlice\n});\n\n// Actions\nconst mapDispatch = {\n    setInstance\n};\n\n// Connector\nconst connector = connect(mapState, mapDispatch);\n\n// Create props type for things from redux\ntype SterlingReduxProps = ConnectedProps<typeof connector>;\n\n// Create combined type for all props\nexport type SterlingProps = SterlingReduxProps & {\n    connection: SterlingConnection\n}\n\ninterface ISterlingState {\n    instance: AlloyInstance | null\n}\n\nclass Sterling extends React.Component<SterlingProps, ISterlingState> {\n\n    private readonly _evaluator: Evaluator;\n    private readonly _evaluatorView: React.ComponentType<IEvaluatorProps>;\n\n    constructor (props: SterlingProps) {\n\n        super(props);\n\n        this._evaluator = new Evaluator(props.connection);\n        this._evaluatorView = EvaluatorView;\n\n        this.state = {\n            instance: null\n        };\n\n    }\n\n    componentDidMount (): void {\n\n        this._initializeConnection();\n\n    }\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n        const drawerOpen =\n            (props.mainView === 'graph' && props.graphView !== null) ||\n            (props.mainView === 'table' && props.tableView !== null) ||\n            (props.mainView === 'source' && props.sourceView !== null);\n\n        return (\n                <ResizeSensor onResize={this._resize}>\n                    <SterlingKeyboard>\n                        {\n                            this._getNavbar()\n                        }\n                        <SterlingSidebar/>\n                        {\n                            !drawerOpen\n                                ? this._getStage()\n                                : (\n                                    <SplitPane\n                                        split={'vertical'}\n                                        defaultSize={350}\n                                        minSize={150}\n                                        maxSize={-150}\n                                        onChange={this._resize}\n                                    >\n                                        { this._getDrawer() }\n                                        { this._getStage() }\n                                    </SplitPane>\n                                )\n                        }\n                    </SterlingKeyboard>\n                </ResizeSensor>\n        )\n\n    }\n\n    private _getDrawer = (): React.ReactNode => {\n\n        const props = this.props;\n        const Evaluator = this._evaluatorView;\n        const evalActive =\n            (props.mainView === 'graph' && props.graphView === 'evaluator') ||\n            (props.mainView === 'table' && props.tableView === 'evaluator') ||\n            (props.mainView === 'source' && props.sourceView === 'evaluator');\n\n        return <SterlingDrawer>\n            {\n                evalActive\n                    ?\n                        <Evaluator evaluator={this._evaluator}/>\n                    :\n                        props.mainView === 'graph' ? <GraphDrawer/> :\n                        props.mainView === 'table' ? <TableDrawer/> :\n                        props.mainView === 'source' ? <SourceDrawer/> :\n                        null\n\n            }\n        </SterlingDrawer>;\n\n    };\n\n    private _getNavbar = (): React.ReactNode => {\n\n        const target = process.env.REACT_APP_BUILD_TARGET;\n        switch (target) {\n            case 'static':\n                return <StaticNavbar/>;\n            case 'alloy':\n            case 'forge':\n            default:\n                return <SterlingNavbar connection={this.props.connection}/>;\n\n        }\n\n    };\n\n    private _getStage = (): React.ReactNode => {\n\n        const view = this.props.mainView;\n\n        return (\n            <SterlingStage>\n                {\n                    view === 'table' ? <TableStage/> :\n                    view === 'graph' ? <GraphStage/> :\n                    view === 'source' ? <SourceStage/> : null\n                }\n            </SterlingStage>\n        )\n\n    };\n\n    private _initializeConnection = (): void => {\n\n        const connection = this.props.connection;\n\n        connection.addEventListener('connect', () => {\n            connection.requestCurrentInstance();\n        });\n\n        connection.addEventListener('instance', event => {\n            this.props.setInstance(event.instance);\n        });\n\n        connection.connect();\n\n    };\n\n    private _resize = (): void => {\n\n        this.props.graph.resize();\n\n    }\n\n}\n\nexport default connector(Sterling);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from '@reduxjs/toolkit';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { AlloyConnection } from './connections/AlloyConnection';\nimport { ForgeConnection } from './connections/ForgeConnection';\nimport NoConnection from './connections/NoConnection';\nimport { sterlingApp } from './rootReducer';\nimport Sterling from './sterling/Sterling';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.scss';\n\nconst target = process.env.REACT_APP_BUILD_TARGET;\nconst connection = target === 'alloy' ? new AlloyConnection()\n    : target === 'forge' ? new ForgeConnection()\n    : target === 'static' ? new NoConnection()\n    : new AlloyConnection();\nconst store = createStore(sterlingApp);\n\nReactDOM.render(\n    <Provider store={store}>\n        <Sterling connection={connection}/>\n    </Provider>,\n    document.getElementById('root'))\n;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}