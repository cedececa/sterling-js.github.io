{"version":3,"sources":["util/EventDispatcher.ts","sterling/SterlingConnection.ts","connections/NoConnection.ts","../../../alloy-js/graph-js/dist/layouts/static/StaticLayout.js","../../../alloy-js/graph-js/dist/layouts/static/CircleLayout.js","../../../alloy-js/graph-js/dist/types/util.js","../../../alloy-js/graph-js/dist/styles/ShapeStyle.js","../../../alloy-js/graph-js/dist/renderers/Renderer.js","../../../alloy-js/graph-js/dist/renderers/shapes/ShapeRenderer.js","../../../alloy-js/graph-js/dist/renderers/shapes/RectangleRenderer.js","../../../alloy-js/graph-js/dist/layouts/static/DagreLayout.js","../../../alloy-js/graph-js/dist/EventDispatcher.js","../../../alloy-js/graph-js/dist/managers/DragManager.js","../../../alloy-js/graph-js/dist/labellers/LinkLabeller.js","../../../alloy-js/graph-js/dist/renderers/labels/LinkLabelRenderer.js","../../../alloy-js/graph-js/dist/renderers/links/LinkRenderer.js","../../../alloy-js/graph-js/dist/renderers/links/NaturalCurveRenderer.js","../../../alloy-js/graph-js/dist/paths/Path.js","../../../alloy-js/graph-js/dist/paths/CubicBezier.js","../../../alloy-js/graph-js/dist/paths/Line.js","../../../alloy-js/graph-js/dist/paths/QuadraticBezier.js","../../../alloy-js/graph-js/dist/routers/LinkSet.js","../../../alloy-js/graph-js/dist/routers/Router.js","../../../alloy-js/graph-js/dist/routers/BundleRouter.js","../../../alloy-js/graph-js/dist/types/Point.js","../../../alloy-js/graph-js/dist/styles/LabelStyle.js","../../../alloy-js/graph-js/dist/styles/LinkStyle.js","../../../alloy-js/graph-js/dist/styles/StyleParsers.js","../../../alloy-js/graph-js/dist/managers/EdgeManager.js","../../../alloy-js/graph-js/dist/managers/HoverManager.js","../../../alloy-js/graph-js/dist/renderers/labels/LabelRenderer.js","../../../alloy-js/graph-js/dist/renderers/shapes/CircleRenderer.js","../../../alloy-js/graph-js/dist/managers/NodeManager.js","../../../alloy-js/graph-js/dist/renderers/AxesRenderer.js","../../../alloy-js/graph-js/dist/Graph.js","../../../alloy-js/graph-js/dist/layouts/static/GridLayout.js","../../../alloy-js/graph-js/dist/layouts/static/RowLayout.js","sterling/sterlingSlice.ts","features/graph/drawer-views/data/dataSlice.ts","features/graph/util.ts","features/table/TableTags.tsx","features/graph/drawer-views/edge-styling/edgeTypes.ts","features/graph/drawer-views/edge-styling/edgeStylingSlice.ts","features/graph/drawer-views/graph-settings/graphSettingsSlice.ts","features/graph/drawer-views/layout/layoutSlice.ts","features/graph/drawer-views/node-styling/nodeTypes.ts","features/graph/drawer-views/node-styling/nodeStylingSlice.ts","features/table/tableTypes.ts","features/graph/graphSlice.ts","features/source/sourceSlice.ts","features/table/tableSlice.ts","rootReducer.ts","evaluator/Evaluator.ts","evaluator/EvaluatorTable.tsx","evaluator/EvaluatorView.tsx","sterling/SterlingDrawer.tsx","features/graph/drawer-views/edge-styling/QuickEdgeStyling.tsx","features/graph/drawer-views/graph-settings/EdgeSettings.tsx","features/graph/drawer-views/layout/Layout.tsx","features/graph/drawer-views/projections/Projections.tsx","features/graph/drawer-components/LabelStyler.tsx","features/graph/graphTypes.ts","features/graph/drawer-views/edge-styling/components/LinkStyler.tsx","features/graph/drawer-views/edge-styling/EdgeStyling.tsx","features/graph/drawer-views/graph-settings/GraphSettings.tsx","features/graph/drawer-views/layout/QuickLayout.tsx","features/graph/drawer-views/node-styling/components/ShapeSelector.tsx","features/graph/drawer-views/node-styling/components/ShapeStyler.tsx","features/graph/drawer-views/node-styling/NodeStyling.tsx","features/graph/GraphDrawer.tsx","features/graph/GraphStage.tsx","features/graph/graphData.ts","features/nav/components/ViewGroup.tsx","features/nav/StaticNavbar.tsx","features/source/SourceDrawer.tsx","features/source/SourceStage.tsx","features/table/drawer-components/AlloyMultiSelect.tsx","features/table/TableDrawer.tsx","features/table/stage-components/PopoverRow.tsx","features/table/stage-components/SkolemListPopover.tsx","features/table/TableStage.tsx","features/table/stage-components/SignatureHTMLTable.tsx","features/table/stage-components/FieldHTMLTable.tsx","features/table/stage-components/SkolemHTMLTable.tsx","sterling/SterlingSidebar.tsx","features/nav/SterlingNavbar.tsx","sterling/SterlingStage.tsx","sterling/Sterling.tsx","serviceWorker.ts","index.tsx"],"names":["EventDispatcher","_listeners","type","listener","undefined","this","listeners","indexOf","push","event","listenerarray","target","slice","forEach","callback","call","index","splice","SterlingConnection","url","_url","_ws","_auto_reconnect","_auto_reconnect_interval","_connected","_heartbeat_count","_heartbeat_id","_heartbeat_interval","_heartbeat_latency","_heartbeat_timestamp","onclose","close","_initializeConnection","_request","id","expression","data","dispatchEvent","performance","now","length","instance","AlloyInstance","e","message","WebSocket","onopen","_onOpen","bind","_onClose","onerror","_onError","onmessage","_onMessage","_reconnect","_resetHeartbeat","header","_handlePong","_handleEval","_handleXML","send","window","setTimeout","request","clearTimeout","_ping","NoConnection","StaticLayout","CircleLayout","_cx","_cy","_radius","graph","bbox","boundingBox","cx","cy","w","Math","abs","h","r","min","nodes","a","PI","node","x","cos","y","sin","arguments","radius","defaults","source","paths","_defaults","pick","cloneDeep","applyShapeStyleAttributes","cloneShapeStyle","style","clone","isCircleStyle","_cloneCircleStyle","isRectangleStyle","_cloneRectangleStyle","Renderer","ShapeRenderer","_nodes","fill","defaultFill","stroke","defaultStroke","strokeDash","defaultStrokeDash","strokeWidth","defaultStrokeWidth","points","context","setLineDash","lineWidth","fillStyle","strokeStyle","TWOPI","PI3","RectangleRenderer","_width","defaultWidth","_height","defaultHeight","width","height","scale","t","b","l","angle","tana","tan","atan","atan2","region","save","beginPath","w2","h2","point","px","py","rect","round","_doStrokeAndFill","restore","nx","ny","max","h4","dx","dy","DagreLayout","options","g","graphlib","Graph","multigraph","setGraph","nodesep","ranksep","rankdir","setDefaultEdgeLabel","setNode","label","edges","edge","setEdge","layout","nodemap","Map","map","props","hw","hh","get","n","DragManager","canvas","_canvas","_quadtree","d3","_renderers","_transform","_x","_y","drag","container","subject","_dragSubject","on","_dragStart","_drag","_dragEnd","renderers","renderer","reduce","acc","cur","concat","set","addAll","transform","mouse","worldx","invertX","worldy","invertY","invert","add","remove","datum","groups","_findNode","find","shape","containsPoint","k","LinkLabeller","_linkMap","_placement","links","placement","_buildCenterLabels","_buildJoinLabels","_buildSpreadLabels","np","dt","link","labels","filter","isDefined","text","buildCombinedLabel","_bezierBounds","join","LinkLabelRenderer","_links","_color","defaultColor","_font","defaultFont","_highlight","color","font","includes","textAlign","textBaseline","path","p","pointAlong","fillText","LinkRenderer","lowlightStroke","lowlightWidth","_doFill","PI6","NaturalCurveRenderer","_arrowheadSize","partition","highlight","lowlight","_drawLinks","hx","hy","_doStrokeHighlight","_drawArrows","_doFillHighlight","lx","ly","_doStroke","arrowx","arrowy","_doStrokeLowlight","_doFillLowlight","ng","xs","ys","sz","i","moveTo","lineTo","closePath","apply","angleAlong","arrow","_arrow","Path","transformed","CubicBezier","start","c1","c2","end","_start","_c1","_c2","_end","s","u","bezierCurveTo","Line","QuadraticBezier","control","_control","c","quadraticCurveTo","LinkSet","_all","_map","_ind","_addDirectional","_addNonDirectional","_getNonDirectional","targetmap","group","has","len","sourcemap","calculateShapeOffset","center","other","offset","intersect","BundleRouter","_collapse","_factor","srcPoint","trgPoint","sourceShape","_nodeShapeMap","targetShape","selfLoopPoints","_bundleMap","_bundlePoints","_calcalateShapeOffsets","factor","size","sqrt","distance","rt","sign","bx","by","percent","_edgeLinkMap","_groupLinkMap","_linkEdgeMap","_nameNodeMap","_nodeEdgeMap","_ungroupedLinks","Array","from","keys","shapes","buildNodeEdgeMap","ungrouped","allgroups","values","collapsed","edgegroup","edgemap","collapseEdges","edgeset","groupname","sourceName","targetName","updateLinks","calculateLink","recalculated","Set","allBetween","applyLabelStyleAttributes","cloneLabelStyle","applyLinkStyleAttributes","cloneLinkStyle","parseLabelStyles","labelStyles","nest","parent","children","child","_isEdgeStyle","_isNodeStyle","getData","parseShapeStyles","shapeStyles","applyShapeAttributes","EdgeManager","_labeller","_router","_edges","_shapes","_styles","_labels","getPlacement","setPlacement","styles","setData","_recalculateRenderers","updateLinksConnectedTo","setLinkMap","getLinkMap","update","linkset","getLinks","labelstyle","labelRenderer","delete","defaultRenderer","remaining","groupnames","linkStyles","parseLinkStyles","linkStyle","linkRenderer","getUngroupedLinks","_calculateLinkRenderers","_calculateLabelRenderers","HoverManager","_delaunay","_lastLink","_maxDist","_numsections","_onHover","render","linkEdgeMap","Delaunay","x1","y1","x2","y2","Infinity","d","dist","_distance","_setHover","LabelRenderer","match","parseInt","base","floor","CircleRenderer","defaultRadius","d2","arc","NodeManager","Error","_calculateShapeRenderers","labelStyle","available","extractNodes","shapeStyle","shapeRenderer","names","name","AxesRenderer","_axesVisible","_gridVisible","_axisColor","_gridColor","_ticks","_ticksize","_labelpadding","_gridPattern","visible","x0","align","y0","xrange","range","yrange","ratio","tickoffset","xticks","ticks","yticks","tick","ty","lineDashOffset","tx","toString","value","_context","_axes","_linkLabelRenderers","_linkRenderers","_nodeLabelRenderers","_nodeRenderers","_nodeManager","_edgeManager","_dragManager","_hoverManager","_initializeCanvas","axesVisible","router","getRouter","setFactor","getFactor","setLabelPlacement","getLabelPlacement","setEdges","getEdges","setStyles","gridVisible","getComputedStyle","getPropertyValue","_setDimensions","_render","nodeobjs","setNodes","shapeRenderers","setShapes","linkRenderers","labelRenderers","getContext","zoom","scaleExtent","_zoomed","addEventListener","updateEdgesConnectedTo","resize","requestAnimationFrame","rescaleX","rescaleY","clearRect","setAttribute","domain","setTransform","_setTransform","GridLayout","row","col","RowLayout","_groups","ngroup","sterlingSlice","createSlice","initialState","mainView","tableView","graphView","sourceView","welcomeDescription","welcomeTitle","reducers","setGraphView","state","action","payload","setInstance","setMainView","setSourceView","setTableView","actions","asAttribute","atoms","collapseProjections","projections","unprojected","List","dataSlice","addProjection","sig","atom","nextAtom","atm","idx","nxt","previousAtom","removeProjection","sort","alphabetical","setProjection","toggleAsAttribute","field","curr","toggleCollapseProjections","extraReducers","build","addCase","univ","signatures","subTypes","fields","skolems","arity","both","withMutations","findAtom","item","list","localeCompare","POPPER_MODIFIERS","preventOverflow","enabled","hide","COLOR_SCHEMES","specifier","colors","hex","schemes","DEFAULT_COLORS","background","backgroundGradient","strings","foreground","rgb","SignatureTag","signature","nameFunction","className","React","FieldTag","tokens","split","FieldTagEls","icon","iconSize","padding","SkolemTag","skolem","buildFieldTree","hideEmpty","tuples","Fields","Skolems","collapseEdgeStyle","collapseScheme","hideEmptyFields","selected","treeField","treeSkolem","edgeStylingSlice","clearAll","clearCurrent","collapseTreeNode","expandTreeNode","selectTreeNode","setColorScheme","newlink","newlabel","setLabelColor","setLabelSize","isNaN","setStroke","setStrokeWidth","toggleCollapseEdgeStyle","toggleCollapseScheme","toggleHideEmptyFields","builder","buildSkolemTree","defaultScheme","graphSettingsSlice","bundleFactor","collapseEdgeSettings","collapseGraphSettings","edgeLabelPlacement","setBundleFactor","toggleAxesVisible","toggleCollapseEdgeSettings","toggleCollapseGraphSettings","toggleGridVisible","ranker","layoutSlice","setAlign","setNodeSep","setRankDir","setRanker","setRankSep","buildTypeTree","populate","HorizontalAlignment","LayoutDirection","SortDirection","SortMethod","TablesType","collapseNodeStyle","hideDisconnected","hideEmptySets","nodeTree","nodeStylingSlice","setFill","newshape","setHeight","setRadius","setShape","next","convertToShape","setWidth","toggleCollapseNodeStyle","toggleHideDisconnected","toggleHideEmptySets","graphSlice","combineReducers","reducer","sourceSlice","setSelected","SKOLEM_COLORS","buildNameFunction","removeThis","replace","buildSortFunction","method","Size","sorting","sizeSort","direction","Ascending","Alphabetical","alphabeticalSort","Group","groupSort","alignment","Left","collapseData","collapseLayout","collapseTables","dataSelected","highlightSkolems","layoutDirection","Row","removeBuiltin","removeEmpty","primarySort","Descending","secondarySort","skolemColors","tablesType","All","tableSlice","clearSelectedData","deselectData","Select","selectData","setAlignment","setLayoutDirection","setSort","setTableTypes","toggleCollapseData","toggleCollapseLayout","toggleCollapseTables","toggleHighlightSkolems","toggleRemoveBuiltin","toggleRemoveEmpty","toggleRemoveThis","sterlingApp","Evaluator","connection","_connection","_expressions","_pending","_parse","_nextid","error","result","response","trim","_setPending","requestEvaluateExpression","EvaluatorTable","parseResult","key","j","EvaluatorView","_botRef","_textRef","_onDown","textarea","current","selectionStart","history","count","setState","_onEnter","evaluator","evaluate","_onKeyDown","preventDefault","_onUp","_onPending","_setActive","_onReady","expressions","_scrollDown","bottom","scrollIntoView","active","readOnly","_setText","createRef","table","prevProps","prevState","removeEventListener","SuccessIcon","ErrorIcon","content","hoverOpenDelay","intent","Intent","PRIMARY","small","minimal","onClick","clear","title","DANGER","NONE","isTableable","description","ref","autoComplete","placeholder","spellCheck","onKeyDown","Component","SterlingDrawer","Section","collapseIcon","toUpperCase","onToggle","isOpen","keepChildrenMounted","mapDispatch","connector","connect","collapse","flexWrap","maxHeight","overflow","scheme","margin","minWidth","minHeight","LABEL_PLACEMENT_OPTIONS","inline","allowNumericCharactersOnly","minorStepSize","stepSize","majorStepSize","onValueChange","onChange","ALIGN_OPTIONS","DIRECTION_OPTIONS","RANKER_OPTIONS","Object","assign","toArray","projection","Fragment","ellipsize","hasBackdrop","modifiers","position","Position","BOTTOM","usePortal","wrapperTagName","vertical","LabelStyler","_","strVal","onChangeSize","onChangeColor","LEFT","backgroundColor","triangle","mapTreeToNodes","tree","childNodes","isExpanded","isSelected","hasCaret","LinkStyler","onChangeStroke","onChangeStrokeWidth","attr","labelColor","labelSize","fieldTree","skolemTree","isempty","hasskolem","trees","hideFld","secondaryLabel","contents","onNodeClick","onNodeCollapse","onNodeExpand","alignIndicator","Alignment","RIGHT","checked","CircleProps","onSetRadius","RectangleProps","onSetWidth","onSetHeight","ShapeSelector","onSetShape","valueToShape","ShapeStyler","onChangeFill","contentClassName","view","DEFAULT_EDGE_STYLES","DEFAULT_NODE_STYLES","edgeLabels","nodeLabels","settings","NODE_CACHE","_ref","_update","common","isBuiltin","batoms","anyInCommon","toStyle","styletree","existingNodes","nodeCache","attributes","_projections","IMap","project","hasAtoms","edgeFields","isAttribute","labelFields","edgeSkolems","labelSkolems","connected","buildEdge","tuple","middle","labelMap","addLabel","paren","expressionType","joined","projectedAtoms","types","projectable","some","every","AlloyTuple","typeHierarchy","generateGraph","nodeStyles","_buildNodeStyles","edgeStyles","_buildEdgeStyles","Classes","MINIMAL","large","command","fileref","fetchExample","fetch","then","catch","fixedToTop","display","files","file","reader","FileReader","readAsText","rightIcon","click","SourcePlaceholder","alignText","sources","filename","pop","STYLE","githubGist","SyntaxHighlighter","registerLanguage","case_insensitive","keywords","contains","COMMENT","begin","relevance","welcome","language","showLineNumbers","AlloySelect","MultiSelect","ofType","highlightText","query","lastIndex","words","word","escapeRegExpChars","regexp","RegExp","exec","before","rest","AlloyMultiSelect","_filterItem","toLowerCase","_isItemSelected","itemsSelected","_onRemoveTag","tag","onDeselectItem","_onSelectItem","onSelectItem","_renderItem","matchesPredicate","_renderSignature","_renderField","_renderSkolem","_renderList","sigs","items","flds","skls","alpha","builtinSort","renderedSigs","renderItem","renderedFlds","renderedSkls","ulRef","itemsParentRef","disabled","labelElement","handleClick","_renderTag","_tagProps","itemType","clearButton","onClearSelectedItems","sortItems","itemPredicate","itemRenderer","itemListRenderer","onItemSelect","popoverProps","resetOnSelect","scrollToActiveItem","selectedItems","tagInputProps","onRemove","rightElement","tagProps","tagRenderer","zIndex","currentTarget","selectedValue","Signatures","Column","Center","Right","PopoverRow","_buildShadowStyle","thickness","_onMouseEnter","_onMouseLeave","Manager","Reference","onMouseEnter","onMouseLeave","boxShadow","Popper","data-placement","SkolemListPopover","getAlignClass","getLayoutClass","secondSort","filtering","keepSignatures","keepFields","keepSkolems","pass","removeBuiltins","removeEmptys","removeSkolems","elevation","buildTableHeader","bordered","condensed","striped","SignatureHTMLTable","FieldHTMLTable","SkolemHTMLTable","SidebarButton","GraphSidebar","TableSidebar","SourceSidebar","mainview","evalActive","SterlingStage","FocusStyleManager","onlyShowFocusOnTabs","_evaluator","_evaluatorView","_getDrawer","_getNavbar","_getStage","requestCurrentInstance","_resize","drawerOpen","onResize","defaultSize","minSize","maxSize","Boolean","location","hostname","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cad971ad.chunk.js","sourcesContent":["export interface Event {\n    type: string,\n    [key: string]: any\n}\n\nclass EventDispatcher {\n\n    private _listeners?: {[key: string]: ((event: any) => void)[]};\n\n    addEventListener (type: string, listener: (event: any) => void): this {\n\n        if (this._listeners === undefined) this._listeners = {};\n\n        const listeners = this._listeners;\n\n        if (listeners[type] === undefined) {\n            listeners[type] = [];\n        }\n\n        if (listeners[type].indexOf(listener) === -1) {\n            listeners[type].push(listener);\n        }\n\n        return this;\n\n    }\n\n    dispatchEvent (event: Event): this {\n\n        if (this._listeners === undefined) return this;\n\n        const listenerarray = this._listeners[event.type];\n\n        if (listenerarray !== undefined) {\n\n            event.target = this;\n\n            const arraycopy = listenerarray.slice();\n\n            arraycopy.forEach(callback => {\n                callback.call(this, event);\n            });\n\n        }\n\n        return this;\n\n    }\n\n    hasEventListener (type: string, listener: (event: any) => void): boolean {\n\n        if (this._listeners === undefined) return false;\n\n        const listeners = this._listeners;\n\n        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\n    }\n\n    removeEventListener (type: string, listener: (event: any) => void): this {\n\n        if (this._listeners === undefined) return this;\n\n        const listenerarray = this._listeners[type];\n\n        if (listenerarray !== undefined) {\n            const index = listenerarray.indexOf(listener);\n            if (index !== -1) {\n                listenerarray.splice(index, 1);\n            }\n        }\n\n        return this;\n\n    }\n\n}\n\nexport {\n    EventDispatcher\n}\n","import { AlloyInstance } from 'alloy-ts';\nimport { EventDispatcher } from '../util/EventDispatcher';\n\n\n/**\n * Events dispatched by a SterlingConnectiong:\n *   connect: connection established\n *   disconnect: connection lost\n *   error: an error occurred\n *   eval: a response from the evaluator\n *   instance: a new instance received\n */\nabstract class SterlingConnection extends EventDispatcher {\n\n    protected _url: string;\n    protected _ws: WebSocket | null;\n\n    private _auto_reconnect: boolean;\n    private _auto_reconnect_interval: number;\n    private _connected: boolean;\n\n    _heartbeat_count: number;\n    _heartbeat_id: number;\n    _heartbeat_interval: number;\n    _heartbeat_latency: DOMHighResTimeStamp;\n    _heartbeat_timestamp: DOMHighResTimeStamp;\n\n    protected constructor (url: string) {\n\n        super();\n\n        this._url = url;\n        this._ws = null;\n\n        this._auto_reconnect = false;\n        this._auto_reconnect_interval = 5000;\n        this._connected = false;\n\n        this._heartbeat_count = 0;\n        this._heartbeat_id = 0;\n        this._heartbeat_interval = 15000;\n        this._heartbeat_latency = 0;\n        this._heartbeat_timestamp = 0;\n\n    }\n\n    /**\n     * Establish a connection with a data provider\n     */\n    connect (): void {\n\n        if (this._ws) {\n            this._ws.onclose = null;\n            this._ws.close();\n        }\n\n        this._initializeConnection();\n\n    }\n\n    requestCurrentInstance (): boolean {\n\n        return this._request('current');\n\n    }\n\n    requestEvaluateExpression (id: number, expression: string): boolean {\n\n        return this._request(`EVL:${id}:${expression}`);\n\n    }\n\n    requestNextInstance (): boolean {\n\n        return this._request('next');\n\n    }\n\n    private _handleEval (data: string): void {\n\n        this.dispatchEvent({\n            type: 'eval',\n            data: data\n        });\n\n    }\n\n    private _handlePong (): void {\n\n        this._heartbeat_latency += performance.now() - this._heartbeat_timestamp;\n        this._heartbeat_count += 1;\n\n    }\n\n    private _handleXML (data: string): void {\n\n        if (data.length) {\n            try {\n                this.dispatchEvent({\n                    type: 'instance',\n                    instance: new AlloyInstance(data)\n                });\n            } catch (e) {\n                this.dispatchEvent({\n                    type: 'error',\n                    message: 'Invalid instance data'\n                });\n            }\n        }\n\n    }\n\n    private _initializeConnection () {\n\n        this._ws = new WebSocket(this._url);\n        this._ws.onopen = this._onOpen.bind(this);\n        this._ws.onclose = this._onClose.bind(this);\n        this._ws.onerror = this._onError.bind(this);\n        this._ws.onmessage = this._onMessage.bind(this);\n\n    }\n\n    private _onClose (e: Event): void {\n\n        this._connected = false;\n        this._ws = null;\n        if (this._auto_reconnect) this._reconnect();\n        this.dispatchEvent({ type: 'disconnect' });\n\n    }\n\n    private _onError (e: Event): void {\n\n        this.dispatchEvent({ type: 'error' });\n\n    }\n\n    private _onMessage (e: MessageEvent): void {\n\n        this._resetHeartbeat();\n        let header = e.data.slice(0, 4);\n        let data = e.data.slice(4);\n        switch (header) {\n            case 'pong':\n                this._handlePong();\n                break;\n            case 'EVL:':\n                this._handleEval(data);\n                break;\n            case 'XML:':\n                this._handleXML(data);\n                break;\n            default:\n                this.dispatchEvent({\n                    type: 'error',\n                    message: `Unknown response header: ${header}`\n                });\n                break;\n        }\n\n    }\n\n    private _onOpen (e: Event): void {\n\n        this._connected = true;\n        this._resetHeartbeat();\n        this.dispatchEvent({ type: 'connect' });\n\n    }\n\n    private _ping () {\n\n        if (this._ws) {\n            this._heartbeat_timestamp = performance.now();\n            this._ws.send('ping');\n        }\n\n    }\n\n    private _reconnect (): void {\n\n        window.setTimeout(this._initializeConnection.bind(this), this._auto_reconnect_interval);\n\n    }\n\n    private _request (request: string): boolean {\n\n        return this._connected && this._ws\n            ? (this._ws.send(request), true)\n            : false;\n\n    }\n\n    private _resetHeartbeat (): void {\n\n        clearTimeout(this._heartbeat_id);\n        this._heartbeat_id = window.setTimeout(this._ping.bind(this), this._heartbeat_interval);\n\n    }\n\n}\n\nexport {\n    SterlingConnection\n};\n","import { SterlingConnection } from '../sterling/SterlingConnection';\n\nclass NoConnection extends SterlingConnection {\n\n    constructor () {\n        super('');\n    }\n\n    connect (): void {\n    }\n\n    requestCurrentInstance (): boolean {\n        return false;\n    }\n\n    requestEvaluateExpression (id: number, expression: string): boolean {\n        return false;\n    }\n\n    requestNextInstance (): boolean {\n        return false;\n    }\n\n}\n\nexport default NoConnection;\n","class StaticLayout {\n}\nexport { StaticLayout };\n","import { StaticLayout } from './StaticLayout';\nclass CircleLayout extends StaticLayout {\n    constructor() {\n        super();\n        this._cx = 0;\n        this._cy = 0;\n        this._radius = 250;\n    }\n    apply(graph) {\n        const bbox = graph.boundingBox();\n        const cx = (bbox[1] + bbox[3]) / 2;\n        const cy = (bbox[0] + bbox[2]) / 2;\n        const w = Math.abs(bbox[1] - bbox[3]);\n        const h = Math.abs(bbox[0] - bbox[2]);\n        const r = 0.8 * Math.min(w, h) / 2;\n        const nodes = graph.nodes();\n        const a = 2 * Math.PI / nodes.length;\n        nodes.forEach((node, index) => {\n            node.x = cx + r * Math.cos(index * a);\n            node.y = cy + r * Math.sin(index * a);\n        });\n    }\n    cx(cx) {\n        return arguments.length\n            ? (this._cx = cx, this)\n            : this._cx;\n    }\n    cy(cy) {\n        return arguments.length\n            ? (this._cy = cy, this)\n            : this._cy;\n    }\n    radius(radius) {\n        return arguments.length\n            ? (this._radius = radius, this)\n            : this._radius;\n    }\n}\nexport { CircleLayout };\n","import { cloneDeep, defaults as _defaults, pick } from 'lodash';\nfunction equivalentStrokes(a, b) {\n    if (a === undefined && b === undefined)\n        return true;\n    if (a === undefined || b === undefined)\n        return false;\n    return a.length === b.length &&\n        a.every((value, index) => b[index] === value);\n}\nfunction defaults(target, source, paths) {\n    _defaults(target, pick(cloneDeep(source), paths));\n}\nexport { defaults, equivalentStrokes };\n","import { isEqual, pick } from 'lodash';\nimport { defaults } from '../types/util';\n/**\n * Lazily apply shape attributes to another shape style\n * @param source\n * @param target\n */\nfunction applyShapeAttributes(target, source) {\n    if (isCircleStyle(target) && isCircleStyle(source)) {\n        defaults(target, source, ['type', 'radius']);\n        return;\n    }\n    if (isRectangleStyle(target) && isRectangleStyle(source)) {\n        defaults(target, source, ['type', 'width', 'height']);\n        return;\n    }\n    if (!target.type) {\n        if (isCircleStyle(source)) {\n            defaults(target, source, ['type', 'radius']);\n            return;\n        }\n        if (isRectangleStyle(source)) {\n            defaults(target, source, ['type', 'width', 'height']);\n            return;\n        }\n    }\n}\n/**\n * Lazily apply shape style attributes to another shape style.\n * @param target\n * @param source\n */\nfunction applyShapeStyleAttributes(target, source) {\n    defaults(target, source, ['fill', 'stroke', 'strokeDash', 'strokeWidth']);\n}\n/**\n * Create a clone of a shape style\n * @param style\n */\nfunction cloneShapeStyle(style) {\n    let clone = {};\n    if (isCircleStyle(style))\n        clone = _cloneCircleStyle(style);\n    if (isRectangleStyle(style))\n        clone = _cloneRectangleStyle(style);\n    applyShapeStyleAttributes(clone, style);\n    return clone;\n}\nfunction convertToShape(style, type) {\n    const next = {};\n    applyShapeStyleAttributes(next, style);\n    if (type === 'circle') {\n        next.type = 'circle';\n        next.radius = isRectangleStyle(style)\n            ? Math.min(style.width || 35, style.height || 35)\n            : 35;\n    }\n    if (type === 'rectangle') {\n        next.type = 'rectangle';\n        next.width = isCircleStyle(style)\n            ? (style.radius || 40) * 2\n            : 80;\n        next.height = isCircleStyle(style)\n            ? style.radius\n            : 40;\n    }\n    return next;\n}\n/**\n * Returns true if shape styles are equivalent, false otherwise\n * @param a\n * @param b\n */\nfunction equivalentShapeStyles(a, b) {\n    return isEqual(a, b);\n}\n/**\n * Returns true if style is a CircleStyle, false otherwise\n * @param style\n */\nfunction isCircleStyle(style) {\n    return style.type === 'circle';\n}\n/**\n * Returns true is style is a RectangleStyle, false otherwise\n * @param style\n */\nfunction isRectangleStyle(style) {\n    return style.type === 'rectangle';\n}\n/**\n * Clone a circle style (only attributes specific to circles)\n * @param style\n */\nfunction _cloneCircleStyle(style) {\n    return pick(style, ['type', 'radius']);\n}\n/**\n * Clone a rectangle style (only attributes specific to rectangles)\n * @param style\n */\nfunction _cloneRectangleStyle(style) {\n    return pick(style, ['type', 'width', 'height']);\n}\nexport { applyShapeAttributes, applyShapeStyleAttributes, cloneShapeStyle, convertToShape, equivalentShapeStyles, isCircleStyle, isRectangleStyle };\n","class Renderer {\n}\nexport { Renderer };\n","import { Renderer } from '../Renderer';\nclass ShapeRenderer extends Renderer {\n    constructor(style) {\n        super();\n        this._nodes = [];\n        this.fill = ShapeRenderer.defaultFill;\n        this.stroke = ShapeRenderer.defaultStroke;\n        this.strokeDash = ShapeRenderer.defaultStrokeDash;\n        this.strokeWidth = ShapeRenderer.defaultStrokeWidth;\n        if (style) {\n            if (style.fill !== undefined)\n                this.fill = style.fill;\n            if (style.stroke !== undefined)\n                this.stroke = style.stroke;\n            if (style.strokeDash !== undefined)\n                this.strokeDash = style.strokeDash.slice();\n            if (style.strokeWidth !== undefined)\n                this.strokeWidth = style.strokeWidth;\n        }\n    }\n    nodes(points) {\n        return arguments.length\n            ? (this._nodes = points, this)\n            : this._nodes;\n    }\n    _doStrokeAndFill(context) {\n        if (this.strokeDash)\n            context.setLineDash(this.strokeDash);\n        if (this.strokeWidth !== null)\n            context.lineWidth = this.strokeWidth;\n        if (this.fill) {\n            context.fillStyle = this.fill;\n            context.fill();\n        }\n        if (this.stroke && this.strokeWidth) {\n            context.strokeStyle = this.stroke;\n            context.stroke();\n        }\n    }\n}\nShapeRenderer.defaultFill = 'white';\nShapeRenderer.defaultStroke = '#333333';\nShapeRenderer.defaultStrokeDash = null;\nShapeRenderer.defaultStrokeWidth = 1.5;\nexport { ShapeRenderer };\n","import { isRectangleStyle } from '../../styles/ShapeStyle';\nimport { ShapeRenderer } from './ShapeRenderer';\nconst TWOPI = 2 * Math.PI;\nconst PI3 = Math.PI / 3;\nclass RectangleRenderer extends ShapeRenderer {\n    constructor(style) {\n        super(style);\n        this._width = RectangleRenderer.defaultWidth;\n        this._height = RectangleRenderer.defaultHeight;\n        if (style && isRectangleStyle(style)) {\n            if (style.width)\n                this._width = style.width;\n            if (style.height)\n                this._height = style.height;\n        }\n    }\n    containsPoint(node, x, y, scale) {\n        scale = scale || 1;\n        const w = (this._width / scale) / 2;\n        const h = (this._height / scale) / 2;\n        const t = node.y + h;\n        const r = node.x + w;\n        const b = node.y - h;\n        const l = node.x - w;\n        return r >= x && x >= l && t >= y && y >= b;\n    }\n    height(height) {\n        return arguments.length\n            ? (this._height = +height, this)\n            : this._height;\n    }\n    intersect(angle) {\n        while (angle < -Math.PI)\n            angle += TWOPI;\n        while (angle > Math.PI)\n            angle -= TWOPI;\n        const tana = Math.tan(angle);\n        const r = region(angle, this._width, this._height);\n        let x = (r === 1 || r === 2) ? 1 : -1;\n        let y = (r === 3 || r === 4) ? -1 : 1;\n        if (r === 1 || r === 3) {\n            x *= this._width / 2;\n            y *= tana * this._width / 2;\n        }\n        else {\n            x *= this._height / (2 * tana);\n            y *= this._height / 2;\n        }\n        return {\n            x: x,\n            y: y\n        };\n    }\n    render(context, x, y) {\n        if (!this._nodes.length)\n            return;\n        context.save();\n        context.beginPath();\n        const w2 = this._width / 2;\n        const h2 = this._height / 2;\n        this._nodes.forEach(point => {\n            const px = x(point.x);\n            const py = y(point.y);\n            context.rect(Math.round(px - w2) - 0.5, Math.round(py - h2) - 0.5, this._width + 1, this._height + 1);\n        });\n        this._doStrokeAndFill(context);\n        context.restore();\n    }\n    selfLoopPoints(node) {\n        const nx = node.x;\n        const ny = node.y;\n        const w = Math.max(100, Math.min(this._width, 200));\n        const h = Math.min(this._height, 100);\n        const w2 = this._width / 2;\n        const h4 = h / 4;\n        return [{\n                x: nx,\n                y: ny,\n                dx: w2,\n                dy: -h4\n            }, {\n                x: nx,\n                y: ny,\n                dx: w2 + w * Math.cos(-PI3),\n                dy: h * Math.sin(-PI3)\n            }, {\n                x: nx,\n                y: ny,\n                dx: w2 + w * Math.cos(PI3),\n                dy: h * Math.sin(PI3)\n            }, {\n                x: nx,\n                y: ny,\n                dx: w2,\n                dy: h4\n            }];\n    }\n    width(width) {\n        return arguments.length\n            ? (this._width = +width, this)\n            : this._width;\n    }\n}\nRectangleRenderer.defaultWidth = 125;\nRectangleRenderer.defaultHeight = 60;\nfunction region(angle, width, height) {\n    const atan = Math.atan2(height, width);\n    if ((angle > -atan) && (angle <= atan))\n        return 1;\n    else if ((angle > atan) && (angle <= Math.PI - atan))\n        return 2;\n    else if ((angle > Math.PI - atan) || (angle <= -(Math.PI - atan)))\n        return 3;\n    else\n        return 4;\n}\nexport { RectangleRenderer };\n","import { graphlib, layout } from 'dagre';\nimport { RectangleRenderer } from '../../renderers/shapes/RectangleRenderer';\nimport { StaticLayout } from './StaticLayout';\nclass DagreLayout extends StaticLayout {\n    apply(graph, options) {\n        const g = new graphlib.Graph({ multigraph: true });\n        g.setGraph(options ? options : {\n            nodesep: 2 * RectangleRenderer.defaultWidth,\n            ranksep: 2 * RectangleRenderer.defaultWidth,\n            rankdir: 'BT'\n        });\n        g.setDefaultEdgeLabel(() => ({}));\n        graph.nodes().forEach(node => {\n            g.setNode(node.id, {\n                label: node.id,\n                width: RectangleRenderer.defaultWidth,\n                height: RectangleRenderer.defaultHeight\n            });\n        });\n        graph.edges().forEach(edge => {\n            g.setEdge(edge.source, edge.target);\n        });\n        layout(g);\n        const nodemap = new Map(graph.nodes().map(node => [node.id, node]));\n        const props = g.graph();\n        const hw = props.width ? props.width / 2 : 0;\n        const hh = props.height ? props.height / 2 : 0;\n        g.nodes().forEach(id => {\n            const node = nodemap.get(id);\n            if (node) {\n                const n = g.node(node.id);\n                node.x = n.x - hw;\n                node.y = n.y - hh;\n            }\n        });\n    }\n}\nexport { DagreLayout };\n","class EventDispatcher {\n    addEventListener(type, listener) {\n        if (this._listeners === undefined)\n            this._listeners = {};\n        const listeners = this._listeners;\n        if (listeners[type] === undefined) {\n            listeners[type] = [];\n        }\n        if (listeners[type].indexOf(listener) === -1) {\n            listeners[type].push(listener);\n        }\n        return this;\n    }\n    dispatchEvent(event) {\n        if (this._listeners === undefined)\n            return this;\n        const listenerarray = this._listeners[event.type];\n        if (listenerarray !== undefined) {\n            event.target = this;\n            const arraycopy = listenerarray.slice();\n            arraycopy.forEach(callback => {\n                callback.call(this, event);\n            });\n        }\n        return this;\n    }\n    hasEventListener(type, listener) {\n        if (this._listeners === undefined)\n            return false;\n        const listeners = this._listeners;\n        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n    }\n    removeEventListener(type, listener) {\n        if (this._listeners === undefined)\n            return this;\n        const listenerarray = this._listeners[type];\n        if (listenerarray !== undefined) {\n            const index = listenerarray.indexOf(listener);\n            if (index !== -1) {\n                listenerarray.splice(index, 1);\n            }\n        }\n        return this;\n    }\n}\nexport { EventDispatcher };\n","import * as d3 from 'd3';\nimport { EventDispatcher } from '../EventDispatcher';\nclass DragManager extends EventDispatcher {\n    constructor(canvas, x, y) {\n        super();\n        this._canvas = canvas;\n        this._quadtree = d3.quadtree();\n        this._renderers = new Map();\n        this._transform = d3.zoomIdentity;\n        this._x = x;\n        this._y = y;\n        const drag = d3.drag()\n            .container(canvas)\n            .subject(this._dragSubject.bind(this))\n            .on('start', this._dragStart.bind(this))\n            .on('drag', this._drag.bind(this))\n            .on('end', this._dragEnd.bind(this));\n        d3.select(canvas)\n            .call(drag);\n    }\n    setShapes(renderers) {\n        this._renderers = new Map();\n        const nodes = renderers\n            .map(renderer => renderer.nodes())\n            .reduce((acc, cur) => acc.concat(cur), []);\n        renderers.forEach(renderer => {\n            renderer.nodes().forEach(node => {\n                this._renderers.set(node, renderer);\n            });\n        });\n        this._quadtree = d3.quadtree()\n            .x(n => n.x)\n            .y(n => n.y)\n            .addAll(nodes);\n    }\n    setTransform(transform) {\n        this._transform = transform;\n        return this;\n    }\n    _drag() {\n        const mouse = d3.mouse(this._canvas);\n        const node = d3.event.subject;\n        const worldx = this._transform.invertX(mouse[0]);\n        const worldy = this._transform.invertY(mouse[1]);\n        const x = this._x.invert(worldx);\n        const y = this._y.invert(worldy);\n        node.x = x;\n        node.y = y;\n        this.dispatchEvent({\n            type: 'drag',\n            node: node\n        });\n    }\n    _dragEnd() {\n        this._quadtree.add(d3.event.subject);\n        this.dispatchEvent({\n            type: 'end'\n        });\n    }\n    _dragStart() {\n        this._quadtree.remove(d3.event.subject);\n    }\n    _dragSubject(datum, index, groups) {\n        const worldx = this._transform.invertX(d3.event.x);\n        const worldy = this._transform.invertY(d3.event.y);\n        const x = this._x.invert(worldx);\n        const y = this._y.invert(worldy);\n        const nearest = this._findNode(x, y);\n        return nearest || datum;\n    }\n    _findNode(x, y) {\n        const node = this._quadtree.find(x, y);\n        if (node) {\n            const shape = this._renderers.get(node);\n            if (shape && shape.containsPoint(node, x, y, this._transform.k)) {\n                return node;\n            }\n        }\n    }\n}\nexport { DragManager };\n","import { isDefined } from 'ts-is-present';\nimport { Labeller } from './Labeller';\nclass LinkLabeller extends Labeller {\n    constructor() {\n        super();\n        this._linkMap = new Map();\n        this._placement = 'spread';\n    }\n    getPlacement() {\n        return this._placement;\n    }\n    setLinkMap(links) {\n        this._linkMap = links;\n    }\n    setPlacement(placement) {\n        this._placement = placement;\n    }\n    update() {\n        if (this._placement === 'center')\n            this._buildCenterLabels();\n        if (this._placement === 'join')\n            this._buildJoinLabels();\n        if (this._placement === 'spread')\n            this._buildSpreadLabels();\n    }\n    _bezierBounds(np) {\n        if (np < 1)\n            return [0.5, 0];\n        const dt = Math.min(0.8 / (np - 1), 0.1);\n        const size = Math.min(dt * (np - 1), 0.8);\n        const b = 0.5 - size / 2;\n        return [b, dt];\n    }\n    _buildCenterLabels() {\n        this._linkMap.forEach((edges, link) => {\n            link.labels = edges\n                .filter(edge => isDefined(edge.label))\n                .map(edge => ({\n                t: 0.5,\n                text: edge.label\n            }));\n        });\n    }\n    _buildJoinLabels() {\n        this._linkMap.forEach((edges, link) => {\n            link.labels = [{\n                    text: buildCombinedLabel(edges),\n                    t: 0.5\n                }];\n        });\n    }\n    _buildSpreadLabels() {\n        this._linkMap.forEach((edges, link) => {\n            if (edges.length) {\n                const [b, dt] = this._bezierBounds(edges.length);\n                link.labels = edges\n                    .filter(edge => isDefined(edge.label))\n                    .map((edge, index) => ({\n                    t: b + index * dt,\n                    text: edge.label\n                }));\n            }\n        });\n    }\n}\nfunction buildCombinedLabel(edges) {\n    return edges\n        .map(edge => edge.label)\n        .filter(isDefined)\n        .join(', ');\n}\nexport { LinkLabeller };\n","import { Renderer } from '../Renderer';\nclass LinkLabelRenderer extends Renderer {\n    constructor(style) {\n        super();\n        this._links = [];\n        this._color = LinkLabelRenderer.defaultColor;\n        this._font = LinkLabelRenderer.defaultFont;\n        this._highlight = null;\n        if (style) {\n            if (style.color)\n                this._color = style.color;\n            if (style.font)\n                this._font = style.font;\n        }\n    }\n    highlight(link) {\n        this._highlight = link;\n    }\n    links(links) {\n        return arguments.length\n            ? (this._links = links, this)\n            : this._links;\n    }\n    render(context, x, y) {\n        if (!this._links.length)\n            return;\n        const links = this._highlight === null\n            ? this._links\n            : this._links.includes(this._highlight) ? [this._highlight] : [];\n        if (links.length) {\n            context.save();\n            context.beginPath();\n            if (this._color)\n                context.fillStyle = this._color;\n            context.font = this._font;\n            context.textAlign = 'center';\n            context.textBaseline = 'middle';\n            links.forEach(link => {\n                const path = link.path;\n                if (path) {\n                    link.labels.forEach(label => {\n                        const p = path.pointAlong(label.t, x, y);\n                        context.fillText(label.text, p.x, p.y);\n                    });\n                }\n            });\n        }\n    }\n}\nLinkLabelRenderer.defaultColor = '#333333';\nLinkLabelRenderer.defaultFont = '14px sans-serif';\nexport { LinkLabelRenderer };\n","import { Renderer } from '../Renderer';\nclass LinkRenderer extends Renderer {\n    constructor(style) {\n        super();\n        this._links = [];\n        this.stroke = '#333333';\n        this.strokeDash = null;\n        this.strokeWidth = null;\n        this.lowlightStroke = '#777777';\n        this.lowlightWidth = 1;\n        if (style) {\n            if (style.stroke)\n                this.stroke = style.stroke;\n            if (style.strokeDash)\n                this.strokeDash = style.strokeDash;\n            if (style.strokeWidth)\n                this.strokeWidth = style.strokeWidth;\n        }\n    }\n    links(links) {\n        return arguments.length\n            ? (this._links = links, this)\n            : this._links;\n    }\n    _doFill(context) {\n        if (this.stroke)\n            context.fillStyle = this.stroke;\n        context.fill();\n    }\n    _doFillHighlight(context) {\n        this._doFill(context);\n    }\n    _doFillLowlight(context) {\n        context.fillStyle = this.lowlightStroke;\n        context.fill();\n    }\n    _doStroke(context) {\n        if (this.strokeDash)\n            context.setLineDash(this.strokeDash);\n        if (this.strokeWidth)\n            context.lineWidth = this.strokeWidth;\n        context.strokeStyle = this.stroke;\n        context.stroke();\n    }\n    _doStrokeHighlight(context) {\n        if (this.strokeDash)\n            context.setLineDash(this.strokeDash);\n        if (this.strokeWidth)\n            context.lineWidth = 2 * this.strokeWidth;\n        context.strokeStyle = this.stroke;\n        context.stroke();\n    }\n    _doStrokeLowlight(context) {\n        if (this.strokeDash)\n            context.setLineDash(this.strokeDash);\n        if (this.strokeWidth)\n            context.lineWidth = this.strokeWidth;\n        context.strokeStyle = this.lowlightStroke;\n        context.lineWidth = this.lowlightWidth;\n        context.stroke();\n    }\n}\nexport { LinkRenderer };\n","import { LinkRenderer } from './LinkRenderer';\nimport { partition } from 'lodash';\nconst PI6 = Math.PI / 6;\nclass NaturalCurveRenderer extends LinkRenderer {\n    constructor(style) {\n        super(style);\n        this._arrowheadSize = 10;\n        this._highlight = null;\n    }\n    render(context, x, y) {\n        context.save();\n        const [highlight, lowlight] = partition(this._links, link => link === this._highlight);\n        if (highlight.length) {\n            context.beginPath();\n            const [hx, hy] = this._drawLinks(highlight, context, x, y);\n            this._doStrokeHighlight(context);\n            context.beginPath();\n            this._drawArrows(hx, hy, context);\n            this._doStrokeHighlight(context);\n            this._doFillHighlight(context);\n            context.beginPath();\n            const [lx, ly] = this._drawLinks(lowlight, context, x, y);\n            this._doStroke(context);\n            context.beginPath();\n            this._drawArrows(lx, ly, context);\n            this._doStroke(context);\n            this._doFill(context);\n        }\n        else {\n            context.beginPath();\n            const [arrowx, arrowy] = this._drawLinks(lowlight, context, x, y);\n            if (this._highlight === null) {\n                this._doStroke(context);\n                context.beginPath();\n                this._drawArrows(arrowx, arrowy, context);\n                this._doStroke(context);\n                this._doFill(context);\n            }\n            else {\n                this._doStrokeLowlight(context);\n                context.beginPath();\n                this._drawArrows(arrowx, arrowy, context);\n                this._doStrokeLowlight(context);\n                this._doFillLowlight(context);\n            }\n        }\n        context.restore();\n    }\n    highlight(link) {\n        this._highlight = link;\n    }\n    _arrow(x, y, ng, xs, ys) {\n        const sz = this._arrowheadSize;\n        xs.push(x - sz * Math.sin(ng - PI6));\n        ys.push(y - sz * Math.cos(ng - PI6));\n        xs.push(x);\n        ys.push(y);\n        xs.push(x - sz * Math.sin(ng + PI6));\n        ys.push(y - sz * Math.cos(ng + PI6));\n    }\n    _drawArrows(x, y, context) {\n        const n = x.length;\n        for (let i = 0; i < n; i += 3) {\n            context.moveTo(x[i], y[i]);\n            context.lineTo(x[i + 1], y[i + 1]);\n            context.lineTo(x[i + 2], y[i + 2]);\n            context.closePath();\n        }\n    }\n    _drawLinks(links, context, x, y) {\n        const arrowx = [];\n        const arrowy = [];\n        links.forEach(link => {\n            const path = link.path;\n            if (path) {\n                path.apply(context, x, y);\n                const angle = path.angleAlong(1, x, y) + Math.PI;\n                const arrow = path.pointAlong(1, x, y);\n                this._arrow(arrow.x, arrow.y, angle, arrowx, arrowy);\n            }\n        });\n        return [arrowx, arrowy];\n    }\n}\nexport { NaturalCurveRenderer };\n","class Path {\n}\nfunction transformed(p, x, y) {\n    return {\n        x: x(p.x) + (p.dx ? p.dx : 0),\n        y: y(p.y) + (p.dy ? p.dy : 0)\n    };\n}\nexport { Path, transformed };\n","import { Path, transformed } from './Path';\nclass CubicBezier extends Path {\n    constructor(start, c1, c2, end) {\n        super();\n        this._start = start;\n        this._c1 = c1;\n        this._c2 = c2;\n        this._end = end;\n    }\n    angleAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const c1 = transformed(this._c1, x, y);\n        const c2 = transformed(this._c2, x, y);\n        const e = transformed(this._end, x, y);\n        const u = 1 - t;\n        const dx = u * u * (c1.x - s.x) + 2 * t * u * (c2.x - c1.x) + t * t * (e.x - c2.x);\n        const dy = u * u * (c1.y - s.y) + 2 * t * u * (c2.y - c1.y) + t * t * (e.y - c2.y);\n        return Math.atan2(dx, dy) - Math.PI;\n    }\n    apply(context, x, y) {\n        const s = transformed(this._start, x, y);\n        const c1 = transformed(this._c1, x, y);\n        const c2 = transformed(this._c2, x, y);\n        const e = transformed(this._end, x, y);\n        context.moveTo(s.x, s.y);\n        context.bezierCurveTo(c1.x, c1.y, c2.x, c2.y, e.x, e.y);\n    }\n    pointAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const c1 = transformed(this._c1, x, y);\n        const c2 = transformed(this._c2, x, y);\n        const e = transformed(this._end, x, y);\n        const u = 1 - t;\n        return {\n            x: u * u * u * s.x + 3 * t * u * u * c1.x + 3 * t * t * u * c2.x + t * t * t * e.x,\n            y: u * u * u * s.y + 3 * t * u * u * c1.y + 3 * t * t * u * c2.y + t * t * t * e.y\n        };\n    }\n    points() {\n        return [this._start, this._c1, this._c2, this._end];\n    }\n}\nexport { CubicBezier };\n","import { Path, transformed } from './Path';\nclass Line extends Path {\n    constructor(start, end) {\n        super();\n        this._start = start;\n        this._end = end;\n    }\n    angleAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const e = transformed(this._end, x, y);\n        return Math.atan2(s.x - e.x, s.y - e.y);\n    }\n    apply(context, x, y) {\n        const s = transformed(this._start, x, y);\n        const e = transformed(this._end, x, y);\n        context.moveTo(s.x, s.y);\n        context.lineTo(e.x, e.y);\n    }\n    pointAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const e = transformed(this._end, x, y);\n        return {\n            x: s.x + t * (e.x - s.x),\n            y: s.y + t * (e.y - s.y)\n        };\n    }\n    points() {\n        return [this._start, this._end];\n    }\n}\nexport { Line };\n","import { Path, transformed } from './Path';\nclass QuadraticBezier extends Path {\n    constructor(start, control, end) {\n        super();\n        this._start = start;\n        this._control = control;\n        this._end = end;\n    }\n    angleAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const c = transformed(this._control, x, y);\n        const e = transformed(this._end, x, y);\n        const u = 1 - t;\n        const dx = 2 * u * (c.x - s.x) + 2 * t * (e.x - c.x);\n        const dy = 2 * u * (c.y - s.y) + 2 * t * (e.y - c.y);\n        return Math.atan2(dx, dy) - Math.PI;\n    }\n    apply(context, x, y) {\n        const s = transformed(this._start, x, y);\n        const c = transformed(this._control, x, y);\n        const e = transformed(this._end, x, y);\n        context.moveTo(s.x, s.y);\n        context.quadraticCurveTo(c.x, c.y, e.x, e.y);\n    }\n    pointAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const c = transformed(this._control, x, y);\n        const e = transformed(this._end, x, y);\n        const u = 1 - t;\n        return {\n            x: u * u * s.x + 2 * u * t * c.x + t * t * e.x,\n            y: u * u * s.y + 2 * u * t * c.y + t * t * e.y\n        };\n    }\n    points() {\n        return [this._start, this._control, this._end];\n    }\n}\nexport { QuadraticBezier };\n","class LinkSet {\n    constructor() {\n        this._all = new Map();\n        this._map = new Map();\n        this._ind = new Map();\n    }\n    /**\n     * Add a link that goes from source to target.\n     * @param source The source Node\n     * @param target The target Node\n     * @param link The link connecting the source and target nodes\n     */\n    add(source, target, link) {\n        this._addDirectional(source, target, link);\n        this._addNonDirectional(source, target, link);\n    }\n    /**\n     * Get all links between nodes a and b, regardless of direction\n     * @param a A Node\n     * @param b A node\n     */\n    allBetween(a, b) {\n        return this._getNonDirectional(a, b);\n    }\n    /**\n     * Get links beginning at source and ending at target\n     * @param source The source Node\n     * @param target The target Node\n     */\n    between(source, target) {\n        const targetmap = this._map.get(source);\n        return targetmap\n            ? targetmap.get(target) || []\n            : [];\n    }\n    /**\n     * Execute the provided callback for every link in the set\n     * @param callback The function to execute for each link. Arguments are:\n     * * link: The current link being processed\n     * * source: The source Node\n     * * target: The target Node\n     * * group: All link\n     */\n    forEach(callback) {\n        this._map.forEach((targetmap, source) => {\n            targetmap.forEach((links, target) => {\n                const group = this._getNonDirectional(source, target);\n                links.forEach(link => callback(link, source, target, group));\n            });\n        });\n    }\n    /**\n     * Get the index of this link among all links that connect the same\n     * two nodes. Indices are signed to indicate direction groups. Returns\n     * undefined if link is not in set.\n     * @param link The link\n     */\n    indexOf(link) {\n        return this._ind.get(link);\n    }\n    _addDirectional(source, target, link) {\n        if (!this._map.has(source))\n            this._map.set(source, new Map());\n        const targetmap = this._map.get(source);\n        if (!targetmap.has(target))\n            targetmap.set(target, []);\n        targetmap.get(target).push(link);\n    }\n    _addNonDirectional(source, target, link) {\n        // Look for source -> target -> links\n        if (this._all.has(source)) {\n            const targetmap = this._all.get(source);\n            if (!targetmap.has(target))\n                targetmap.set(target, []);\n            const len = targetmap.get(target).push(link);\n            this._ind.set(link, len - 1);\n            return;\n        }\n        // Look for target -> source -> links\n        if (this._all.has(target)) {\n            const sourcemap = this._all.get(target);\n            if (!sourcemap.has(source))\n                sourcemap.set(source, []);\n            const len = sourcemap.get(source).push(link);\n            this._ind.set(link, 1 - len);\n            return;\n        }\n        // Neither exists, so create source -> target -> links\n        this._all.set(source, new Map([[target, [link]]]));\n        this._ind.set(link, 0);\n    }\n    _getNonDirectional(source, target) {\n        if (this._all.has(source)) {\n            const targetmap = this._all.get(source);\n            if (targetmap.has(target)) {\n                return targetmap.get(target);\n            }\n        }\n        if (this._all.has(target)) {\n            const sourcemap = this._all.get(target);\n            if (sourcemap.has(source)) {\n                return sourcemap.get(source);\n            }\n        }\n        return [];\n    }\n}\nexport { LinkSet };\n","import { isDefined } from 'ts-is-present';\nimport { LinkSet } from './LinkSet';\nclass Router {\n    constructor() {\n        this._bundleMap = new LinkSet();\n        this._edgeLinkMap = new Map();\n        this._groupLinkMap = new Map();\n        this._linkEdgeMap = new Map();\n        this._nameNodeMap = new Map();\n        this._nodeEdgeMap = new Map();\n        this._ungroupedLinks = [];\n        this._collapse = true;\n        this._nodeShapeMap = new Map();\n    }\n    /**\n     * Get all links in the provided groups. If no groups are provided, all\n     * links are returned.\n     * @param groups An array of group names\n     */\n    getLinks(groups) {\n        if (groups) {\n            return groups\n                .map(group => this._groupLinkMap.get(group))\n                .filter(isDefined)\n                .reduce((acc, cur) => acc.concat(cur), []);\n        }\n        return Array.from(this._linkEdgeMap.keys());\n    }\n    /**\n     * Get a map of links to edge arrays. A single link can be used to represent\n     * multiple edges, and this map can be used to determine which edges are\n     * represented by any given link.\n     */\n    getLinkMap() {\n        return this._linkEdgeMap;\n    }\n    /**\n     * Get all links whose edges are not part of a group\n     */\n    getUngroupedLinks() {\n        return this._ungroupedLinks;\n    }\n    /**\n     * Set the nodes and edges and recalculate all links.\n     * @param nodes An array of nodes\n     * @param edges An array of edges\n     * @param shapes The shape renderers used to render the nodes\n     */\n    setData(nodes, edges, shapes) {\n        // Create a map of node names to nodes\n        this._bundleMap = new LinkSet();\n        this._edgeLinkMap = new Map();\n        this._groupLinkMap = new Map();\n        this._linkEdgeMap = new Map();\n        this._nameNodeMap = new Map(nodes.map(node => [node.id, node]));\n        this._nodeEdgeMap = buildNodeEdgeMap(this._nameNodeMap, edges);\n        this._ungroupedLinks = [];\n        // Create the map of nodes to shapes, which subclasses will\n        // likely need when calculating routes\n        this._nodeShapeMap = new Map();\n        shapes.forEach(shape => shape.nodes().forEach(node => this._nodeShapeMap.set(node, shape)));\n        // Place edges into groups that represent collapsed edges\n        const collapsed = this._collapse ? collapseEdges(edges) : edges.map(edge => [edge]);\n        // Create a single link for each set of edges\n        collapsed.forEach((edgeset) => {\n            if (edgeset.length) {\n                const groupname = edgeset[0].group;\n                const sourceName = edgeset[0].source;\n                const targetName = edgeset[0].target;\n                const source = this._nameNodeMap.get(sourceName);\n                const target = this._nameNodeMap.get(targetName);\n                if (source && target) {\n                    // Create the link (initially empty)\n                    const link = {\n                        path: undefined,\n                        labels: []\n                    };\n                    // Save the link -> edgeset\n                    this._linkEdgeMap.set(link, edgeset);\n                    // Save the edge -> link\n                    edgeset.forEach(edge => {\n                        this._edgeLinkMap.set(edge, link);\n                    });\n                    // Save to bundle map\n                    this._bundleMap.add(source, target, link);\n                    // Save to group\n                    if (groupname) {\n                        if (!this._groupLinkMap.has(groupname))\n                            this._groupLinkMap.set(groupname, []);\n                        this._groupLinkMap.get(groupname).push(link);\n                    }\n                    else {\n                        this._ungroupedLinks.push(link);\n                    }\n                }\n            }\n        });\n        this.updateLinks();\n    }\n    /**\n     * Calculate all links\n     */\n    updateLinks() {\n        this._bundleMap.forEach(this.calculateLink.bind(this));\n    }\n    /**\n     * Calculate links connected to the given node. Returns the array of links\n     * that were recalculated.\n     * @param node A node\n     */\n    updateLinksConnectedTo(node) {\n        // Get the set of edges that connect to the node\n        const edges = this._nodeEdgeMap.get(node);\n        if (edges) {\n            const recalculated = new Set();\n            edges.forEach(edge => {\n                const link = this._edgeLinkMap.get(edge);\n                if (link && !recalculated.has(link)) {\n                    const source = this._nameNodeMap.get(edge.source);\n                    const target = this._nameNodeMap.get(edge.target);\n                    if (source && target) {\n                        const group = this._bundleMap.allBetween(source, target);\n                        this.calculateLink(link, source, target, group);\n                    }\n                    recalculated.add(link);\n                }\n            });\n            return Array.from(recalculated);\n        }\n        return [];\n    }\n    /**\n     * Calculate the pixel offsets for the first and last points of a link.\n     * These offsets place links (the origins and arrowheads) at the edges\n     * of the shapes rather than the centers.\n     * @param link The link to process\n     * @param source The source point shape renderer\n     * @param target The target point shape renderer\n     * @private\n     */\n    _calcalateShapeOffsets(link, source, target) {\n        const points = link.path ? link.path.points() : [];\n        if (points.length < 2)\n            return;\n        if (source) {\n            const src = points[0];\n            const nxt = points[1];\n            calculateShapeOffset(src, nxt, source);\n        }\n        if (target) {\n            const trg = points[points.length - 1];\n            const prv = points[points.length - 2];\n            calculateShapeOffset(trg, prv, target);\n        }\n    }\n}\nfunction buildNodeEdgeMap(nodes, edges) {\n    const map = new Map();\n    edges.forEach(edge => {\n        const source = nodes.get(edge.source);\n        const target = nodes.get(edge.target);\n        if (source && target) {\n            if (!map.has(source))\n                map.set(source, []);\n            if (!map.has(target))\n                map.set(target, []);\n            map.get(source).push(edge);\n            map.get(target).push(edge);\n        }\n    });\n    return map;\n}\nfunction calculateShapeOffset(center, other, shape) {\n    const ng = Math.atan2(center.y - other.y, other.x - center.x);\n    const offset = shape.intersect(ng);\n    center.dx = offset.x;\n    center.dy = offset.y;\n}\nfunction collapseEdges(edges) {\n    const groups = new Map();\n    const ungrouped = [];\n    // Place edges into groups\n    edges.forEach(edge => {\n        if (edge.group) {\n            if (!groups.has(edge.group))\n                groups.set(edge.group, []);\n            groups.get(edge.group).push(edge);\n        }\n        else {\n            ungrouped.push(edge);\n        }\n    });\n    // For each group, collapse edges that have the same source and target\n    const allgroups = [ungrouped, ...Array.from(groups.values())];\n    const collapsed = [];\n    allgroups.forEach(edgegroup => {\n        const edgemap = new Map();\n        edgegroup.forEach(edge => {\n            const id = edge.source + edge.target;\n            if (!edgemap.has(id))\n                edgemap.set(id, []);\n            edgemap.get(id).push(edge);\n        });\n        collapsed.push(...Array.from(edgemap.values()));\n    });\n    return collapsed;\n}\nexport { Router };\n","import { CubicBezier } from '../paths/CubicBezier';\nimport { Line } from '../paths/Line';\nimport { QuadraticBezier } from '../paths/QuadraticBezier';\nimport { distance } from '../types/Point';\nimport { Router } from './Router';\nclass BundleRouter extends Router {\n    constructor() {\n        super();\n        this._collapse = true;\n        this._factor = 0.25;\n    }\n    calculateLink(link, source, target, group) {\n        const srcPoint = {\n            x: source.x,\n            y: source.y\n        };\n        const trgPoint = {\n            x: target.x,\n            y: target.y\n        };\n        const sourceShape = this._nodeShapeMap.get(source);\n        const targetShape = this._nodeShapeMap.get(target);\n        if (source === target && sourceShape) {\n            const points = sourceShape.selfLoopPoints(source);\n            link.path = new CubicBezier(points[0], points[1], points[2], points[3]);\n        }\n        else {\n            const index = this._bundleMap.indexOf(link);\n            const points = index !== undefined && group.length > 1\n                ? this._bundlePoints(srcPoint, trgPoint, index, group.length)\n                : [srcPoint, trgPoint];\n            if (points.length === 2) {\n                link.path = new Line(points[0], points[1]);\n            }\n            if (points.length === 3) {\n                link.path = new QuadraticBezier(points[0], points[1], points[2]);\n            }\n            this._calcalateShapeOffsets(link, sourceShape, targetShape);\n        }\n    }\n    getFactor() {\n        return this._factor;\n    }\n    setFactor(factor) {\n        this._factor = factor;\n    }\n    _bundlePoints(source, target, index, length) {\n        if (this._factor < 0.005)\n            return [source, target];\n        // Calculate the bundle width based on distance between source and target nodes\n        const size = this._factor * distance(source, target);\n        // Calculate perpendicular angle\n        let rt = Math.sign(index) || 1;\n        let ng = Math.atan2(target.y - source.y, target.x - source.x) + rt * Math.PI / 2;\n        // Calculate center point\n        const cx = (source.x + target.x) / 2;\n        const cy = (source.y + target.y) / 2;\n        // Calculate \"bottom\" point\n        const bx = cx + (size / 2) * Math.cos(ng);\n        const by = cy + (size / 2) * Math.sin(ng);\n        // Flip the angle by 180 degrees\n        ng -= Math.PI;\n        // Translate based on index percentage\n        const percent = Math.abs(index) / (length - 1);\n        const mid = {\n            x: bx + percent * size * Math.cos(ng),\n            y: by + percent * size * Math.sin(ng)\n        };\n        return [source, mid, target];\n    }\n}\nexport { BundleRouter };\n","function distance(a, b) {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    return Math.sqrt(x * x + y * y);\n}\nexport { distance };\n","import { isEqual } from 'lodash';\nimport { defaults } from '../types/util';\n/**\n * Lazily apply style attributes to another label style\n * @param source\n * @param target\n */\nfunction applyLabelStyleAttributes(target, source) {\n    defaults(target, source, ['font', 'color']);\n}\n/**\n * Create a clone of a label style\n * @param style\n */\nfunction cloneLabelStyle(style) {\n    const clone = {};\n    applyLabelStyleAttributes(clone, style);\n    return clone;\n}\n/**\n * Returns true if the styles are equivalent, false otherwise\n * @param a\n * @param b\n */\nfunction equivalentLabelStyles(a, b) {\n    return isEqual(a, b);\n}\nexport { applyLabelStyleAttributes, cloneLabelStyle, equivalentLabelStyles };\n","import { equivalentStrokes } from '../types/util';\nimport { defaults } from '../types/util';\nfunction applyLinkStyleAttributes(target, source) {\n    defaults(target, source, ['stroke', 'strokeDash', 'strokeWidth']);\n}\nfunction cloneLinkStyle(style) {\n    const clone = {};\n    applyLinkStyleAttributes(clone, style);\n    return clone;\n}\nfunction equivalentLinkStyles(a, b) {\n    return a.stroke === b.stroke\n        && equivalentStrokes(a.strokeDash, b.strokeDash)\n        && a.strokeWidth === b.strokeWidth;\n}\nexport { applyLinkStyleAttributes, cloneLinkStyle, equivalentLinkStyles };\n","import { applyLabelStyleAttributes, cloneLabelStyle } from './LabelStyle';\nimport { applyLinkStyleAttributes, cloneLinkStyle } from './LinkStyle';\nimport { applyShapeAttributes, applyShapeStyleAttributes, cloneShapeStyle } from './ShapeStyle';\n// Helper functions\nfunction _isEdgeStyle(style) {\n    return style.groups !== undefined;\n}\nfunction _isNodeStyle(style) {\n    return style.nodes !== undefined;\n}\n// Parsing functions\nfunction parseLabelStyles(style) {\n    const labelStyles = new Map();\n    const getData = (style) => {\n        if (_isEdgeStyle(style))\n            return style.groups;\n        if (_isNodeStyle(style))\n            return style.nodes;\n        return [];\n    };\n    const nest = (style, parent) => {\n        let clone = cloneLabelStyle(style.label || {});\n        if (parent)\n            applyLabelStyleAttributes(clone, parent);\n        if (style.children) {\n            style.children.forEach((child) => {\n                nest(child, clone);\n            });\n        }\n        labelStyles.set(clone, getData(style));\n    };\n    nest(style);\n    return labelStyles;\n}\nfunction parseLinkStyles(style) {\n    const linkStyles = new Map();\n    const nest = (style, parent) => {\n        let clone = cloneLinkStyle(style.link || {});\n        if (parent)\n            applyLinkStyleAttributes(clone, parent);\n        if (style.children) {\n            style.children.forEach(child => {\n                nest(child, clone);\n            });\n        }\n        linkStyles.set(clone, style.groups);\n    };\n    nest(style);\n    return linkStyles;\n}\nfunction parseShapeStyles(style) {\n    const shapeStyles = new Map();\n    const nest = (style, parent) => {\n        let clone = cloneShapeStyle(style.shape || {});\n        if (parent) {\n            applyShapeAttributes(clone, parent);\n            applyShapeStyleAttributes(clone, parent);\n        }\n        if (style.children) {\n            style.children.forEach(child => {\n                nest(child, clone);\n            });\n        }\n        shapeStyles.set(clone, style.nodes);\n    };\n    nest(style);\n    return shapeStyles;\n}\nexport { parseLabelStyles, parseLinkStyles, parseShapeStyles };\n","import { LinkLabeller } from '../labellers/LinkLabeller';\nimport { LinkLabelRenderer } from '../renderers/labels/LinkLabelRenderer';\nimport { NaturalCurveRenderer } from '../renderers/links/NaturalCurveRenderer';\nimport { BundleRouter } from '../routers/BundleRouter';\nimport { parseLabelStyles, parseLinkStyles } from '../styles/StyleParsers';\nclass EdgeManager {\n    constructor() {\n        this._labeller = new LinkLabeller();\n        this._router = new BundleRouter();\n        this._nodes = [];\n        this._edges = [];\n        this._shapes = [];\n        this._styles = [];\n        this._links = [];\n        this._labels = [];\n    }\n    getEdges() {\n        return this._edges;\n    }\n    getLabelPlacement() {\n        return this._labeller.getPlacement();\n    }\n    getRouter() {\n        return this._router;\n    }\n    labelRenderers() {\n        return this._labels;\n    }\n    linkRenderers() {\n        return this._links;\n    }\n    setEdges(edges) {\n        this._edges = edges;\n        return this;\n    }\n    setLabelPlacement(placement) {\n        this._labeller.setPlacement(placement);\n        return this;\n    }\n    setNodes(nodes) {\n        this._nodes = nodes;\n        return this;\n    }\n    setShapes(shapes) {\n        this._shapes = shapes;\n        return this;\n    }\n    setStyles(styles) {\n        this._styles = styles;\n        return this;\n    }\n    update() {\n        // Reroute links\n        this._router.setData(this._nodes, this._edges, this._shapes);\n        // Recalculate renderers\n        this._recalculateRenderers();\n    }\n    updateEdgesConnectedTo(node) {\n        this._router.updateLinksConnectedTo(node);\n    }\n    _calculateLabelRenderers() {\n        // Recalculate label placement\n        this._labeller.setLinkMap(this._router.getLinkMap());\n        this._labeller.update();\n        // An array to store renderers\n        const renderers = [];\n        // Create a set of all links\n        const linkset = new Set(this._router.getLinks());\n        // Flatten styles and build renderers\n        this._styles.forEach(style => {\n            parseLabelStyles(style).forEach((groups, labelstyle) => {\n                // Create the renderer\n                const labelRenderer = new LinkLabelRenderer(labelstyle);\n                // Get the combined list of links in all groups this\n                // renderer is responsible for\n                const links = this._router.getLinks(groups);\n                // Remove these links from the link set\n                links.forEach(link => linkset.delete(link));\n                // Set the links for this renderer\n                labelRenderer.links(links);\n                // Add to the list of renderers\n                renderers.push(labelRenderer);\n            });\n        });\n        // Create a default renderer for links not yet assigned\n        if (linkset.size > 0) {\n            const defaultRenderer = new LinkLabelRenderer();\n            const remaining = Array.from(linkset.values());\n            defaultRenderer.links(remaining);\n            renderers.push(defaultRenderer);\n        }\n        return renderers;\n    }\n    _calculateLinkRenderers() {\n        // An array to store renderers\n        const renderers = [];\n        // Create a set of all group names in order to keep track of groups\n        // that have been assigned to a renderer\n        const groupnames = new Set();\n        this._edges.forEach(edge => {\n            if (edge.group)\n                groupnames.add(edge.group);\n        });\n        // Flatten styles and build renderers\n        this._styles.forEach(style => {\n            parseLinkStyles(style).forEach((groups, linkStyle) => {\n                // Create the renderer\n                const linkRenderer = new NaturalCurveRenderer(linkStyle);\n                // Get the links associated with these groups\n                const links = this._router.getLinks(groups);\n                // Assign the links to the renderer\n                linkRenderer.links(links);\n                // Add the renderer to the list\n                renderers.push(linkRenderer);\n                // Remove groups from set of group names\n                groups.forEach(group => groupnames.delete(group));\n            });\n        });\n        // Create a default renderer for links that are not part of a\n        // styling or whose group does not have a style defined\n        const defaultRenderer = new NaturalCurveRenderer();\n        const links = this._router\n            .getLinks(Array.from(groupnames))\n            .concat(this._router.getUngroupedLinks());\n        defaultRenderer.links(links);\n        renderers.push(defaultRenderer);\n        return renderers;\n    }\n    _recalculateRenderers() {\n        // Create new renderers\n        this._links = this._calculateLinkRenderers();\n        this._labels = this._calculateLabelRenderers();\n    }\n}\nexport { EdgeManager };\n","import * as d3 from 'd3';\nimport { Delaunay } from 'd3-delaunay';\nimport { EventDispatcher } from '../EventDispatcher';\nclass HoverManager extends EventDispatcher {\n    constructor(canvas, x, y) {\n        super();\n        this._canvas = canvas;\n        this._delaunay = null;\n        this._links = [];\n        this._transform = d3.zoomIdentity;\n        this._x = x;\n        this._y = y;\n        this._lastLink = null;\n        this._maxDist = 25;\n        this._numsections = 25;\n        d3.select(this._canvas)\n            .on('mousemove', this._onHover.bind(this));\n    }\n    render(context) {\n        if (this._delaunay) {\n            context.save();\n            this._delaunay.render(context);\n            context.strokeStyle = 'red';\n            context.lineWidth = 2;\n            context.stroke();\n            context.restore();\n        }\n    }\n    setData(linkEdgeMap) {\n        // Array of points\n        const points = [];\n        this._links = [];\n        // Create a bunch of control points for each link\n        for (let link of linkEdgeMap.keys()) {\n            const path = link.path;\n            if (path) {\n                const p = 1 / this._numsections;\n                for (let i = 0; i <= this._numsections; ++i) {\n                    points.push(path.pointAlong(p * i, this._x, this._y));\n                    this._links.push(link);\n                }\n            }\n        }\n        // Create the triangulation\n        this._delaunay = Delaunay.from(points, p => p.x, p => p.y);\n        return this;\n    }\n    setTransform(transform) {\n        this._transform = transform;\n        return this;\n    }\n    _distance(x, y, path) {\n        let min = Infinity;\n        for (let i = 0; i <= this._numsections; ++i) {\n            const p = path.pointAlong(i / this._numsections, this._x, this._y);\n            const d = distanceSq(x, y, p.x, p.y);\n            if (d < min)\n                min = d;\n        }\n        return Math.sqrt(min);\n    }\n    _onHover() {\n        const mouse = d3.mouse(this._canvas);\n        const worldx = this._transform.invertX(mouse[0]);\n        const worldy = this._transform.invertY(mouse[1]);\n        if (this._delaunay) {\n            const index = this._delaunay.find(worldx, worldy);\n            if (index < this._links.length) {\n                const link = this._links[index];\n                const path = link.path;\n                const dist = this._distance(worldx, worldy, path);\n                this._setHover(link, dist);\n            }\n        }\n    }\n    _setHover(link, distance) {\n        if (distance < this._maxDist) {\n            if (link !== this._lastLink) {\n                this._lastLink = link;\n                this.dispatchEvent({\n                    type: 'hover',\n                    link: link\n                });\n            }\n        }\n        else {\n            if (this._lastLink !== null) {\n                this._lastLink = null;\n                this.dispatchEvent({\n                    type: 'hover',\n                    link: null\n                });\n            }\n        }\n    }\n}\nfunction distanceSq(x1, y1, x2, y2) {\n    return (x2 - x1) ** 2 + (y2 - y1) ** 2;\n}\nexport { HoverManager };\n","import { Renderer } from '../Renderer';\nclass LabelRenderer extends Renderer {\n    constructor(style) {\n        super();\n        this._nodes = [];\n        this.color = LabelRenderer.defaultColor;\n        this.font = LabelRenderer.defaultFont;\n        if (style) {\n            if (style.color)\n                this.color = style.color;\n            if (style.font)\n                this.font = style.font;\n        }\n    }\n    nodes(points) {\n        return arguments.length\n            ? (this._nodes = points, this)\n            : this._nodes;\n    }\n    render(context, x, y) {\n        if (!this._nodes.length)\n            return;\n        context.save();\n        context.beginPath();\n        if (this.color)\n            context.fillStyle = this.color;\n        context.font = this.font;\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        this._nodes.forEach(node => {\n            if (!node.labels) {\n                context.fillText(node.id, x(node.x) + (node.dx ? node.dx : 0), y(node.y) + (node.dy ? node.dy : 0));\n            }\n            else {\n                const match = this.font.match(/(\\d*)px/);\n                const size = match ? match.length > 1 ? parseInt(match[1]) : 12 : 12;\n                const text = [node.id, ...node.labels];\n                const base = Math.floor((text.length * size) / 2 - size / 2) - 1;\n                text.forEach((label, index) => {\n                    context.fillText(label, x(node.x) + (node.dx ? node.dx : 0), y(node.y) + (node.dy ? node.dy : 0) - base + index * size);\n                });\n            }\n        });\n        context.restore();\n    }\n}\nLabelRenderer.defaultColor = '#333333';\nLabelRenderer.defaultFont = '14px sans-serif';\nexport { LabelRenderer };\n","import { isCircleStyle } from '../../styles/ShapeStyle';\nimport { ShapeRenderer } from './ShapeRenderer';\nconst TWOPI = 2 * Math.PI;\nconst PI6 = Math.PI / 6;\nclass CircleRenderer extends ShapeRenderer {\n    constructor(style) {\n        super(style);\n        this._radius = CircleRenderer.defaultRadius;\n        if (style && isCircleStyle(style)) {\n            if (style.radius)\n                this._radius = style.radius;\n        }\n    }\n    containsPoint(node, x, y, scale) {\n        scale = scale || 1;\n        const dx = x - node.x;\n        const dy = y - node.y;\n        const d2 = dx * dx + dy * dy;\n        const r = this._radius / scale;\n        return d2 < r * r;\n    }\n    intersect(angle) {\n        return {\n            x: this._radius * Math.cos(angle),\n            y: this._radius * Math.sin(angle)\n        };\n    }\n    radius(radius) {\n        return arguments.length\n            ? (this._radius = +radius, this)\n            : this._radius;\n    }\n    render(context, x, y) {\n        if (!this._nodes.length)\n            return;\n        context.save();\n        context.beginPath();\n        this._nodes.forEach(point => {\n            const px = x(point.x);\n            const py = y(point.y);\n            context.moveTo(px + this._radius, py);\n            context.arc(px, py, this._radius, 0, TWOPI);\n        });\n        this._doStrokeAndFill(context);\n        context.restore();\n    }\n    selfLoopPoints(node) {\n        const nx = node.x;\n        const ny = node.y;\n        const d = 3;\n        return [{\n                x: nx,\n                y: ny,\n                dx: this._radius * Math.cos(-PI6),\n                dy: this._radius * Math.sin(-PI6)\n            }, {\n                x: nx,\n                y: ny,\n                dx: d * this._radius * Math.cos(-PI6),\n                dy: d * this._radius * Math.sin(-PI6)\n            }, {\n                x: nx,\n                y: ny,\n                dx: d * this._radius * Math.cos(PI6),\n                dy: d * this._radius * Math.sin(PI6)\n            }, {\n                x: nx,\n                y: ny,\n                dx: this._radius * Math.cos(PI6),\n                dy: this._radius * Math.sin(PI6)\n            }];\n    }\n}\nCircleRenderer.defaultRadius = 60;\nexport { CircleRenderer };\n","import { LabelRenderer } from '../renderers/labels/LabelRenderer';\nimport { CircleRenderer } from '../renderers/shapes/CircleRenderer';\nimport { RectangleRenderer } from '../renderers/shapes/RectangleRenderer';\nimport { isCircleStyle, isRectangleStyle } from '../styles/ShapeStyle';\nimport { parseLabelStyles, parseShapeStyles } from '../styles/StyleParsers';\nclass NodeManager {\n    constructor() {\n        this._nodes = new Map();\n        this._labels = [];\n        this._shapes = [];\n        this._styles = [];\n    }\n    labelRenderers() {\n        return this._labels;\n    }\n    nodes(nodes) {\n        // Return the array nodes\n        if (!nodes)\n            return Array.from(this._nodes.values());\n        // Clear the node map\n        this._nodes = new Map();\n        // Make sure all nodes are node objects\n        const nodeobjs = nodes.map(node => {\n            if (typeof node === 'string') {\n                return {\n                    id: node,\n                    x: 0,\n                    y: 0\n                };\n            }\n            return node;\n        });\n        // Add all nodes to node map\n        nodeobjs.forEach(node => {\n            if (this._nodes.has(node.id))\n                throw Error(`Duplicate node ${node.id}`);\n            this._nodes.set(node.id, node);\n        });\n        return this;\n    }\n    shapeRenderers() {\n        return this._shapes;\n    }\n    setStyles(styles) {\n        this._styles = styles;\n        return this;\n    }\n    update() {\n        // Recalculate the renderers\n        this._shapes = this._calculateShapeRenderers();\n        this._labels = this._calculateLabelRenderers();\n    }\n    _calculateLabelRenderers() {\n        // An array to store renderers\n        const renderers = [];\n        // Create a map of node IDs to nodes\n        const nodemap = new Map(this._nodes);\n        // Flatten styles and build renderers\n        this._styles.forEach(style => {\n            parseLabelStyles(style).forEach((nodes, labelStyle) => {\n                // Create the renderer\n                let labelRenderer = new LabelRenderer(labelStyle);\n                // Extract nodes that haven't already been assigned to a renderer\n                const available = extractNodes(nodes, nodemap);\n                // Set the nodes that the renderer will render\n                labelRenderer.nodes(available);\n                // Add the renderer to the list\n                renderers.push(labelRenderer);\n            });\n        });\n        // Create a default renderer for those not yet assigned\n        if (nodemap.size > 0) {\n            const defaultRenderer = new LabelRenderer();\n            const remaining = Array.from(nodemap.values());\n            defaultRenderer.nodes(remaining);\n            renderers.push(defaultRenderer);\n        }\n        return renderers;\n    }\n    _calculateShapeRenderers() {\n        // An array to store renderers\n        const renderers = [];\n        // Create a map of node IDs to nodes\n        const nodemap = new Map(this._nodes);\n        // Flatten styles and build renderers\n        this._styles.forEach(style => {\n            parseShapeStyles(style).forEach((nodes, shapeStyle) => {\n                // Create the node renderer\n                let shapeRenderer;\n                if (isCircleStyle(shapeStyle))\n                    shapeRenderer = new CircleRenderer(shapeStyle);\n                else if (isRectangleStyle(shapeStyle))\n                    shapeRenderer = new RectangleRenderer(shapeStyle);\n                else\n                    shapeRenderer = new CircleRenderer(shapeStyle);\n                // Extract nodes that haven't already been assigned to a renderer\n                const available = extractNodes(nodes, nodemap);\n                // Set the nodes that the renderer will render\n                shapeRenderer.nodes(available);\n                // Add the renderer to the list\n                renderers.push(shapeRenderer);\n            });\n        });\n        // Create a default renderer for those not yet assigned\n        if (nodemap.size > 0) {\n            const defaultRenderer = new CircleRenderer();\n            const remaining = Array.from(nodemap.values());\n            defaultRenderer.nodes(remaining);\n            renderers.push(defaultRenderer);\n        }\n        return renderers;\n    }\n}\nfunction extractNodes(names, nodemap) {\n    const available = [];\n    names.forEach(name => {\n        if (nodemap.has(name)) {\n            available.push(nodemap.get(name));\n            nodemap.delete(name);\n        }\n    });\n    return available;\n}\nexport { NodeManager };\n","import { Renderer } from './Renderer';\nclass AxesRenderer extends Renderer {\n    constructor() {\n        super();\n        this._axesVisible = true;\n        this._gridVisible = true;\n        this._axisColor = '#bbbbbb';\n        this._gridColor = '#dddddd';\n        this._ticks = 10;\n        this._ticksize = 8;\n        this._labelpadding = 4;\n        this._gridPattern = [5, 5];\n    }\n    axesVisible(visible) {\n        this._axesVisible = visible;\n        return this;\n    }\n    gridVisible(visible) {\n        this._gridVisible = visible;\n        return this;\n    }\n    render(context, x, y) {\n        // constants\n        const x0 = align(x(0));\n        const y0 = align(y(0));\n        const xrange = x.range().map(align);\n        const yrange = y.range().map(align);\n        const ratio = Math.abs(xrange[1] / yrange[1]);\n        const tickoffset = this._ticksize / 2;\n        const xticks = x.ticks(this._ticks * ratio);\n        const yticks = y.ticks(this._ticks);\n        context.save();\n        context.beginPath();\n        if (this._gridVisible) {\n            // x-grid\n            yticks.forEach(tick => {\n                if (tick !== 0 || !this._axesVisible) {\n                    const ty = align(y(tick));\n                    context.moveTo(xrange[0], ty);\n                    context.lineTo(xrange[1], ty);\n                }\n            });\n            context.setLineDash(this._gridPattern);\n            context.lineDashOffset = -x0;\n            context.strokeStyle = this._gridColor;\n            context.stroke();\n            // y-grid\n            context.beginPath();\n            xticks.forEach(tick => {\n                if (tick !== 0 || !this._axesVisible) {\n                    const tx = align(x(tick));\n                    context.moveTo(tx, yrange[0]);\n                    context.lineTo(tx, yrange[1]);\n                }\n            });\n            context.lineDashOffset = -y0;\n            context.stroke();\n        }\n        if (this._axesVisible) {\n            // x-axis\n            context.beginPath();\n            context.moveTo(xrange[0], y0);\n            context.lineTo(xrange[1], y0);\n            // x-ticks\n            xticks.forEach(tick => {\n                if (tick !== 0) {\n                    const tx = align(x(tick));\n                    context.moveTo(tx, y0 - tickoffset);\n                    context.lineTo(tx, y0 + tickoffset);\n                }\n            });\n            // y-axis\n            context.moveTo(x0, yrange[0]);\n            context.lineTo(x0, yrange[1]);\n            // y-ticks\n            yticks.forEach(tick => {\n                if (tick !== 0) {\n                    const ty = align(y(tick));\n                    context.moveTo(x0 - tickoffset, ty);\n                    context.lineTo(x0 + tickoffset, ty);\n                }\n            });\n            // draw lines\n            context.setLineDash([]);\n            context.strokeStyle = this._axisColor;\n            context.stroke();\n            // labels\n            context.font = '10px sans-serif';\n            context.textAlign = 'center';\n            context.textBaseline = 'top';\n            context.fillStyle = this._axisColor;\n            xticks.forEach(tick => {\n                if (tick !== 0) {\n                    const tx = align(x(tick));\n                    context.fillText(tick.toString(), tx, y0 + tickoffset + this._labelpadding);\n                }\n            });\n            context.textAlign = 'left';\n            context.textBaseline = 'middle';\n            yticks.forEach(tick => {\n                if (tick !== 0) {\n                    const ty = align(y(tick));\n                    context.fillText(tick.toString(), x0 + tickoffset + this._labelpadding, ty);\n                }\n            });\n        }\n        context.restore();\n    }\n}\nfunction align(value) {\n    return Math.round(value) + 0.5;\n}\nexport { AxesRenderer };\n","import * as d3 from 'd3';\nimport { DragManager } from './managers/DragManager';\nimport { EdgeManager } from './managers/EdgeManager';\nimport { HoverManager } from './managers/HoverManager';\nimport { NodeManager } from './managers/NodeManager';\nimport { AxesRenderer } from './renderers/AxesRenderer';\nimport { BundleRouter } from './routers/BundleRouter';\nclass Graph {\n    constructor(canvas) {\n        // Canvas rendering\n        this._canvas = canvas || null;\n        this._context = null;\n        // Renderers\n        this._axes = new AxesRenderer();\n        this._linkLabelRenderers = [];\n        this._linkRenderers = [];\n        this._nodeLabelRenderers = [];\n        this._nodeRenderers = [];\n        // Sizing, scaling\n        this._width = 0;\n        this._height = 0;\n        this._x = d3.scaleLinear();\n        this._y = d3.scaleLinear();\n        this._transform = d3.zoomIdentity;\n        // Managers\n        this._nodeManager = new NodeManager();\n        this._edgeManager = new EdgeManager();\n        this._dragManager = null;\n        this._hoverManager = null;\n        // Settings\n        this._axesVisible = true;\n        // Attempt to initialize the canvas\n        this._initializeCanvas();\n    }\n    axesVisible(visible) {\n        this._axes.axesVisible(visible);\n        return this;\n    }\n    boundingBox() {\n        const t = this._transform.invertY(0);\n        const r = this._transform.invertX(this._width);\n        const b = this._transform.invertY(this._height);\n        const l = this._transform.invertX(0);\n        return [\n            this._y.invert(t),\n            this._x.invert(r),\n            this._y.invert(b),\n            this._x.invert(l)\n        ];\n    }\n    bundleFactor(factor) {\n        const router = this._edgeManager.getRouter();\n        if (!arguments.length)\n            return router instanceof BundleRouter\n                ? router.getFactor()\n                : undefined;\n        if (router instanceof BundleRouter)\n            router.setFactor(factor);\n        return this;\n    }\n    canvas(canvas) {\n        this._canvas = canvas;\n        this._initializeCanvas();\n        return this;\n    }\n    edgeLabelPlacement(placement) {\n        return arguments.length\n            ? (this._edgeManager.setLabelPlacement(placement), this)\n            : this._edgeManager.getLabelPlacement();\n    }\n    edges(edges) {\n        if (!edges)\n            return this._edgeManager.getEdges();\n        this._edgeManager.setEdges(edges);\n        return this;\n    }\n    edgeStyles(styles) {\n        this._edgeManager.setStyles(styles);\n        return this;\n    }\n    gridVisible(visible) {\n        this._axes.gridVisible(visible);\n        return this;\n    }\n    resize() {\n        if (this._canvas) {\n            const styles = getComputedStyle(this._canvas);\n            const width = parseInt(styles.getPropertyValue('width'));\n            const height = parseInt(styles.getPropertyValue('height'));\n            this._setDimensions(width, height);\n            this._render();\n        }\n    }\n    nodes(nodes) {\n        if (!nodes)\n            return this._nodeManager.nodes();\n        // Set the nodes, converting all strings to node objects\n        this._nodeManager.nodes(nodes);\n        // Get the node objects\n        const nodeobjs = this._nodeManager.nodes();\n        // Tell everyone else about the nodes\n        this._edgeManager.setNodes(nodeobjs);\n        return this;\n    }\n    nodeStyles(styles) {\n        this._nodeManager.setStyles(styles);\n        return this;\n    }\n    update() {\n        // Get the node renderers\n        this._nodeManager.update();\n        this._nodeRenderers = this._nodeManager.shapeRenderers();\n        // Tell the edge manager which shapes will be rendering the nodes\n        this._edgeManager.setShapes(this._nodeRenderers);\n        this._edgeManager.update();\n        // Tell the drag manager which shapes will be rendering the nodes\n        if (this._dragManager)\n            this._dragManager.setShapes(this._nodeRenderers);\n        // The the hover manager which edges to hover with\n        if (this._hoverManager)\n            this._hoverManager.setData(this._edgeManager.getRouter().getLinkMap());\n        // Get the link renderers\n        this._linkRenderers = this._edgeManager.linkRenderers();\n        // Get the label renderers\n        this._linkLabelRenderers = this._edgeManager.labelRenderers();\n        this._nodeLabelRenderers = this._nodeManager.labelRenderers();\n        this._render();\n    }\n    _initializeCanvas() {\n        const canvas = this._canvas;\n        if (canvas) {\n            // Get the 2D rendering context\n            const context = canvas.getContext('2d');\n            if (context === null)\n                throw Error('Unable to initialize canvas');\n            this._context = context;\n            // Create the drag manager and hover manager\n            this._dragManager = new DragManager(canvas, this._x, this._y);\n            this._hoverManager = new HoverManager(canvas, this._x, this._y);\n            // Initialize interactivity\n            const zoom = d3.zoom()\n                .scaleExtent([0.1, 500])\n                .on('zoom', this._zoomed.bind(this));\n            d3.select(canvas)\n                .call(zoom)\n                .call(zoom.transform, this._transform);\n            this._dragManager\n                .addEventListener('drag', event => {\n                this._edgeManager.updateEdgesConnectedTo(event.node);\n                this._render();\n            })\n                .addEventListener('end', () => {\n                if (this._hoverManager) {\n                    this._hoverManager.setData(this._edgeManager.getRouter().getLinkMap());\n                    this._render();\n                }\n            });\n            this._hoverManager\n                .addEventListener('hover', event => {\n                this._linkRenderers.forEach(r => r.highlight(event.link));\n                this._linkLabelRenderers.forEach(r => r.highlight(event.link));\n                this._render();\n            });\n            this.update();\n            this.resize();\n        }\n        else {\n            this._context = null;\n            this._dragManager = null;\n        }\n    }\n    _render() {\n        const context = this._context;\n        if (context) {\n            window.requestAnimationFrame(() => {\n                const x = this._transform.rescaleX(this._x);\n                const y = this._transform.rescaleY(this._y);\n                // Clear the context\n                context.clearRect(0, 0, this._width, this._height);\n                // Render axes\n                if (this._axesVisible)\n                    this._axes.render(context, x, y);\n                // Render links\n                this._linkRenderers.forEach(renderer => {\n                    renderer.render(context, x, y);\n                });\n                // Render link labels\n                this._linkLabelRenderers.forEach(renderer => {\n                    renderer.render(context, x, y);\n                });\n                // Render nodes\n                this._nodeRenderers.forEach(renderer => {\n                    renderer.render(context, x, y);\n                });\n                // Render labels\n                this._nodeLabelRenderers.forEach(renderer => {\n                    renderer.render(context, x, y);\n                });\n            });\n        }\n    }\n    _setDimensions(width, height) {\n        if (this._canvas) {\n            this._canvas.setAttribute('width', width.toString());\n            this._canvas.setAttribute('height', height.toString());\n            this._width = width;\n            this._height = height;\n            this._x.domain([-width / 2, width / 2]).range([0, width]);\n            this._y.domain([height / 2, -height / 2]).range([0, height]);\n        }\n    }\n    _setTransform(transform) {\n        this._transform = transform;\n        if (this._dragManager)\n            this._dragManager.setTransform(transform);\n        if (this._hoverManager)\n            this._hoverManager.setTransform(transform);\n    }\n    _zoomed() {\n        this._setTransform(d3.event.transform);\n        this._render();\n    }\n}\nexport { Graph };\n","import { StaticLayout } from './StaticLayout';\nclass GridLayout extends StaticLayout {\n    apply(graph) {\n        const bbox = graph.boundingBox();\n        const cx = (bbox[1] + bbox[3]) / 2;\n        const cy = (bbox[0] + bbox[2]) / 2;\n        const w = 0.8 * Math.abs(bbox[1] - bbox[3]);\n        const h = 0.8 * Math.abs(bbox[0] - bbox[2]);\n        const nodes = graph.nodes();\n        const ratio = w / h;\n        let r = 0, c = 0;\n        while (r * c < nodes.length) {\n            c / r < ratio ? ++c : ++r;\n        }\n        const t = cy + h / 2;\n        const l = cx - w / 2;\n        const dx = w / c;\n        const dy = h / r;\n        let row = 0, col = 0;\n        nodes.forEach(node => {\n            node.x = l + col * dx;\n            node.y = t - row * dy;\n            if (col++ === c) {\n                col = 0;\n                row++;\n            }\n        });\n    }\n}\nexport { GridLayout };\n","import { isDefined } from 'ts-is-present';\nimport { StaticLayout } from './StaticLayout';\nclass RowLayout extends StaticLayout {\n    constructor() {\n        super();\n        this._groups = [];\n    }\n    apply(graph) {\n        const bbox = graph.boundingBox();\n        const cx = (bbox[1] + bbox[3]) / 2;\n        const cy = (bbox[0] + bbox[2]) / 2;\n        const w = 0.8 * Math.abs(bbox[1] - bbox[3]);\n        const h = 0.8 * Math.abs(bbox[0] - bbox[2]);\n        const groups = [];\n        const nodemap = new Map(graph.nodes().map(node => [node.id, node]));\n        this._groups.forEach(group => {\n            const nodes = group\n                .map(id => {\n                const node = nodemap.get(id);\n                nodemap.delete(id);\n                return node;\n            })\n                .filter(isDefined);\n            if (nodes.length)\n                groups.push(nodes);\n        });\n        groups.push(Array.from(nodemap.values()));\n        const ngroup = groups.length || 1;\n        const t = cy + h / 2;\n        const l = cx - w / 2;\n        const dx = w / Math.max(...groups.map(group => group.length));\n        const dy = h / ((ngroup - 1) || 1);\n        groups.forEach((group, g) => {\n            const y = t - g * dy;\n            group.forEach((node, n) => {\n                node.x = l + dx * n;\n                node.y = y;\n            });\n        });\n    }\n    groups(groups) {\n        this._groups = groups;\n        return this;\n    }\n}\nexport { RowLayout };\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance } from 'alloy-ts';\n\n// Sterling view types\nexport type MainView = 'graph' | 'table' | 'source';\nexport type TableView = 'settings' | 'evaluator' | null;\nexport type GraphView = 'node' | 'edge' | 'layout' | 'settings' | 'evaluator' | null;\nexport type SourceView = 'files' | 'evaluator' | null;\n\n// Sterling state\nexport interface SterlingState {\n    instance: AlloyInstance | null\n    mainView: MainView\n    tableView: TableView\n    graphView: GraphView\n    sourceView: SourceView\n    welcomeDescription: string\n    welcomeTitle: string\n}\n\nconst initialState: SterlingState = {\n    instance: null,\n    mainView: 'graph',\n    tableView: null,\n    graphView: null,\n    sourceView: 'files',\n    welcomeDescription: 'Use Alloy to generate an instance.',\n    welcomeTitle: 'Welcome to Sterling'\n};\n\nconst sterlingSlice = createSlice({\n    name: 'sterling',\n    initialState: initialState,\n    reducers: {\n\n        setGraphView (state, action: PayloadAction<GraphView>) {\n            state.graphView = action.payload === state.graphView\n                ? null\n                : action.payload;\n        },\n\n        setInstance (state, action: PayloadAction<AlloyInstance | null>) {\n\n            state.instance = action.payload;\n\n        },\n\n        setMainView (state, action: PayloadAction<MainView>) {\n            state.mainView = action.payload;\n        },\n\n        setSourceView (state, action: PayloadAction<SourceView>) {\n            state.sourceView = action.payload === state.sourceView\n                ? null\n                : action.payload;\n        },\n\n        setTableView (state, action: PayloadAction<TableView>) {\n            state.tableView = action.payload === state.tableView\n                ? null\n                : action.payload;\n        }\n\n    }\n});\n\nexport const {\n    setGraphView,\n    setInstance,\n    setMainView,\n    setSourceView,\n    setTableView\n} = sterlingSlice.actions;\nexport default sterlingSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance } from 'alloy-ts';\nimport { List, Map } from 'immutable';\nimport { setInstance } from '../../../../sterling/sterlingSlice'\n\nexport interface DataState {\n    asAttribute: Map<string, boolean>\n    atoms: Map<string, string[]>\n    collapseProjections: boolean\n    projections: Map<string, string>\n    unprojected: List<string>\n}\n\nconst initialState: DataState = {\n    asAttribute: Map(),\n    atoms: Map(),\n    collapseProjections: false,\n    projections: Map(),\n    unprojected: List()\n};\n\nconst dataSlice = createSlice({\n    name: 'graphdata',\n    initialState: initialState,\n    reducers: {\n        addProjection (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            const atoms = state.atoms.get(sig);\n            if (atoms && atoms.length) {\n                const atom = atoms[0];\n                state.projections = state.projections.set(sig, atom);\n                const index = state.unprojected.indexOf(sig);\n                if (index !== -1)\n                    state.unprojected = state.unprojected.delete(index);\n            }\n        },\n        nextAtom (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            const cur = state.projections.get(sig);\n            const atm = state.atoms.get(sig);\n            if (cur && atm) {\n                const idx = atm.indexOf(cur);\n                const nxt = idx + 1;\n                if (idx !== -1 && nxt < atm.length) {\n                    state.projections = state.projections.set(sig, atm[nxt]);\n                }\n            }\n        },\n        previousAtom (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            const cur = state.projections.get(sig);\n            const atm = state.atoms.get(sig);\n            if (cur && atm) {\n                const idx = atm.indexOf(cur);\n                const nxt = idx - 1;\n                if (idx !== -1 && nxt >= 0) {\n                    state.projections = state.projections.set(sig, atm[nxt]);\n                }\n            }\n        },\n        removeProjection (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            state.projections = state.projections.delete(sig);\n            state.unprojected = state.unprojected.push(sig).sort(alphabetical);\n        },\n        setProjection (state, action: PayloadAction<{sig: string, atom: string}>) {\n            const { sig, atom } = action.payload;\n            if (state.projections.has(sig) && state.projections.get(sig) !== atom) {\n                state.projections = state.projections.set(sig, atom);\n            }\n        },\n        toggleAsAttribute (state, action: PayloadAction<string|null>) {\n            const field = action.payload;\n            if (field) {\n                const curr = state.asAttribute.get(field);\n                state.asAttribute = state.asAttribute.set(field, !curr);\n            }\n        },\n        toggleCollapseProjections (state) {\n            state.collapseProjections = !state.collapseProjections\n        },\n    },\n    extraReducers: build =>\n        build.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance) {\n\n                const univ = instance.signatures().find(sig => sig.id() === 'univ');\n\n                if (univ) {\n\n                    const signatures = univ.subTypes();\n                    const fields = instance.fields();\n                    const skolems = instance.skolems().filter(s => s.arity() > 1);\n                    const both = [...fields, ...skolems];\n\n                    // Keep any existing projections\n                    state.projections = Map<string, string>().withMutations(map => {\n                        signatures.forEach(sig => {\n                            const atom = state.projections.get(sig.id());\n                            if (atom && sig.findAtom(atom)) {\n                                map.set(sig.id(), atom);\n                            }\n                        });\n                    });\n\n                    // Keep any fields set to display as attributes\n                    state.asAttribute = Map(both.map(item => {\n                        const id = item.id();\n                        return state.asAttribute.has(id)\n                            ? [id, state.asAttribute.get(id)!]\n                            : [id, false];\n                    }));\n\n                    // Create the list of unprojected signatures\n                    state.unprojected = List<string>().withMutations(list => {\n                        signatures.forEach(sig => {\n                            const id = sig.id();\n                            const count = sig.atoms(true).length;\n                            if (count && !state.projections.has(id))\n                                list.push(id);\n                        });\n                    }).sort(alphabetical);\n\n                    // Extract atoms\n                    state.atoms = Map(signatures.map(sig => [\n                            sig.id(),\n                            sig.atoms(true).map(atom => atom.name())\n                        ]));\n\n\n                } else {\n\n                    state.asAttribute = Map();\n                    state.atoms = Map();\n                    state.projections = Map();\n                    state.unprojected = List();\n\n                }\n\n            } else {\n\n                state.atoms = Map();\n                state.projections = Map();\n                state.unprojected = List();\n\n            }\n\n        })\n});\n\nfunction alphabetical (a: string, b: string): number {\n    return a.localeCompare(b);\n}\n\nexport const {\n    addProjection,\n    nextAtom,\n    previousAtom,\n    removeProjection,\n    setProjection,\n    toggleAsAttribute,\n    toggleCollapseProjections\n} = dataSlice.actions;\nexport default dataSlice.reducer;\n","import * as d3 from 'd3-color';\nimport * as schemes from 'd3-scale-chromatic';\n\nconst POPPER_MODIFIERS = {\n    preventOverflow: {\n        enabled: false\n    },\n    hide: {\n        enabled: false\n    }\n};\n\nconst COLOR_SCHEMES: [string, string[]][] = [\n    ['Tableu', colors(\"4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab\")],\n    ['Turbo', [0, 1, 2, 4, 5, 6, 7].map(i => turboScheme(i/8)).map(c => d3.rgb(c).hex())],\n    ['Categorical', schemes.schemeCategory10.slice()],\n    ['Accent', schemes.schemeAccent.slice()],\n    ['Dark', schemes.schemeDark2.slice()],\n    ['Pastel', schemes.schemePastel1.slice()],\n    ['Paired', schemes.schemePaired.slice()]\n];\n\nconst DEFAULT_COLORS = [\"#f44336\", \"#e91e63\", \"#9c27b0\", \"#673ab7\", \"#3f51b5\",\n    \"#2196f3\", \"#03a9f4\", \"#00bcd4\", \"#009688\", \"#4caf50\", \"#8bc34a\", \"#cddc39\",\n    \"#ffc107\", \"#ff9800\", \"#ff5722\", \"#795548\", \"#607d8b\",\n    \"#333333\", \"#777777\", \"#bbbbbb\", \"#ffffff\"];\n\nfunction background (color?: string | null): string | undefined {\n    if (!color) return;\n    const c = d3.color(color);\n    return c ? c.hex() : undefined;\n}\n\nfunction backgroundGradient (colors: string[]): string {\n    if (!colors.length) return '';\n    const percent = 100 / colors.length;\n    const strings = colors.map((color, i) => `${color} ${i*percent}% ${(i+1)*percent}%`);\n    return `linear-gradient(to right, ${strings.join(',')})`;\n}\n\nfunction colors (specifier: string): string[] {\n    let n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n    while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n    return colors;\n}\n\nfunction foreground (color?: string | null): string | undefined {\n    if (!color) return;\n    const c = d3.color(color);\n    if (!c) return;\n    const rgb = c.rgb();\n    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000 > 125\n        ? '#000000'\n        : '#ffffff';\n}\n\nfunction turboScheme (t: number): string {\n    t = Math.max(0, Math.min(1, t));\n    return \"rgb(\"\n        + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + \", \"\n        + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + \", \"\n        + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))\n        + \")\";\n}\n\nexport {\n    COLOR_SCHEMES,\n    DEFAULT_COLORS,\n    POPPER_MODIFIERS,\n    background,\n    backgroundGradient,\n    foreground\n}\n","import { Icon, Tag } from '@blueprintjs/core';\nimport { AlloyField, AlloySignature, AlloySkolem } from 'alloy-ts';\nimport * as React from 'react';\nimport { SigFieldSkolem } from './tableTypes';\n\nexport interface IAlloyTagProps {\n    fill?: boolean\n    nameFunction?: (item: SigFieldSkolem) => string\n}\n\nexport interface ISignatureTagProps extends IAlloyTagProps {\n    signature: AlloySignature | string\n}\n\nexport interface IFieldTagProps extends IAlloyTagProps {\n    field: AlloyField | string\n}\n\nexport interface ISkolemTagProps extends IAlloyTagProps {\n    skolem: AlloySkolem | string\n}\n\nclass SignatureTag extends React.Component<ISignatureTagProps> {\n\n    static className = 'sig-tag';\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const name = typeof props.signature === 'string'\n            ? props.signature\n            : props.nameFunction\n                ? props.nameFunction(props.signature)\n                : props.signature.name();\n\n        return (\n            <Tag className={SignatureTag.className} fill={props.fill}>\n                { name }\n            </Tag>\n        );\n\n    }\n\n}\n\nclass FieldTag extends React.Component<IFieldTagProps> {\n\n    static className = 'field-tag';\n\n    render (): React.ReactNode {\n\n        const name = typeof this.props.field === 'string'\n            ? this.props.field\n            : this.props.nameFunction\n                ? this.props.nameFunction(this.props.field)\n                : this.props.field.name();\n\n        const tokens = name.split('<:');\n\n        return (\n            <Tag\n                className={FieldTag.className}\n                fill={true}>\n                { FieldTag.FieldTagEls(tokens) }\n            </Tag>\n        )\n\n    }\n\n    public static FieldTagEls (tokens: Array<string>): React.ReactElement {\n\n        if (tokens.length !== 2)\n            return <>{tokens.join('')}</>;\n\n        return (<>\n            {tokens[0]}\n            <Icon\n                icon='symbol-triangle-down'\n                iconSize={14}\n                style={{\n                    padding: '1px',\n                    transform: 'rotate(90deg)'\n                }}/>\n            {tokens[1]}\n        </>);\n\n    }\n\n}\n\nclass SkolemTag extends React.Component<ISkolemTagProps> {\n\n    static className = 'skolem-tag';\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const name = typeof props.skolem === 'string'\n            ? props.skolem\n            : props.nameFunction\n                ? props.nameFunction(props.skolem)\n                : props.skolem.name();\n\n        return (\n            <Tag className={SkolemTag.className} fill={true}>\n                { name }\n            </Tag>\n\n        );\n\n    }\n\n}\n\nexport {\n    SignatureTag,\n    FieldTag,\n    SkolemTag\n}\n","import { AlloyField, AlloySkolem } from 'alloy-ts';\nimport { FieldTag } from '../../../table/TableTags';\nimport { Tree } from '../../graphTypes';\n\nfunction buildFieldTree (fields: AlloyField[], hideEmpty: boolean): Tree | null {\n\n    const flds = hideEmpty\n        ? fields.filter(field => field.tuples().length)\n        : fields;\n\n    return {\n        id: 'Fields',\n        children: flds.map(field => {\n            return {\n                id: field.id(),\n                label: FieldTag.FieldTagEls(field.id().split('<:')),\n                icon: 'flows',\n                children: []\n            }\n        })\n    };\n\n}\n\nfunction buildSkolemTree (skolems: AlloySkolem[]): Tree | null {\n\n    return {\n        id: 'Skolems',\n        children: skolems\n            .map(skolem => {\n                return {\n                    id: skolem.id(),\n                    icon: 'flows',\n                    children: []\n                }\n            })\n    };\n\n}\n\nexport {\n    buildFieldTree,\n    buildSkolemTree\n}\n","import {\n    cloneLabelStyle,\n    cloneLinkStyle,\n    LabelStyle,\n    LinkStyle\n} from '@atdyer/graph-js';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyField, AlloyInstance, AlloySkolem } from 'alloy-ts';\nimport { Map } from 'immutable';\nimport { setInstance } from '../../../../sterling/sterlingSlice';\nimport { Tree } from '../../graphTypes';\nimport { COLOR_SCHEMES } from '../../util';\nimport { buildFieldTree, buildSkolemTree } from './edgeTypes';\n\nexport interface EdgeStylingState {\n    collapsed: Map<string, boolean>\n    collapseEdgeStyle: boolean\n    collapseScheme: boolean\n    fields: AlloyField[]\n    hideEmptyFields: boolean\n    labelStyles: Map<string, LabelStyle>\n    linkStyles: Map<string, LinkStyle>\n    selected: string | null\n    skolems: AlloySkolem[]\n    treeField: Tree | null\n    treeSkolem: Tree | null\n}\n\nconst initialState: EdgeStylingState = {\n    collapsed: Map({\n        Fields: false,\n        Skolems: false\n    }),\n    collapseEdgeStyle: false,\n    collapseScheme: false,\n    fields: [],\n    hideEmptyFields: true,\n    labelStyles: Map(),\n    linkStyles: Map(),\n    selected: null,\n    skolems: [],\n    treeField: null,\n    treeSkolem: null\n};\n\nconst edgeStylingSlice = createSlice({\n    name: 'edgestyles',\n    initialState: initialState,\n    reducers: {\n        clearAll (state) {\n            state.labelStyles = state.labelStyles.map(() => ({}));\n            state.linkStyles = state.linkStyles.map(() => ({}));\n        },\n        clearCurrent (state) {\n            if (state.selected) {\n                state.labelStyles = state.labelStyles.set(state.selected, {});\n                state.linkStyles = state.linkStyles.set(state.selected, {});\n            }\n        },\n        collapseTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, true);\n        },\n        expandTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, false);\n        },\n        selectTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            if (state.linkStyles.has(target)\n                || target === 'Fields'\n                || target === 'Skolems') state.selected = target;\n        },\n        setColorScheme (state, action: PayloadAction<string[]>) {\n            const colors = action.payload;\n            if (!colors.length) return;\n            state.linkStyles = state.linkStyles.withMutations(styles => {\n                [...state.fields, ...state.skolems].forEach((item, index) => {\n                    const id = item.id();\n                    const color = colors[index % colors.length];\n                    const link = state.linkStyles.get(id);\n                    if (link) {\n                        const newlink = cloneLinkStyle(link);\n                        newlink.stroke = color;\n                        styles.set(id, newlink);\n                    }\n                });\n            });\n            state.labelStyles = state.labelStyles.withMutations(styles => {\n                [...state.fields, ...state.skolems].forEach((item, index) => {\n                    const id = item.id();\n                    const color = colors[index % colors.length];\n                    const label = state.labelStyles.get(id);\n                    if (label) {\n                        const newlabel = cloneLabelStyle(label);\n                        newlabel.color = color;\n                        styles.set(id, newlabel);\n                    }\n                });\n            });\n        },\n        setLabelColor (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const label = state.labelStyles.get(state.selected);\n                if (label) {\n                    const color = action.payload;\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    color === null\n                        ? delete newlabel.color\n                        : newlabel.color = color;\n                    state.labelStyles = state.labelStyles.set(state.selected, newlabel);\n                }\n            }\n        },\n        setLabelSize (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const label = state.labelStyles.get(state.selected);\n                if (label) {\n                    const size = parseInt(action.payload);\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    isNaN(size) || size === 0\n                        ? delete newlabel.font\n                        : newlabel.font = `${size}px sans-serif`;\n                    state.labelStyles = state.labelStyles.set(state.selected, newlabel);\n                }\n            }\n        },\n        setStroke (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const link = state.linkStyles.get(state.selected);\n                if (link) {\n                    const color = action.payload;\n                    const newlink = cloneLinkStyle(link)!;\n                    color === null\n                        ? delete newlink.stroke\n                        : newlink.stroke = color;\n                    state.linkStyles = state.linkStyles.set(state.selected, newlink);\n                }\n            }\n        },\n        setStrokeWidth (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const link = state.linkStyles.get(state.selected);\n                if (link) {\n                    const width = parseInt(action.payload);\n                    const newlink = cloneLinkStyle(link)!;\n                    isNaN(width) || width === 0\n                        ? delete newlink.strokeWidth\n                        : newlink.strokeWidth = width;\n                    state.linkStyles = state.linkStyles.set(state.selected, newlink);\n                }\n            }\n        },\n        toggleCollapseEdgeStyle (state) {\n            state.collapseEdgeStyle = !state.collapseEdgeStyle;\n        },\n        toggleCollapseScheme (state) {\n            state.collapseScheme = !state.collapseScheme;\n        },\n        toggleHideEmptyFields (state) {\n            state.hideEmptyFields = !state.hideEmptyFields;\n            state.treeField = buildFieldTree(state.fields as AlloyField[], state.hideEmptyFields);\n        }\n    },\n    extraReducers: builder =>\n        builder.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance) {\n\n                const fields = instance.fields();\n                const skolems = instance.skolems().filter(s => s.arity() > 1);\n                const both = [...fields, ...skolems];\n\n                state.fields = fields;\n                state.skolems = skolems;\n                state.treeField = buildFieldTree(fields, state.hideEmptyFields);\n                state.treeSkolem = buildSkolemTree(skolems);\n\n                // Keep any existing label styles\n                state.labelStyles = Map(both.map(item => {\n                    const id = item.id();\n                    return state.labelStyles.has(id)\n                        ? [id, cloneLabelStyle(state.labelStyles.get(id)!)]\n                        : [id, {}]\n                }));\n\n                // Keep any exiting link styles\n                state.linkStyles = Map(both.map(item => {\n                    const id = item.id();\n                    return state.linkStyles.has(id)\n                        ? [id, cloneLinkStyle(state.linkStyles.get(id)!)]\n                        : [id, {}]\n                }));\n\n                // If they don't already exist, create empty link and label\n                // styles for the two categories we've got (fields and skolems)\n                if (!state.labelStyles.has('Fields'))\n                    state.labelStyles = state.labelStyles.set('Fields', {});\n                if (!state.labelStyles.has('Skolems'))\n                    state.labelStyles = state.labelStyles.set('Skolems', {});\n                if (!state.linkStyles.has('Fields'))\n                    state.linkStyles = state.linkStyles.set('Fields', {\n                        strokeWidth: 2\n                    });\n                if (!state.linkStyles.has('Skolems'))\n                    state.linkStyles = state.linkStyles.set('Skolems', {\n                        strokeWidth: 2\n                    });\n\n                // For the Forge folks, let's apply a default color scheme to\n                // anything that isn't already colored (except for the categories).\n                const defaultScheme = COLOR_SCHEMES[2][1]\n                    .concat(COLOR_SCHEMES[1][1])\n                    .concat(COLOR_SCHEMES[0][1]);\n                state.linkStyles = state.linkStyles.withMutations(styles => {\n                    [...state.fields, ...state.skolems].forEach((item, index) => {\n                        const id = item.id();\n                        const link = state.linkStyles.get(id);\n                        if (link && !link.stroke) {\n                            const newlink = cloneLinkStyle(link);\n                            newlink.stroke = defaultScheme[index % defaultScheme.length];\n                            styles.set(id, newlink);\n                        }\n                    });\n                });\n                state.labelStyles = state.labelStyles.withMutations(styles => {\n                    [...state.fields, ...state.skolems].forEach((item, index) => {\n                        const id =item.id();\n                        const label = state.labelStyles.get(id);\n                        if (label && !label.color) {\n                            const newlabel = cloneLabelStyle(label);\n                            newlabel.color = defaultScheme[index % defaultScheme.length];\n                            styles.set(id, newlabel);\n                        }\n                    });\n                });\n\n            } else {\n\n                state.fields = [];\n                state.labelStyles = Map();\n                state.linkStyles = Map();\n                state.selected = null;\n                state.skolems = [];\n                state.treeField = null;\n                state.treeSkolem = null;\n\n            }\n\n        })\n});\n\nexport const {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setColorScheme,\n    setLabelColor,\n    setLabelSize,\n    setStroke,\n    setStrokeWidth,\n    toggleCollapseEdgeStyle,\n    toggleCollapseScheme,\n    toggleHideEmptyFields\n} = edgeStylingSlice.actions;\nexport default edgeStylingSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { LabelPlacement } from '@atdyer/graph-js';\n\nexport interface GraphSettingsState {\n    axesVisible: boolean\n    bundleFactor: number\n    collapseEdgeSettings: boolean\n    collapseGraphSettings: boolean\n    edgeLabelPlacement: LabelPlacement\n    gridVisible: boolean\n}\n\nconst initialState: GraphSettingsState = {\n    axesVisible: false,\n    bundleFactor: 0.15,\n    collapseEdgeSettings: false,\n    collapseGraphSettings: false,\n    gridVisible: false,\n    edgeLabelPlacement: 'spread'\n};\n\nconst graphSettingsSlice = createSlice({\n    name: 'graphsettings',\n    initialState: initialState,\n    reducers: {\n        setBundleFactor (state, action: PayloadAction<number>) {\n            const value = action.payload;\n            if (value >= 0) state.bundleFactor = value;\n        },\n        setLabelPlacement (state, action: PayloadAction<LabelPlacement>) {\n            state.edgeLabelPlacement = action.payload;\n        },\n        toggleAxesVisible (state) { state.axesVisible = !state.axesVisible },\n        toggleCollapseEdgeSettings (state) { state.collapseEdgeSettings = !state.collapseEdgeSettings },\n        toggleCollapseGraphSettings (state) { state.collapseGraphSettings = !state.collapseGraphSettings },\n        toggleGridVisible (state) { state.gridVisible = !state.gridVisible }\n    }\n});\n\nexport const {\n    setBundleFactor,\n    setLabelPlacement,\n    toggleAxesVisible,\n    toggleCollapseEdgeSettings,\n    toggleCollapseGraphSettings,\n    toggleGridVisible\n} = graphSettingsSlice.actions;\nexport default graphSettingsSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport type Alignment = 'UL' | 'UR' | 'DL' | 'DR' | undefined;\nexport type Direction = 'TB' | 'BT' | 'LR' | 'RL';\nexport type Ranker = 'network-simplex' | 'tight-tree' | 'longest-path';\n\nexport interface LayoutState {\n    align: Alignment\n    nodesep: number\n    rankdir: Direction\n    ranker: Ranker\n    ranksep: number\n}\n\nconst initialState: LayoutState = {\n    align: undefined,\n    nodesep: 100,\n    rankdir: 'BT',\n    ranker: 'network-simplex',\n    ranksep: 200\n};\n\nconst layoutSlice = createSlice({\n    name: 'layout',\n    initialState: initialState,\n    reducers: {\n        setAlign (state, action: PayloadAction<Alignment>) {\n            state.align = action.payload;\n        },\n        setNodeSep (state, action: PayloadAction<number>) {\n            state.nodesep = action.payload;\n        },\n        setRankDir (state, action: PayloadAction<Direction>) {\n            state.rankdir = action.payload;\n        },\n        setRanker (state, action: PayloadAction<Ranker>) {\n            state.ranker = action.payload;\n        },\n        setRankSep (state, action: PayloadAction<number>) {\n            state.ranksep = action.payload;\n        }\n    }\n});\n\nexport const {\n    setAlign,\n    setNodeSep,\n    setRankDir,\n    setRanker,\n    setRankSep\n} = layoutSlice.actions;\nexport default layoutSlice.reducer;\n","import { AlloySignature } from 'alloy-ts';\nimport { Tree } from '../../graphTypes';\n\nfunction buildTypeTree (univ: AlloySignature | null, hideEmpty: boolean): Tree | null {\n\n    if (!univ) return null;\n\n    const populate = (sig: AlloySignature): Tree => {\n\n        const subs = hideEmpty\n            ? sig.subTypes().filter(s => s.atoms().length || s.subTypes().length)\n            : sig.subTypes();\n\n        const children = subs.map(populate);\n        return {\n            id: sig.id(),\n            icon: 'group-objects',\n            children\n        };\n\n    };\n\n    return populate(univ);\n\n}\n\nexport {\n    buildTypeTree\n}\n","import {\n    CircleStyle,\n    cloneLabelStyle,\n    cloneShapeStyle,\n    convertToShape,\n    LabelStyle,\n    RectangleStyle,\n    ShapeStyle\n} from '@atdyer/graph-js';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance, AlloySignature } from 'alloy-ts';\nimport { Map } from 'immutable';\nimport { setInstance } from '../../../../sterling/sterlingSlice';\nimport { Tree } from '../../graphTypes';\nimport { COLOR_SCHEMES, foreground } from '../../util';\nimport { buildTypeTree } from './nodeTypes';\n\nexport interface NodeStylingState {\n    collapsed: Map<string, boolean>\n    collapseNodeStyle: boolean\n    hideDisconnected: Map<string, boolean>\n    hideEmptySets: boolean\n    labels: Map<string, LabelStyle>\n    nodeTree: Tree | null\n    selected: string | null\n    shapes: Map<string, ShapeStyle>\n    univ: AlloySignature | null\n}\n\nconst initialState: NodeStylingState = {\n    collapsed: Map(),\n    collapseNodeStyle: false,\n    hideDisconnected: Map(),\n    hideEmptySets: true,\n    labels: Map(),\n    nodeTree: null,\n    selected: null,\n    shapes: Map(),\n    univ: null\n};\n\nconst nodeStylingSlice = createSlice({\n    name: 'nodestyles',\n    initialState: initialState,\n    reducers: {\n        clearAll (state) {\n            state.labels = state.labels.map(() => ({}));\n            state.shapes = state.shapes.map(() => ({}));\n        },\n        clearCurrent (state) {\n            if (state.selected) {\n                state.labels = state.labels.set(state.selected, {});\n                state.shapes = state.shapes.set(state.selected, {});\n            }\n        },\n        collapseTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, true);\n        },\n        expandTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, false);\n        },\n        selectTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            if (state.shapes.has(target)) state.selected = target;\n        },\n        setFill (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape) {\n                    const color = action.payload;\n                    const newshape = shape ? cloneShapeStyle(shape) : {};\n                    color === null\n                        ? delete newshape.fill\n                        : newshape.fill = color;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setHeight (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape && shape.type === 'rectangle') {\n                    const height = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape) as RectangleStyle;\n                    isNaN(height) || height === 0\n                        ? delete newshape.height\n                        : newshape.height = height;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setLabelColor (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const label = state.labels.get(state.selected);\n                if (label) {\n                    const color = action.payload;\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    color === null\n                        ? delete newlabel.color\n                        : newlabel.color = color;\n                    state.labels = state.labels.set(state.selected, newlabel);\n                }\n            }\n        },\n        setLabelSize (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const label = state.labels.get(state.selected);\n                if (label) {\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    const size = parseInt(action.payload);\n                    isNaN(size) || size === 0\n                        ? delete newlabel.font\n                        : newlabel.font = `${size}px sans-serif`;\n                    state.labels = state.labels.set(state.selected, newlabel);\n                }\n            }\n        },\n        setRadius (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape && shape.type === 'circle') {\n                    const radius = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape) as CircleStyle;\n                    isNaN(radius) || radius === 0\n                        ? delete newshape.radius\n                        : newshape.radius = radius;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setShape (state, action: PayloadAction<'circle' | 'rectangle' | null>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                const type = action.payload;\n                if (shape === undefined) return;\n                if ((shape && shape.type !== type) || shape !== type) {\n                    const newshape = convertToShape(shape, type);\n                    state.shapes = state.shapes.set(\n                        state.selected,\n                        newshape\n                    );\n                }\n            }\n        },\n        setStroke (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape) {\n                    const color = action.payload;\n                    const newshape = cloneShapeStyle(shape)!;\n                    color === null\n                        ? delete newshape.stroke\n                        : newshape.stroke = color;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setStrokeWidth (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape) {\n                    const width = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape)!;\n                    isNaN(width) || width === -1\n                        ? delete newshape.strokeWidth\n                        : newshape.strokeWidth = width;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setWidth (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape && shape.type === 'rectangle') {\n                    const width = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape) as RectangleStyle;\n                    isNaN(width) || width === 0\n                        ? delete newshape.width\n                        : newshape.width = width;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        toggleCollapseNodeStyle (state) {\n            state.collapseNodeStyle = !state.collapseNodeStyle;\n        },\n        toggleHideDisconnected (state) {\n            const selected = state.selected;\n            if (selected) {\n                const next = !state.hideDisconnected.get(selected);\n                state.hideDisconnected = state.hideDisconnected.set(selected, next);\n            }\n        },\n        toggleHideEmptySets (state) {\n            state.hideEmptySets = !state.hideEmptySets;\n            state.nodeTree = buildTypeTree(state.univ as AlloySignature, state.hideEmptySets);\n        }\n    },\n    extraReducers: builder =>\n        builder.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance !== null) {\n\n                const signatures = instance.signatures();\n                const univ = signatures.find(sig => sig.id() === 'univ') || null;\n\n                // Build the signature tree using only IDs\n                state.univ = univ;\n                state.nodeTree = buildTypeTree(univ, state.hideEmptySets);\n\n                // For all maps, keeps existing signatures, get rid of ones that\n                // no longer exist, and add new ones\n                state.collapsed = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.collapsed.has(id)\n                        ? [id, !!state.collapsed.get(id)]\n                        : [id, false];\n                }));\n\n                state.hideDisconnected = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.hideDisconnected.has(id)\n                        ? [id, !!state.hideDisconnected.get(id)]\n                        : [id, true];\n                }));\n\n                state.labels = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.labels.has(id)\n                        ? [id, cloneLabelStyle(state.labels.get(id)!)]\n                        : [id, {}];\n                }));\n\n                state.shapes = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.shapes.has(id)\n                        ? [id, cloneShapeStyle(state.shapes.get(id)!)]\n                        : [id, {}];\n                }));\n\n                // For the Forge folks, let's apply a default color scheme to\n                // top level signatures that aren't already colored.\n                const defaultScheme = COLOR_SCHEMES[0][1]\n                    .concat(COLOR_SCHEMES[1][1])\n                    .concat(COLOR_SCHEMES[2][1]);\n                let next = 0;\n                state.shapes = state.shapes.withMutations(styles => {\n                    signatures.forEach(signature => {\n                        const id = signature.id();\n                        const shape = state.shapes.get(id);\n                        if (shape && !shape.fill) {\n                            const newshape = cloneShapeStyle(shape);\n                            newshape.fill = defaultScheme[next++ % defaultScheme.length];\n                            styles.set(id, newshape);\n                        }\n                    });\n                });\n                state.labels = state.labels.withMutations(styles => {\n                    signatures.forEach((signature, index) => {\n                        const id = signature.id();\n                        const shape = state.shapes.get(id);\n                        const label = state.labels.get(id);\n                        if (label && shape && shape.fill) {\n                            const newlabel = cloneLabelStyle(label);\n                            newlabel.color = foreground(shape.fill);\n                            styles.set(id, newlabel);\n                        }\n                    });\n                });\n\n                // If an item was selected, make sure it still exists\n                if (state.selected && !state.shapes.has(state.selected)){\n                    state.selected = null;\n                }\n\n            } else {\n\n                state.collapsed = Map();\n                state.hideDisconnected = Map();\n                state.labels = Map();\n                state.nodeTree = null;\n                state.shapes = Map();\n                state.selected = null;\n                state.univ = null;\n\n            }\n\n        })\n});\n\nexport const {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setFill,\n    setHeight,\n    setLabelColor,\n    setLabelSize,\n    setRadius,\n    setShape,\n    setStroke,\n    setStrokeWidth,\n    setWidth,\n    toggleCollapseNodeStyle,\n    toggleHideDisconnected,\n    toggleHideEmptySets\n} = nodeStylingSlice.actions;\nexport default nodeStylingSlice.reducer;\n","import {\n    AlloyElement,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem, sorting\n} from 'alloy-ts';\n\nexport enum HorizontalAlignment { Left, Center, Right}\nexport enum LayoutDirection { Row, Column}\nexport enum SortDirection { Ascending, Descending}\nexport enum SortMethod { Alphabetical, Builtin, Group, Size}\nexport enum TablesType { All, Signatures, Fields, Skolems, Select}\n\nexport type AlloyNameFn = (item: AlloyElement) => string;\nexport type AlloySortFn = (a: AlloyElement, b: AlloyElement) => number;\nexport type SigFieldSkolem = AlloySignature | AlloyField | AlloySkolem;\nexport type SortType = {\n    method: SortMethod\n    direction: SortDirection\n};\n\nexport const SKOLEM_COLORS = [\n    \"#2965CC\", \"#29A634\", \"#D99E0B\", \"#D13913\", \"#8F398F\",\n    \"#00B3A4\", \"#DB2C6F\", \"#9BBF30\", \"#96622D\", \"#7157D9\"\n];\n\nfunction buildNameFunction (removeThis: boolean): AlloyNameFn {\n    return (item: AlloyElement) => {\n        return removeThis\n            ? item.id().replace(/^this\\//, '')\n            : item.id();\n    }\n}\n\nfunction buildSortFunction (type: SortType, nameFunction: AlloyNameFn): AlloySortFn {\n    if (type.method === SortMethod.Size) {\n        return sorting.sizeSort(type.direction === SortDirection.Ascending);\n    }\n    if (type.method === SortMethod.Alphabetical) {\n        return sorting.alphabeticalSort(nameFunction, type.direction === SortDirection.Ascending);\n    }\n    if (type.method === SortMethod.Group) {\n        return sorting.groupSort();\n    }\n    return () => 0;\n}\n\nfunction getAlignClass (alignment: HorizontalAlignment): string {\n    return alignment === HorizontalAlignment.Left ? 'left' :\n        alignment === HorizontalAlignment.Center ? 'center' :\n            alignment === HorizontalAlignment.Right ? 'right' : '';\n}\n\nfunction getLayoutClass (direction: LayoutDirection): string {\n    return direction === LayoutDirection.Row ? 'row' :\n        direction === LayoutDirection.Column ? 'column' : '';\n}\n\nexport {\n    getAlignClass,\n    buildNameFunction,\n    buildSortFunction,\n    getLayoutClass\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { Graph } from '@atdyer/graph-js';\nimport { createSlice } from '@reduxjs/toolkit';\nimport dataSlice from './drawer-views/data/dataSlice';\nimport edgeStylingSlice from './drawer-views/edge-styling/edgeStylingSlice';\nimport graphSettingsSlice from './drawer-views/graph-settings/graphSettingsSlice';\nimport layoutSlice from './drawer-views/layout/layoutSlice';\nimport nodeStylingSlice from './drawer-views/node-styling/nodeStylingSlice';\n\nexport interface GraphState {\n    graph: Graph\n}\n\nconst initialState: GraphState = {\n    graph: new Graph(),\n};\n\nconst graphSlice = createSlice({\n    name: 'graph',\n    initialState: initialState,\n    reducers: {}\n});\n\nexport default combineReducers({\n    dataSlice,\n    edgeStylingSlice,\n    graphSlice: graphSlice.reducer,\n    graphSettingsSlice,\n    layoutSlice,\n    nodeStylingSlice\n});\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloySource } from 'alloy-ts';\nimport { setInstance } from '../../sterling/sterlingSlice';\n\nexport interface SourceState {\n    selected: AlloySource | null\n}\n\nconst initialState: SourceState = {\n    selected: null\n};\n\nconst sourceSlice = createSlice({\n    name: 'source',\n    initialState: initialState,\n    reducers: {\n        setSelected (state, action: PayloadAction<AlloySource>) {\n            state.selected = action.payload;\n        }\n    },\n    extraReducers: build =>\n        build.addCase(setInstance, state => { state.selected = null })\n});\n\nexport const {\n    setSelected\n} = sourceSlice.actions;\nexport default sourceSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance, AlloySkolem } from 'alloy-ts';\nimport { setInstance } from '../../sterling/sterlingSlice';\nimport {\n    HorizontalAlignment,\n    LayoutDirection,\n    SigFieldSkolem,\n    SKOLEM_COLORS,\n    SortDirection,\n    SortMethod,\n    SortType,\n    TablesType\n} from './tableTypes';\n\n// Table view state\nexport interface TableState {\n    alignment: HorizontalAlignment\n    collapseData: boolean\n    collapseLayout: boolean\n    collapseTables: boolean\n    data: SigFieldSkolem[]\n    dataSelected: SigFieldSkolem[]\n    highlightSkolems: boolean\n    layoutDirection: LayoutDirection\n    removeBuiltin: boolean\n    removeEmpty: boolean\n    removeThis: boolean\n    primarySort: SortType\n    secondarySort: SortType\n    skolemColors: Map<AlloySkolem, string>\n    tablesType: TablesType\n}\n\n// The initial table view state\nconst initialState: TableState = {\n    alignment: HorizontalAlignment.Left,\n    collapseData: false,\n    collapseLayout: false,\n    collapseTables: false,\n    data: [],\n    dataSelected: [],\n    highlightSkolems: true,\n    layoutDirection: LayoutDirection.Row,\n    removeBuiltin: true,\n    removeEmpty: true,\n    removeThis: true,\n    primarySort: {\n        method: SortMethod.Group,\n        direction: SortDirection.Descending\n    },\n    secondarySort: {\n        method: SortMethod.Size,\n        direction: SortDirection.Descending\n    },\n    skolemColors: new Map(),\n    tablesType: TablesType.All\n};\n\n// The table slice\nconst tableSlice = createSlice({\n    name: 'table',\n    initialState: initialState,\n    reducers: {\n        clearSelectedData (state) { state.dataSelected = [] },\n        deselectData (state, action: PayloadAction<SigFieldSkolem>) {\n            const index = state.dataSelected.indexOf(action.payload);\n            if (index !== -1) {\n                state.dataSelected.splice(index, 1);\n            }\n            state.tablesType = TablesType.Select;\n        },\n        selectData (state, action: PayloadAction<SigFieldSkolem>) {\n            if (!state.dataSelected.includes(action.payload)) {\n                state.dataSelected.push(action.payload);\n            }\n            state.tablesType = TablesType.Select;\n        },\n        setAlignment (state, action: PayloadAction<HorizontalAlignment>) { state.alignment = action.payload },\n        setLayoutDirection (state, action: PayloadAction<LayoutDirection>) { state.layoutDirection = action.payload },\n        setSort (state, action: PayloadAction<SortType>) {\n            if (state.primarySort.method !== action.payload.method) {\n                state.secondarySort = state.primarySort;\n            }\n            state.primarySort = action.payload;\n        },\n        setTableTypes (state, action: PayloadAction<TablesType>) { state.tablesType = action.payload },\n        toggleCollapseData (state) { state.collapseData = !state.collapseData },\n        toggleCollapseLayout (state) { state.collapseLayout = !state.collapseLayout },\n        toggleCollapseTables (state) { state.collapseTables = !state.collapseTables },\n        toggleHighlightSkolems (state) {\n            state.highlightSkolems = !state.highlightSkolems;\n            if (state.highlightSkolems && state.tablesType === TablesType.Skolems) {\n                state.tablesType = TablesType.All;\n            }\n        },\n        toggleRemoveBuiltin (state) { state.removeBuiltin = !state.removeBuiltin },\n        toggleRemoveEmpty (state) { state.removeEmpty = !state.removeEmpty },\n        toggleRemoveThis (state) { state.removeThis = !state.removeThis }\n    },\n    extraReducers: builder =>\n        builder.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance) {\n\n                const skolems = instance.skolems();\n\n                state.data = [\n                    ...instance.signatures(),\n                    ...instance.fields(),\n                    ...skolems\n                ];\n\n                state.skolemColors = new Map(skolems.map((skolem, i) => {\n                    return [skolem, SKOLEM_COLORS[i % skolems.length]];\n                }));\n\n                state.dataSelected = state.dataSelected.filter(item => {\n                    return state.data.find(curr => curr.id() === item.id()) !== undefined;\n                })\n\n            }\n\n        })\n});\n\nexport const {\n    clearSelectedData,\n    deselectData,\n    selectData,\n    setAlignment,\n    setLayoutDirection,\n    setSort,\n    setTableTypes,\n    toggleCollapseData,\n    toggleCollapseLayout,\n    toggleCollapseTables,\n    toggleHighlightSkolems,\n    toggleRemoveBuiltin,\n    toggleRemoveEmpty,\n    toggleRemoveThis\n} = tableSlice.actions;\n\nexport default tableSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport graphSlice from './features/graph/graphSlice';\nimport sourceSlice from './features/source/sourceSlice';\nimport sterlingSlice from './sterling/sterlingSlice';\nimport tableSlice from './features/table/tableSlice';\n\n\nexport const sterlingApp = combineReducers({\n    graphSlice,\n    sourceSlice,\n    sterlingSlice,\n    tableSlice\n});\n\nexport type RootState = ReturnType<typeof sterlingApp>;\n","import { SterlingConnection } from '../sterling/SterlingConnection';\nimport { EventDispatcher } from '../util/EventDispatcher';\n\nexport interface Expression {\n    id: number\n    expression: string\n    error: boolean\n    result: null | boolean | number | string\n}\n\nclass Evaluator extends EventDispatcher {\n\n    private _connection: SterlingConnection;\n    private _expressions: Expression[];\n    private _pending: Expression | null;\n\n    protected static _nextid: number = 0;\n\n    constructor (connection: SterlingConnection) {\n\n        super();\n\n        this._connection = connection;\n        this._expressions = [];\n        this._pending = null;\n\n        connection.addEventListener('eval', event => {\n            this._parse(event.data);\n        });\n\n    }\n\n    clear (): void {\n\n        this._expressions = [];\n\n    }\n\n    evaluate (expression: string): void {\n\n        this._request({\n            id: Evaluator._nextid++,\n            error: false,\n            expression: expression,\n            result: null\n        });\n\n    }\n\n    expressions (): Expression[] {\n\n        return this._expressions;\n\n    }\n\n    private _parse (response: string): void {\n\n        const expression = this._pending;\n        const tokens = response.match(/(-?\\d+):(.*)/);\n\n        if (tokens === null) return;\n\n        const id = parseInt(tokens[1]);\n\n        if (expression && expression.id === id) {\n\n            const result = tokens[2].trim();\n\n            if (result.slice(0, 4) === 'ERR:') {\n                expression.result = result.slice(4);\n                expression.error = true;\n            }\n            else {\n                expression.result = result;\n                expression.error = false;\n            }\n\n            this._expressions.push(expression);\n            this._setPending(null);\n\n        }\n\n    }\n\n    private _request (expression: Expression): void {\n\n        this._setPending(expression);\n\n        const submitted = this._connection.requestEvaluateExpression(\n            expression.id,\n            expression.expression\n        );\n\n        if (!submitted) {\n\n            this._parse(`${expression.id}:ERR:Error: Not Connected`);\n\n        }\n\n    }\n\n    private _setPending (expression: Expression | null): void {\n\n        this._pending = expression;\n\n        if (expression !== null) {\n\n            this.dispatchEvent({\n                type: 'pending'\n            });\n\n        } else {\n            \n            this.dispatchEvent({\n                type: 'ready'\n            });\n            \n        }\n\n    }\n\n}\n\nexport {\n    Evaluator\n}\n","import React from 'react';\n\ninterface EvaluatorTableProps {\n    result: string\n}\n\nconst EvaluatorTable: React.FunctionComponent<EvaluatorTableProps> = props => {\n\n    return (\n        <table className={'bp3-html-table bp3-html-table-condensed bp3-html-table-striped .bp3-interactive'}>\n            <tbody>\n            {\n                parseResult(props.result).map((row, i) => (\n                    <tr key={i}>\n                        {\n                            row.map((col, j) => (\n                                <td key={j}>\n                                    { col }\n                                </td>\n                            ))\n                        }\n                    </tr>\n                ))\n            }\n            </tbody>\n        </table>\n    );\n\n};\n\nfunction parseResult (result: string): string[][] {\n\n    if (result[0] === '{' && result[result.length-1] === '}') {\n\n        const text = result.slice(1, -1);\n        const rows = text.split(',');\n        return rows.map(row => {\n            return row.split('->');\n        });\n\n    }\n\n    return [];\n\n}\n\nexport default EvaluatorTable;\n","import {\n    Button,\n    Callout,\n    Icon,\n    Intent,\n    NonIdealState, Tooltip\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { Evaluator, Expression } from './Evaluator';\nimport EvaluatorTable from './EvaluatorTable';\n\nexport interface IEvaluatorProps {\n    evaluator: Evaluator\n}\n\ninterface IEvaluatorState {\n    count: number\n    expressions: Expression[]\n    history: number\n    table: boolean\n}\n\nclass EvaluatorView extends React.Component<IEvaluatorProps, IEvaluatorState> {\n\n    private readonly _botRef: React.RefObject<HTMLDivElement>;\n    private readonly _textRef: React.RefObject<HTMLTextAreaElement>;\n\n    constructor (props: IEvaluatorProps) {\n\n        super(props);\n\n        const evaluator = props.evaluator;\n        evaluator.addEventListener('pending', this._onPending);\n        evaluator.addEventListener('ready', this._onReady);\n\n        this._botRef = React.createRef();\n        this._textRef = React.createRef();\n\n        const expressions = props.evaluator.expressions();\n        this.state = {\n            count: expressions.length,\n            expressions: expressions,\n            history: expressions.length,\n            table: false\n        }\n\n    }\n\n    componentDidMount(): void {\n\n        this._scrollDown();\n\n    }\n\n    componentDidUpdate(prevProps: Readonly<IEvaluatorProps>, prevState: Readonly<IEvaluatorState>): void {\n\n        if (prevState.count !== this.state.count) {\n\n            this._scrollDown();\n\n        }\n\n    }\n\n    componentWillUnmount(): void {\n\n        const evaluator = this.props.evaluator;\n        evaluator.removeEventListener('pending', this._onPending);\n        evaluator.removeEventListener('ready', this._onReady);\n\n    }\n\n    render (): React.ReactNode {\n\n        const state = this.state;\n        const SuccessIcon = <Icon icon={'circle'} iconSize={12}/>;\n        const ErrorIcon = <Icon icon={'cross'} iconSize={12}/>;\n\n        state.history < state.count\n            ? this._setText(state.expressions[state.history].expression)\n            : this._setText('');\n\n        return (\n            <div className={'evaluator'}>\n                <div className={'evaluator-bar bp3-dark'}>\n                    <Tooltip\n                        content={'Clear'}\n                        hoverOpenDelay={500}\n                        intent={Intent.PRIMARY}>\n                        <Button\n                            small={true}\n                            minimal={true}\n                            icon={'clean'}\n                            onClick={() => {\n                                this.props.evaluator.clear();\n                                this.setState({\n                                    expressions: this.props.evaluator.expressions()\n                                });\n                            }}/>\n                    </Tooltip>\n                    <Tooltip\n                        content={state.table ? 'Display Text' : 'Display Tables'}\n                        hoverOpenDelay={500}\n                        intent={Intent.PRIMARY}>\n                        <Button\n                            small={true}\n                            minimal={true}\n                            icon={state.table ? 'align-left' : 'th'}\n                            onClick={() => this.setState({ table: !state.table })}/>\n                    </Tooltip>\n                </div>\n                <div className={'evaluator-output'}>\n                    {\n                        state.expressions.length\n                            ? state.expressions.map(expression => (\n                                <Callout\n                                    key={expression.id}\n                                    icon={expression.error ? ErrorIcon : SuccessIcon}\n                                    title={expression.expression}\n                                    intent={expression.error ? Intent.DANGER : Intent.NONE}\n                                >\n                                    {\n                                        state.table && isTableable(expression) && typeof expression.result === 'string'\n                                            ? <EvaluatorTable result={expression.result}/>\n                                            : expression.result\n                                    }\n                                </Callout>\n                            ))\n                            : <NonIdealState\n                                title={'Evaluator'}\n                                description={'Enter an expression below'}\n                                icon={'console'}/>\n                    }\n                    <div ref={this._botRef}/>\n                </div>\n                <div className={'evaluator-input'}>\n                    <textarea\n                        autoComplete={'off'}\n                        placeholder={'Enter an expression...'}\n                        spellCheck={'false'}\n                        onKeyDown={this._onKeyDown}\n                        ref={this._textRef}\n                    />\n                </div>\n            </div>\n        );\n\n    }\n\n    private _onDown = (): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            const pos = textarea.selectionStart;\n            const len = textarea.value.length;\n\n            if (pos === len) {\n\n                const history = this.state.history < this.state.count\n                    ? this.state.history + 1\n                    : this.state.count;\n\n                this.setState({\n                    history: history\n                });\n\n            }\n        }\n\n    };\n\n    private _onEnter = (): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            const value = textarea.value;\n            textarea.value = '';\n\n            if (value.length)\n                this.props.evaluator.evaluate(value);\n\n        }\n\n    };\n\n    private _onKeyDown = (event: React.KeyboardEvent): void => {\n        const key = event.key;\n        switch (key) {\n            case 'Enter':\n                event.preventDefault();\n                this._onEnter();\n                break;\n            case 'ArrowUp':\n                this._onUp();\n                break;\n            case 'ArrowDown':\n                this._onDown();\n                break;\n            default:\n                break;\n        }\n    };\n\n    private _onPending = (): void => {\n\n        this._setActive(false);\n\n    };\n\n    private _onReady = (): void => {\n\n        this._setActive(true);\n        const expressions = this.props.evaluator.expressions();\n        this.setState({\n            count: expressions.length,\n            expressions: expressions,\n            history: expressions.length\n        });\n\n    };\n\n    private _onUp = (): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            if (textarea.selectionStart === 0) {\n\n                const history = this.state.history > 0\n                    ? this.state.history - 1\n                    : 0;\n\n                this.setState({\n                    history: history\n                });\n\n            }\n\n        }\n\n    };\n\n    private _scrollDown = (): void => {\n\n        const bottom = this._botRef.current;\n\n        if (bottom) {\n\n            bottom.scrollIntoView();\n\n        }\n\n    };\n\n    private _setActive = (active: boolean): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            textarea.readOnly = !active;\n\n        }\n\n    };\n\n    private _setText = (text: string): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            textarea.value = text;\n\n        }\n\n    };\n\n}\n\nfunction isTableable (expression: Expression): boolean {\n    const r = expression.result;\n    return !expression.error\n        && typeof r === 'string'\n        && r.length > 0\n        && r[0] === '{' && r[r.length-1] === '}';\n}\n\nexport default EvaluatorView;\n","import { Button, Collapse } from '@blueprintjs/core';\nimport React, { CSSProperties } from 'react';\n\ninterface ISectionProps {\n    collapsed?: boolean\n    onToggle?: () => void\n    style?: CSSProperties\n    title?: string\n}\n\nconst Section: React.FunctionComponent<ISectionProps> = props => {\n\n    const collapseIcon = props.collapsed ? 'expand-all' : 'collapse-all';\n\n    return (\n        <div\n            className={`section ${props.collapsed ? 'collapsed' : ''}`}\n            style={props.style}>\n            {\n                !!props.title &&\n                <div className='header'>\n                    <div className='title'>\n                        {props.title.toUpperCase()}\n                    </div>\n                    {\n                        props.onToggle && <Button\n                            icon={collapseIcon}\n                            minimal={true}\n                            onClick={props.onToggle}/>\n                    }\n                </div>\n            }\n            <Collapse\n                isOpen={!props.collapsed}\n                keepChildrenMounted={true}>\n                <div className='body'>\n                    {props.children}\n                </div>\n            </Collapse>\n        </div>\n    );\n};\n\nclass SterlingDrawer extends React.Component {\n\n    static Section = Section;\n\n    render (): React.ReactNode {\n\n        return (\n            <div className={'drawer'}>\n                { this.props.children }\n            </div>\n        );\n\n    }\n\n}\n\nexport default SterlingDrawer;\n","import { Button, ButtonGroup, Tooltip } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport { backgroundGradient, COLOR_SCHEMES } from '../../util';\nimport { setColorScheme, toggleCollapseScheme } from './edgeStylingSlice';\n\nconst mapState = (state: RootState) => ({\n    collapse: state.graphSlice.edgeStylingSlice.collapseScheme,\n    labelStyles: state.graphSlice.edgeStylingSlice.labelStyles,\n    linkStyles: state.graphSlice.edgeStylingSlice.linkStyles\n});\n\nconst mapDispatch = {\n    setColorScheme,\n    toggleCollapseScheme\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype QuickEdgeStylingProps = ConnectedProps<typeof connector>;\n\nconst QuickEdgeStyling: React.FunctionComponent<QuickEdgeStylingProps> = props => {\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapse}\n            onToggle={props.toggleCollapseScheme}\n            title={'Quick Color Scheme'}>\n            <ButtonGroup minimal={true} style={{\n                flexWrap: 'wrap',\n                maxHeight: '15px',\n                overflow: 'hidden'\n            }}>\n                {\n                    COLOR_SCHEMES.map(([name, scheme]) => (\n                        <Tooltip content={name} key={name}>\n                            <Button minimal={true} style={{\n                                background: backgroundGradient(scheme.slice(0, 6)),\n                                margin: '0 5px',\n                                minWidth: '40px',\n                                minHeight: '15px'\n                            }} onClick={() => props.setColorScheme(scheme)}/>\n                        </Tooltip>\n                    ))\n                }\n            </ButtonGroup>\n        </SterlingDrawer.Section>\n    );\n};\n\nexport default connector(QuickEdgeStyling);\n","import { LabelPlacement } from '@atdyer/graph-js';\nimport { FormGroup, HTMLSelect, NumericInput } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport {\n    setBundleFactor,\n    setLabelPlacement,\n    toggleCollapseEdgeSettings\n} from './graphSettingsSlice';\n\nconst LABEL_PLACEMENT_OPTIONS = [\n    { value: 'center', label: 'Center' },\n    { value: 'join', label: 'Join' },\n    { value: 'spread', label: 'Spread' }\n];\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.graphSettingsSlice\n});\n\nconst mapDispatch = {\n    setBundleFactor,\n    setLabelPlacement,\n    toggleCollapseEdgeSettings\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype EdgeSettingsProps = ConnectedProps<typeof connector>;\n\nconst EdgeSettings: React.FunctionComponent<EdgeSettingsProps> = props => (\n    <SterlingDrawer.Section\n        collapsed={props.collapseEdgeSettings}\n        onToggle={props.toggleCollapseEdgeSettings}\n        title={'Edge Settings'}>\n        <FormGroup inline={true} label={'Bundle Factor'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                fill={false}\n                value={props.bundleFactor}\n                min={0}\n                minorStepSize={0.001}\n                stepSize={0.01}\n                majorStepSize={0.1}\n                onValueChange={value => props.setBundleFactor(value)}/>\n        </FormGroup>\n        <FormGroup inline={true} label={'Label Placement'}>\n            <HTMLSelect\n                minimal={true}\n                options={LABEL_PLACEMENT_OPTIONS}\n                value={props.edgeLabelPlacement}\n                onChange={event => {\n                    props.setLabelPlacement(event.target.value as LabelPlacement)\n                }}/>\n        </FormGroup>\n    </SterlingDrawer.Section>\n);\n\nexport default connector(EdgeSettings);\n","import { DagreLayout } from '@atdyer/graph-js';\nimport { Button, FormGroup, HTMLSelect, NumericInput } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport {\n    Alignment, Direction, Ranker,\n    setAlign,\n    setNodeSep,\n    setRankDir,\n    setRanker,\n    setRankSep\n} from './layoutSlice';\n\nconst ALIGN_OPTIONS = [\n    { value: 'undefined', label: '---' },\n    { value: 'UL', label: 'Bottom Left'},\n    { value: 'UR', label: 'Bottom Right'},\n    { value: 'DL', label: 'Top Left' },\n    { value: 'DR', label: 'Top Right' }\n];\n\nconst DIRECTION_OPTIONS = [\n    { value: 'TB', label: 'Bottom to Top' },\n    { value: 'BT', label: 'Top to Bottom' },\n    { value: 'LR', label: 'Left to Right' },\n    { value: 'RL', label: 'Right to Left' }\n];\n\nconst RANKER_OPTIONS = [\n    { value: 'network-simplex', label: 'Network Simplex' },\n    { value: 'tight-tree', label: 'Tight Tree' },\n    { value: 'longest-path', label: 'Longest Path' }\n];\n\nconst mapState = (state: RootState) => ({\n    graph: state.graphSlice.graphSlice.graph,\n    options: state.graphSlice.layoutSlice\n});\n\nconst mapDispatch = {\n    setAlign,\n    setNodeSep,\n    setRankDir,\n    setRanker,\n    setRankSep\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype LayoutProps = ConnectedProps<typeof connector>;\n\nconst Layout: React.FunctionComponent<LayoutProps> = props => {\n\n    const options = Object.assign({}, props.options);\n\n    return (\n        <SterlingDrawer.Section\n            title={'Layout'}>\n            <FormGroup inline={true} label={'Align'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={ALIGN_OPTIONS}\n                    value={options.align === undefined ? 'undefined' : options.align}\n                    onChange={event => {\n                        const value = event.target.value === 'undefined' ? undefined : event.target.value;\n                        props.setAlign(value as Alignment)\n                    }}/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Node Separation'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    value={options.nodesep}\n                    onValueChange={value => props.setNodeSep(value)}/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Ranking Method'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={RANKER_OPTIONS}\n                    value={options.ranker}\n                    onChange={event =>\n                        props.setRanker(event.target.value as Ranker)\n                    }/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Rank Direction'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={DIRECTION_OPTIONS}\n                    value={options.rankdir}\n                    onChange={event =>\n                        props.setRankDir(event.target.value as Direction)\n                    }/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Rank Separation'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    value={options.ranksep}\n                    onValueChange={value => props.setRankSep(value)}/>\n            </FormGroup>\n            <Button\n                minimal={true}\n                text={'Apply Layout'}\n                onClick={() => {\n                    if (props.graph) {\n                        const dagre = new DagreLayout();\n                        dagre.apply(props.graph, options);\n                        props.graph.update();\n                    }\n                }}/>\n        </SterlingDrawer.Section>\n    );\n\n};\n\nexport default connector(Layout);\n","import {\n    Button,\n    ControlGroup,\n    HTMLSelect,\n    Popover,\n    Position,\n    Text\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport { POPPER_MODIFIERS } from '../../util';\nimport {\n    addProjection,\n    nextAtom,\n    previousAtom,\n    removeProjection,\n    setProjection,\n    toggleCollapseProjections\n} from '../data/dataSlice';\n\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.dataSlice\n});\n\nconst mapDispatch = {\n    addProjection,\n    nextAtom,\n    previousAtom,\n    removeProjection,\n    setProjection,\n    toggleCollapseProjections\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype ProjectionsProps = ConnectedProps<typeof connector>;\n\nconst Projections: React.FunctionComponent<ProjectionsProps> = props => {\n\n    const projections = props.projections.toArray();\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapseProjections}\n            onToggle={props.toggleCollapseProjections}\n            title={'Projections'}>\n            <div className={'projections'}>\n                {\n                    projections.map(projection => {\n                        const sig = projection[0];\n                        const atom = projection[1];\n                        const atoms = props.atoms.get(sig) || [];\n                        return <React.Fragment key={sig}>\n                            <Text ellipsize={true}>{ sig }</Text>\n                            <HTMLSelect\n                                minimal={true}\n                                onChange={event => {\n                                    props.setProjection({\n                                        sig: sig,\n                                        atom: event.target.value\n                                    })\n                                }}\n                                options={atoms}\n                                value={atom}/>\n                            <div className={'buttons'}>\n                                <Button\n                                    icon={'chevron-left'}\n                                    minimal={true}\n                                    onClick={() => props.previousAtom(sig)}/>\n                                <Button\n                                    icon={'cross'}\n                                    minimal={true}\n                                    onClick={() => props.removeProjection(sig)}/>\n                                <Button\n                                    icon={'chevron-right'}\n                                    minimal={true}\n                                    onClick={() => props.nextAtom(sig)}/>\n                            </div>\n                        </React.Fragment>\n                    })\n                }\n            </div>\n            {\n                props.unprojected.size > 0 && (\n                    <Popover\n                        className={'centered'}\n                        hasBackdrop={true}\n                        modifiers={POPPER_MODIFIERS}\n                        position={Position.BOTTOM}\n                        usePortal={true}\n                        wrapperTagName={'div'}>\n                        <Button\n                            icon={'add'}\n                            minimal={true}\n                            text={'Add Projection'}/>\n                        <ControlGroup vertical={true}>\n                            {\n                                props.unprojected.map(sig => (\n                                    <Button\n                                        key={sig}\n                                        minimal={true}\n                                        onClick={() => props.addProjection(sig)}\n                                        text={sig}/>\n                                ))\n                            }\n                        </ControlGroup>\n                    </Popover>\n                )\n            }\n        </SterlingDrawer.Section>\n    );\n\n};\n\nexport default connector(Projections);\n","import {\n    Button,\n    FormGroup,\n    NumericInput,\n    Popover,\n    Position\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {\n    background,\n    POPPER_MODIFIERS,\n    DEFAULT_COLORS,\n    foreground\n} from '../util';\n\ninterface ILabelStyle {\n    color?: string\n    size?: number\n    onChangeColor: (color: string | null) => void\n    onChangeSize: (size: string) => void\n}\n\nconst LabelStyler: React.FunctionComponent<ILabelStyle> = props => {\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Label Size (px)'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    min={0}\n                    minorStepSize={null}\n                    onValueChange={(_, strVal) => props.onChangeSize(strVal)}\n                    placeholder={'Inheret'}\n                    value={props.size}/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Label Color'}>\n                {\n                    props.color &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeColor(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(props.color),\n                            color: foreground(props.color)\n                        }}\n                        text={props.color || 'Inheret'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(props.color)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeColor(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n        </>\n    );\n\n};\n\nexport default LabelStyler;\n","import { IconName, ITreeNode, MaybeElement } from '@blueprintjs/core';\nimport { Map } from 'immutable';\n\nexport type Tree = {\n    id: string\n    icon?: IconName | MaybeElement\n    label?: string | JSX.Element\n    children: Tree[]\n}\n\nfunction mapTreeToNodes (tree: Tree | null, collapsed: Map<string, boolean>, selected: string | null): ITreeNode {\n\n    if (tree === null) return {\n        id: 'error',\n        label: 'No Instance',\n        icon: 'error'\n    };\n\n    const populate = (t: Tree): ITreeNode => {\n        const childNodes = t.children.map(populate);\n        return {\n            id: t.id,\n            label: t.label ? t.label : t.id,\n            icon: t.icon,\n            isExpanded: !collapsed.get(t.id),\n            isSelected: t.id === selected,\n            hasCaret: !!childNodes.length,\n            childNodes\n        }\n    };\n\n    return populate(tree);\n\n}\n\nexport {\n    mapTreeToNodes\n}\n","import { Button, FormGroup, NumericInput, Popover } from '@blueprintjs/core';\nimport { Position } from '@blueprintjs/core/lib/esm/common/position';\nimport React from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {\n    background,\n    DEFAULT_COLORS,\n    foreground,\n    POPPER_MODIFIERS\n} from '../../../util';\n\ninterface ILinkStyle {\n    stroke?: string\n    strokeWidth?: number\n    onChangeStroke: (color: string | null) => void\n    onChangeStrokeWidth: (width: string) => void\n}\n\nconst LinkStyler: React.FunctionComponent<ILinkStyle> = props => {\n\n    const stroke = props.stroke;\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Stroke'}>\n                {\n                    props.stroke &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeStroke(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(stroke),\n                            color: foreground(stroke)\n                        }}\n                        text={stroke || 'Inherit'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(stroke)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeStroke(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n            <FormGroup inline={true} label={'Stroke Width'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    min={0}\n                    onValueChange={(_, strVal) => props.onChangeStrokeWidth(strVal)}\n                    placeholder={'Inherit'}\n                    value={props.strokeWidth}/>\n            </FormGroup>\n        </>\n    );\n\n};\n\nexport default LinkStyler;\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    Divider, FormGroup,\n    NonIdealState, Switch,\n    Tooltip,\n    Tree\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport LabelStyler from '../../drawer-components/LabelStyler';\nimport { mapTreeToNodes } from '../../graphTypes';\nimport LinkStyler from './components/LinkStyler';\nimport {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setLabelColor,\n    setLabelSize,\n    setStroke,\n    setStrokeWidth,\n    toggleCollapseEdgeStyle,\n    toggleHideEmptyFields\n} from './edgeStylingSlice';\nimport { toggleAsAttribute } from '../data/dataSlice';\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.edgeStylingSlice,\n    asAttribute: state.graphSlice.dataSlice.asAttribute\n});\n\nconst mapDispatch = {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setLabelColor,\n    setLabelSize,\n    setStroke,\n    setStrokeWidth,\n    toggleAsAttribute,\n    toggleCollapseEdgeStyle,\n    toggleHideEmptyFields\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype EdgeStylingProps = ConnectedProps<typeof connector>;\n\nconst EdgeStyling: React.FunctionComponent<EdgeStylingProps> = props => {\n\n    const selected = props.selected;\n\n    // Link properties\n    const link = selected ? props.linkStyles.get(selected) || {} : {};\n    const attr = selected ? props.asAttribute.get(selected) : false;\n    const stroke = link ? link.stroke : undefined;\n    const strokeWidth = link ? link.strokeWidth : undefined;\n\n    // Label properties\n    const label = selected ? props.labelStyles.get(selected) || {} : {};\n    const labelColor = label ? label.color : undefined;\n    const font = label ? label.font : undefined;\n    const match = font ? font.match(/(\\d*)px/) : [];\n    const labelSize = match\n        ? match.length > 1\n            ? parseInt(match[1])\n            : undefined\n        : undefined;\n\n    // Tree properties\n    const fieldTree = mapTreeToNodes(props.treeField, props.collapsed, selected);\n    const skolemTree = mapTreeToNodes(props.treeSkolem, props.collapsed, selected);\n    const isempty = fieldTree.id === 'error' && skolemTree.id === 'error';\n    const hasskolem = skolemTree.childNodes && skolemTree.childNodes.length;\n    const trees = (isempty || !hasskolem) ? [fieldTree] : [fieldTree, skolemTree];\n    const hideFld = props.hideEmptyFields;\n    fieldTree.secondaryLabel = (\n        <Tooltip\n            content={hideFld ? 'Show Empty Fields' : 'Hide Empty Fields'}>\n            <Button\n                icon={hideFld ? 'eye-off' : 'eye-open'}\n                minimal={true}\n                onClick={props.toggleHideEmptyFields}/>\n        </Tooltip>\n    );\n\n\n    return (\n        <>\n            <SterlingDrawer.Section\n                collapsed={props.collapseEdgeStyle}\n                onToggle={props.toggleCollapseEdgeStyle}\n                title={'Edge Styling'}>\n                <Tree\n                    contents={trees}\n                    onNodeClick={node => props.selectTreeNode(node.id.toString())}\n                    onNodeCollapse={node => props.collapseTreeNode(node.id.toString())}\n                    onNodeExpand={node => props.expandTreeNode(node.id.toString())}/>\n                <Divider/>\n                {\n                    selected\n                        ? (\n                            <>\n                                <FormGroup>\n                                    <Switch\n                                        alignIndicator={Alignment.RIGHT}\n                                        checked={attr}\n                                        label={'Show as Attribute'}\n                                        onChange={() => props.toggleAsAttribute(selected)}/>\n                                </FormGroup>\n                                <LinkStyler\n                                    stroke={stroke}\n                                    strokeWidth={strokeWidth}\n                                    onChangeStroke={props.setStroke}\n                                    onChangeStrokeWidth={props.setStrokeWidth}/>\n                                <LabelStyler\n                                    color={labelColor}\n                                    size={labelSize}\n                                    onChangeColor={props.setLabelColor}\n                                    onChangeSize={props.setLabelSize}/>\n                                <ButtonGroup\n                                    fill={true}\n                                    minimal={true}>\n                                    <Button\n                                        icon={'clean'}\n                                        onClick={props.clearCurrent}\n                                        text={'Clear Selected'}/>\n                                    <Button\n                                        icon={'clean'}\n                                        onClick={props.clearAll}\n                                        text={'Clear All'}/>\n                                </ButtonGroup>\n                            </>\n                        )\n                        : (\n                            <NonIdealState\n                                title={'Edge Styling'}\n                                description={'Select a field or skolem from the tree'}\n                                icon={'style'}/>\n\n                        )\n                }\n            </SterlingDrawer.Section>\n        </>\n    )\n};\n\nexport default connector(EdgeStyling);\n","import { Alignment, Switch } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport {\n    toggleAxesVisible,\n    toggleCollapseGraphSettings,\n    toggleGridVisible\n} from './graphSettingsSlice';\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.graphSettingsSlice\n});\n\nconst mapDispatch = {\n    toggleAxesVisible,\n    toggleCollapseGraphSettings,\n    toggleGridVisible\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype GraphSettingsProps = ConnectedProps<typeof connector>;\n\nconst GraphSettings: React.FunctionComponent<GraphSettingsProps> = props => (\n    <SterlingDrawer.Section\n        collapsed={props.collapseGraphSettings}\n        onToggle={props.toggleCollapseGraphSettings}\n        title={'Graph Settings'}>\n        <Switch\n            alignIndicator={Alignment.RIGHT}\n            checked={props.axesVisible}\n            label={'Display Axes'}\n            onChange={props.toggleAxesVisible}/>\n        <Switch\n            alignIndicator={Alignment.RIGHT}\n            checked={props.gridVisible}\n            label={'Display Grid'}\n            onChange={props.toggleGridVisible}/>\n    </SterlingDrawer.Section>\n);\n\nexport default connector(GraphSettings);\n","import {\n    CircleLayout,\n    DagreLayout,\n    GridLayout,\n    RowLayout\n} from '@atdyer/graph-js';\nimport { Button, ButtonGroup, Tooltip } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\n\n// Map redux state to layout settings props\nconst mapState = (state: RootState) => ({\n    graph: state.graphSlice.graphSlice.graph,\n    instance: state.sterlingSlice.instance\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype LayoutProps = ConnectedProps<typeof connector>;\n\n// The layout and projections component\nconst QuickLayout: React.FunctionComponent<LayoutProps> = props => {\n    return (\n        <SterlingDrawer.Section title={'Quick Layout'}>\n            <ButtonGroup minimal={true}>\n                <Tooltip content={'Circle Layout'}>\n                    <Button icon={'layout-circle'} onClick={() => {\n                        if (props.graph) {\n                            const circle = new CircleLayout();\n                            circle.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n                <Tooltip content={'Grid Layout'}>\n                    <Button icon={'layout-grid'} onClick={() => {\n                        if (props.graph) {\n                            const grid = new GridLayout();\n                            grid.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n                <Tooltip content={'Grouped Row Layout'}>\n                    <Button icon={'layout-linear'} onClick={() => {\n                        if (props.graph && props.instance) {\n                            const row = new RowLayout();\n                            const univ = props.instance.signatures().find(sig => sig.id() === 'univ');\n                            if (univ) {\n                                row.groups(univ.subTypes().map(sig => sig.atoms(true).map(atom => atom.name())))\n                            }\n                            row.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n                <Tooltip content={'Layered Layout'}>\n                    <Button icon={'layout-hierarchy'} onClick={() => {\n                        if (props.graph) {\n                            const dagre = new DagreLayout();\n                            dagre.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n            </ButtonGroup>\n        </SterlingDrawer.Section>\n    );\n};\n\nexport default connector(QuickLayout);\n","import { CircleStyle, RectangleStyle, ShapeStyle } from '@atdyer/graph-js';\nimport { FormGroup, HTMLSelect, NumericInput } from '@blueprintjs/core';\nimport React from 'react';\n\ninterface IShapeSelector {\n    shape: ShapeStyle\n    onSetHeight: (height: string) => void\n    onSetRadius: (radius: string) => void\n    onSetShape: (shape: 'circle' | 'rectangle' | null) => void\n    onSetWidth: (width: string) => void\n}\n\nconst ShapeSelector: React.FunctionComponent<IShapeSelector> = props => {\n\n    const shape = props.shape;\n    const type = shape ? shape.type || 'inherit' : 'inherit';\n\n    const options = [\n        { value: 'inherit', label: 'Inherit' },\n        { value: 'circle', label: 'Circle' },\n        { value: 'rectangle', label: 'Rectangle' }\n    ];\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Shape'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={options}\n                    value={type}\n                    onChange={event => {\n                        let value = event.target.value;\n                        props.onSetShape(valueToShape(value));\n                    }}\n                />\n            </FormGroup>\n            {\n                type === 'circle' ?\n                    <CircleProps\n                        style={shape as CircleStyle}\n                        onSetRadius={props.onSetRadius}/> :\n                type === 'rectangle' ?\n                    <RectangleProps\n                        style={shape as RectangleStyle}\n                        onSetWidth={props.onSetWidth}\n                        onSetHeight={props.onSetHeight}/> :\n                null\n            }\n        </>\n    )\n};\n\ninterface ICircleProps {\n    style: CircleStyle\n    onSetRadius: (radius: string) => void\n}\nconst CircleProps: React.FunctionComponent<ICircleProps> = props => {\n    const radius = props.style.radius;\n    return (\n        <FormGroup inline={true} label={'Radius'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                fill={false}\n                min={0}\n                onValueChange={(_, strVal) => props.onSetRadius(strVal)}\n                placeholder={'Inherit'}\n                value={radius || undefined}/>\n        </FormGroup>\n    )\n};\n\ninterface IRectangleProps {\n    style: RectangleStyle,\n    onSetHeight: (height: string) => void\n    onSetWidth: (width: string) => void\n}\nconst RectangleProps: React.FunctionComponent<IRectangleProps> = props => {\n    const width = props.style.width;\n    const height = props.style.height;\n    return <>\n        <FormGroup inline={true} label={'Width'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                fill={false}\n                min={0}\n                onValueChange={(_, strVal) => props.onSetWidth(strVal)}\n                placeholder={'Inherit'}\n                value={width || undefined}\n                />\n        </FormGroup>\n        <FormGroup inline={true} label={'Height'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                min={0}\n                onValueChange={(_, strVal) => props.onSetHeight(strVal)}\n                placeholder={'Inherit'}\n                value={height || undefined}\n            />\n        </FormGroup>\n    </>;\n};\n\nfunction valueToShape (value: string): (null | 'circle' | 'rectangle') {\n    if (value === 'circle' || value === 'rectangle') return value;\n    return null;\n}\n\nexport default ShapeSelector;\n","import {\n    Button,\n    FormGroup,\n    NumericInput,\n    Popover,\n    Position\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {\n    background,\n    foreground,\n    POPPER_MODIFIERS,\n    DEFAULT_COLORS\n} from '../../../util';\n\ninterface IShapeStyle {\n    fill?: string\n    stroke?: string\n    strokeWidth?: number\n    onChangeFill: (color: string|null) => void\n    onChangeStroke: (color: string|null) => void\n    onChangeStrokeWidth: (width: string) => void\n}\n\nconst ShapeStyler: React.FunctionComponent<IShapeStyle> = props => {\n\n    const fill = props.fill;\n    const stroke = props.stroke;\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Fill'}>\n                {\n                    fill &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeFill(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(fill),\n                            color: foreground(fill)\n                        }}\n                        text={fill || 'Inherit'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(fill)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeFill(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n            <FormGroup inline={true} label={'Stroke'}>\n                {\n                    stroke &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeStroke(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(stroke),\n                            color: foreground(stroke)\n                        }}\n                        text={stroke || 'Inherit'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(stroke)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeStroke(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n            <FormGroup inline={true} label={'Stroke Width'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    min={-1}\n                    onValueChange={(_, strVal) => props.onChangeStrokeWidth(strVal)}\n                    placeholder={'Inherit'}\n                    value={props.strokeWidth}/>\n            </FormGroup>\n        </>\n    );\n};\n\nexport default ShapeStyler;\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    Divider, FormGroup,\n    NonIdealState, Switch,\n    Tooltip,\n    Tree\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport LabelStyler from '../../drawer-components/LabelStyler';\nimport { mapTreeToNodes } from '../../graphTypes';\nimport ShapeSelector from './components/ShapeSelector';\nimport ShapeStyler from './components/ShapeStyler';\nimport {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setFill,\n    setHeight,\n    setLabelColor,\n    setLabelSize,\n    setRadius,\n    setShape,\n    setStroke,\n    setStrokeWidth,\n    setWidth,\n    toggleCollapseNodeStyle,\n    toggleHideDisconnected,\n    toggleHideEmptySets\n} from './nodeStylingSlice';\n\n// Map redux state to node styling props\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.nodeStylingSlice\n});\n\n// Actions\nconst mapDispatch = {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setFill,\n    setHeight,\n    setLabelColor,\n    setLabelSize,\n    setRadius,\n    setShape,\n    setStroke,\n    setStrokeWidth,\n    setWidth,\n    toggleCollapseNodeStyle,\n    toggleHideDisconnected,\n    toggleHideEmptySets\n};\n\n// Create connector\nconst connector = connect(mapState, mapDispatch);\n\n// Create props for things from redux\ntype NodeStylingProps = ConnectedProps<typeof connector>;\n\nconst NodeStyling: React.FunctionComponent<NodeStylingProps> = props => {\n\n    const selected = props.selected;\n\n    // Hide disconnected\n    const hideDisconnected = props.selected\n        ? props.hideDisconnected.get(props.selected)\n        : false;\n\n    // Shape properties\n    const shape = selected ? props.shapes.get(selected) || {} : {};\n    const fill = shape ? shape.fill : undefined;\n    const stroke = shape ? shape.stroke : undefined;\n    const strokeWidth = shape ? shape.strokeWidth : undefined;\n\n    // Label properties\n    const label = selected ? props.labels.get(selected) || {} : {};\n    const labelColor = label ? label.color : undefined;\n    const font = label ? label.font : undefined;\n    const match = font ? font.match(/(\\d*)px/) : [];\n    const labelSize = match\n        ? match.length > 1\n            ? parseInt(match[1])\n            : undefined\n        : undefined;\n\n    // Tree properties\n    const tree = mapTreeToNodes(props.nodeTree, props.collapsed, selected);\n    const hide = props.hideEmptySets;\n    tree.secondaryLabel = (\n        <Tooltip\n            content={hide ? 'Show Empty Sets' : 'Hide Empty Sets'}>\n            <Button\n                icon={hide ? 'eye-off' : 'eye-open'}\n                minimal={true}\n                onClick={props.toggleHideEmptySets}/>\n        </Tooltip>\n    );\n\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapseNodeStyle}\n            onToggle={props.toggleCollapseNodeStyle}\n            title={'Node Styling'}>\n            <Tree\n                contents={[tree]}\n                onNodeClick={node => props.selectTreeNode(node.id.toString())}\n                onNodeCollapse={node => props.collapseTreeNode(node.id.toString())}\n                onNodeExpand={node => props.expandTreeNode(node.id.toString())}\n            />\n            <Divider/>\n            {\n                selected\n                    ? (\n                        <>\n                            <FormGroup\n                                contentClassName={'fill'}\n                                inline={true}>\n                                <Switch\n                                    alignIndicator={Alignment.RIGHT}\n                                    checked={hideDisconnected}\n                                    onChange={props.toggleHideDisconnected}\n                                    label={'Hide Disconnected Nodes'}/>\n                            </FormGroup>\n                            <ShapeSelector\n                                shape={shape}\n                                onSetHeight={props.setHeight}\n                                onSetRadius={props.setRadius}\n                                onSetShape={props.setShape}\n                                onSetWidth={props.setWidth}\n                            />\n                            <ShapeStyler\n                                fill={fill}\n                                stroke={stroke}\n                                strokeWidth={strokeWidth}\n                                onChangeFill={props.setFill}\n                                onChangeStroke={props.setStroke}\n                                onChangeStrokeWidth={props.setStrokeWidth}\n                            />\n                            <LabelStyler\n                                color={labelColor}\n                                size={labelSize}\n                                onChangeColor={props.setLabelColor}\n                                onChangeSize={props.setLabelSize}/>\n                            <ButtonGroup\n                                fill={true}\n                                minimal={true}>\n                                <Button\n                                    icon={'clean'}\n                                    onClick={props.clearCurrent}\n                                    text={'Clear Selected'}/>\n                                <Button\n                                    icon={'clean'}\n                                    onClick={props.clearAll}\n                                    text={'Clear All'}/>\n                            </ButtonGroup>\n                        </>\n                    )\n                    : (\n                        <NonIdealState\n                            title={'Node Styling'}\n                            description={'Select a type or set from the tree'}\n                            icon={'style'}/>\n                    )\n            }\n\n        </SterlingDrawer.Section>\n    );\n};\n\nexport default connector(NodeStyling);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport QuickEdgeStyling from './drawer-views/edge-styling/QuickEdgeStyling';\nimport EdgeSettings from './drawer-views/graph-settings/EdgeSettings';\nimport Layout from './drawer-views/layout/Layout';\nimport Projections from './drawer-views/projections/Projections';\nimport EdgeStyling from './drawer-views/edge-styling/EdgeStyling';\nimport GraphSettings from './drawer-views/graph-settings/GraphSettings';\nimport QuickLayout from './drawer-views/layout/QuickLayout';\nimport NodeStyling from './drawer-views/node-styling/NodeStyling';\n\n// Map redux state to graph settings props\nconst mapState = (state: RootState) => ({\n    view: state.sterlingSlice.graphView\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype GraphStageProps = ConnectedProps<typeof connector>;\n\n// The graph settings component\nconst GraphDrawer: React.FunctionComponent<GraphStageProps> = props => {\n\n    if (props.view === 'node') return (\n        <>\n            <Projections/>\n            <NodeStyling/>\n        </>\n    );\n    if (props.view === 'edge') return (\n        <>\n            <QuickEdgeStyling/>\n            <EdgeStyling/>\n        </>\n    );\n    if (props.view === 'layout') return (\n        <>\n            <QuickLayout/>\n            <Layout/>\n        </>\n    );\n    if (props.view === 'settings') return (\n        <>\n            <GraphSettings/>\n            <EdgeSettings/>\n        </>\n    );\n\n    return null;\n};\n\nexport default connector(GraphDrawer);\n","import {\n    cloneLabelStyle,\n    cloneShapeStyle, DagreLayout,\n    EdgeStyle, Graph, Node,\n    NodeStyle\n} from '@atdyer/graph-js';\nimport { NonIdealState } from '@blueprintjs/core';\nimport {\n    AlloyField,\n    AlloyInstance,\n    AlloySignature,\n    AlloySkolem\n} from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport { generateGraph } from './graphData';\n\nconst DEFAULT_EDGE_STYLES: EdgeStyle[] = [];\n\nconst DEFAULT_NODE_STYLES: NodeStyle[] = [{\n    nodes: [],\n    shape: { type: 'circle' }\n}];\n\n// Map redux state to graph settings props\nconst mapState = (state: RootState) => ({\n    asAttribute: state.graphSlice.dataSlice.asAttribute,\n    bundleFactor: state.graphSlice.graphSettingsSlice.bundleFactor,\n    description: state.sterlingSlice.welcomeDescription,\n    edgeLabelPlacement: state.graphSlice.graphSettingsSlice.edgeLabelPlacement,\n    edgeLabels: state.graphSlice.edgeStylingSlice.labelStyles,\n    graph: state.graphSlice.graphSlice.graph,\n    hideDisconnected: state.graphSlice.nodeStylingSlice.hideDisconnected,\n    instance: state.sterlingSlice.instance,\n    links: state.graphSlice.edgeStylingSlice.linkStyles,\n    nodeLabels: state.graphSlice.nodeStylingSlice.labels,\n    projections: state.graphSlice.dataSlice.projections,\n    shapes: state.graphSlice.nodeStylingSlice.shapes,\n    settings: state.graphSlice.graphSettingsSlice,\n    title: state.sterlingSlice.welcomeTitle\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype GraphStageProps = ConnectedProps<typeof connector>;\n\n// Create a node cache\nconst NODE_CACHE = new Map<string, Node>();\n\n// The graph stage component\nclass GraphStage extends React.Component<GraphStageProps> {\n\n    private _ref: React.RefObject<HTMLCanvasElement>;\n\n    constructor (props: GraphStageProps) {\n\n        super(props);\n\n        this._ref = React.createRef<HTMLCanvasElement>();\n\n    }\n\n    componentDidMount (): void {\n\n        const canvas = this._ref.current;\n        const props = this.props;\n        const graph = props.graph;\n        const instance = props.instance;\n\n        if (instance) this._update(graph, instance);\n        if (canvas) this.props.graph.canvas(canvas);\n\n        graph.update();\n\n    }\n\n    componentDidUpdate (prevProps: GraphStageProps): void {\n\n        const props = this.props;\n        const graph = props.graph;\n        const instance = props.instance;\n        const common = prevProps.instance && instance ? anyInCommon(prevProps.instance, instance) : false;\n\n        if (instance) this._update(graph, instance);\n\n        // Always update the layout for the Forge folks\n        // const didProjectionsUpdate = prevProps.projections !== props.projections;\n        //\n        // if (!prevProps.instance || props.instance !== prevProps.instance || didProjectionsUpdate) {\n        //     const dagre = new DagreLayout();\n        //     dagre.apply(graph, {\n        //         nodesep: 100,\n        //         rankdir: 'BT',\n        //         ranksep: 150\n        //     });\n        // }\n\n        if (!common) {\n            NODE_CACHE.clear();\n        }\n\n        if (!prevProps.instance || (instance && !common)) {\n            const dagre = new DagreLayout();\n            dagre.apply(graph, {\n                nodesep: 100,\n                rankdir: 'BT',\n                ranksep: 150\n            });\n        }\n\n        graph.update();\n\n    }\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        return this.props.instance\n            ? <canvas className={'graph'} ref={this._ref}/>\n            : <NonIdealState\n                title={props.title}\n                description={props.description}\n                icon={'graph'}/>;\n\n    }\n\n    private _buildEdgeStyles (): EdgeStyle[] {\n\n        const instance = this.props.instance;\n        const links = this.props.links;\n        const labels = this.props.edgeLabels;\n\n        if (!instance) return DEFAULT_EDGE_STYLES;\n\n        const fields = instance.fields();\n        const skolems = instance.skolems().filter(s => s.arity() > 1);\n\n        const toStyle = (item: AlloyField | AlloySkolem): EdgeStyle => {\n            const id = item.id();\n            return {\n                groups: [id],\n                link: links.get(id),\n                label: labels.get(id)\n            }\n        };\n\n        const fieldStyle: EdgeStyle = {\n            groups: [],\n            link: links.get('Fields'),\n            label: labels.get('Fields'),\n            children: fields.map(toStyle)\n        };\n\n        const skolemStyle: EdgeStyle = {\n            groups: [],\n            link: links.get('Skolems'),\n            label: labels.get('Skolems'),\n            children: skolems.map(toStyle)\n        };\n\n        return [fieldStyle, skolemStyle];\n\n    }\n\n    private _buildNodeStyles (): NodeStyle[] {\n\n        const instance = this.props.instance;\n        const shapes = this.props.shapes;\n        const labels = this.props.nodeLabels;\n\n        if (!instance) return DEFAULT_NODE_STYLES;\n\n        const univ = instance.signatures().find(sig => sig.id() === 'univ');\n\n        if (!univ) return DEFAULT_NODE_STYLES;\n\n        const populate = (sig: AlloySignature): NodeStyle => {\n\n            const children = sig.subTypes().map(populate);\n            const shape = shapes.get(sig.id());\n            const label = labels.get(sig.id());\n\n            return {\n                nodes: sig.atoms().map(atom => atom.name()),\n                shape: shape ? cloneShapeStyle(shape) : undefined,\n                label: label ? cloneLabelStyle(label) : undefined,\n                children\n            }\n\n        };\n\n        const styletree = populate(univ);\n        if (!styletree.shape) styletree.shape = {};\n        if (!styletree.shape.type) styletree.shape.type = 'rectangle';\n\n        return [styletree];\n\n    }\n\n    private _update (graph: Graph, instance: AlloyInstance): void {\n\n        const props = this.props;\n        const settings = props.settings;\n\n        if (instance) {\n\n            const [nodes, edges] = generateGraph(\n                instance,\n                graph.nodes(),\n                NODE_CACHE,\n                props.projections,\n                props.asAttribute,\n                props.hideDisconnected\n            );\n\n            // Cache the nodes\n            nodes.forEach(node => NODE_CACHE.set(node.id, node));\n\n            // Set the nodes and edges\n            graph.nodes(nodes);\n            graph.edges(edges);\n            graph.bundleFactor(props.bundleFactor);\n            graph.edgeLabelPlacement(props.edgeLabelPlacement);\n\n            // Create the styles\n            graph.nodeStyles(this._buildNodeStyles());\n            graph.edgeStyles(this._buildEdgeStyles());\n\n        } else {\n\n            graph.nodes([]);\n            graph.edges([]);\n\n        }\n\n        graph.axesVisible(settings.axesVisible);\n        graph.gridVisible(settings.gridVisible);\n\n        const canvas = this._ref.current;\n        if (canvas) this.props.graph.canvas(canvas);\n\n    }\n\n}\n\nfunction anyInCommon (a: AlloyInstance, b: AlloyInstance): boolean {\n    const atoms = new Set();\n    a.atoms().forEach(atom => {\n        if (!atom.type().isBuiltin()) atoms.add(atom.id());\n    });\n    const batoms = b.atoms();\n    for (let i=0; i<batoms.length; ++i) {\n        const atom = batoms[i];\n        if (!atom.type().isBuiltin() && atoms.has(atom.id())) return true;\n    }\n    return false;\n}\n\nexport default connector(GraphStage);\n","import { Edge, Node } from '@atdyer/graph-js';\nimport {\n    AlloyAtom,\n    AlloyField,\n    AlloyInstance,\n    AlloySignature,\n    AlloySkolem,\n    AlloyTuple\n} from 'alloy-ts';\nimport { Map as IMap, Set } from 'immutable';\nimport { isDefined } from 'ts-is-present';\n\nfunction generateGraph (\n    instance: AlloyInstance,\n    existingNodes: Node[],\n    nodeCache: Map<string, Node>,\n    projections: IMap<string, string>,\n    attributes: IMap<string, boolean>,\n    hideDisconnected: IMap<string, boolean>\n): [Node[], Edge[]] {\n\n    /**\n     * Need instance, existing nodes, projections, fields that are rendered as attributes, and\n     * whether or not to render disconnected nodes for each signature.\n     * With these five things we can build the set of nodes (updating any existing ones):\n     * {\n     *     id: atom name\n     *     x: 0\n     *     y: 0\n     *     labels: [\n     *         ...skolems,\n     *         ...fields as attributes\n     *     ]\n     * }\n     *\n     * and the set of edges:\n     * {\n     *     source: source node (after projections)\n     *     target: target node (after projections)\n     *     group: field or skolem name\n     *     label: field or skolem name [any atom names that fall betweet source and target]\n     * }\n     */\n\n    // Create a map of Signature objects to their projected Atom objects and a\n    // set of all projected atoms\n    const _projections: IMap<AlloySignature, AlloyAtom|undefined> = IMap(instance.signatures().map(sig => {\n        const id = sig.id();\n        return projections.has(id)\n            ? [sig, getAtom(projections.get(id)!)]\n            : [sig, undefined];\n    }));\n\n    // Project every tuple of every field, remove empty tuples and empty fields\n    const fields = IMap<AlloyField, AlloyTuple[]>(instance.fields().map(field => {\n        return [\n            field,\n            field.tuples().map(project).filter(isDefined).filter(hasAtoms)\n        ];\n    })).filter(tuples => tuples.length > 0);\n\n    // Project every tuple of every skolem, remove empty tuples and empty skolems\n    const skolems = IMap<AlloySkolem, AlloyTuple[]>(instance.skolems().map(skolem => {\n        return [\n            skolem,\n            skolem.tuples().map(project).filter(isDefined).filter(hasAtoms)\n        ];\n    })).filter(tuples => tuples.length > 0);\n\n    // Check for anything wonky happening during projection. Within a single\n    // field or skolem, the arity of every tuple should be identical and positive\n    // const fieldsOK = fields.every(tuplesSameArity);\n    // const skolemsOK = skolems.every(tuplesSameArity);\n    // if (!fieldsOK || !skolemsOK) {\n    //     console.error('OH GOD NO!!!!');\n    // } else {\n    //     console.log('HOORAY!');\n    // }\n\n    // Separate fields into those that will be edges and those that will be labels.\n    // Fields that will be labels must have an arity greater than 1 (otherwise the label would be empty)\n    const edgeFields = fields.filter((tuples, field) => !isAttribute(field) && tuples[0].arity() > 1);\n    const labelFields = fields.filter((tuples, field) => isAttribute(field) || tuples[0].arity() === 1);\n\n    // Separate skolems into those that will be edges and those that will be labels\n    const edgeSkolems = skolems.filter(tuples => tuples[0].arity() > 1);\n    const labelSkolems = skolems.filter(tuples => tuples[0].arity() === 1);\n\n    // Create an empty list for edges\n    const edges: Edge[] = [];\n\n    // Create all edges, building a set of connected atoms\n    const connected = Set<AlloyAtom>().withMutations(connected => {\n        edgeFields.forEach((tuples, field) => {\n            tuples.forEach(tuple => buildEdge(field, tuple));\n        });\n        edgeSkolems.forEach((tuples, skolem) => {\n            tuples.forEach(tuple => buildEdge(skolem, tuple));\n        });\n        function buildEdge (item: AlloyField | AlloySkolem, tuple: AlloyTuple) {\n            const atoms = tuple.atoms();\n            const source = atoms[0];\n            const target = atoms[atoms.length - 1];\n            const middle = atoms.slice(1, atoms.length - 1);\n            const label = item.name() + (middle.length ? ` [${middle.join(', ')}]` : '');\n            connected.add(source);\n            connected.add(target);\n            edges.push({\n                source: source.name(),\n                target: target.name(),\n                group: item.id(),\n                label: label\n            });\n        }\n    });\n\n    // Create the labels for each atom\n    const labelMap = IMap<AlloyAtom, string[]>()\n        .withMutations(map => {\n\n            labelFields.forEach(addLabel);\n            labelSkolems.forEach(addLabel);\n\n            function addLabel (tuples: AlloyTuple[], item: AlloyField|AlloySkolem) {\n\n                // Create a map of atoms to labels for this particular field/skolem\n                const labels = IMap<AlloyAtom, string[]>()\n                    .withMutations(labels => {\n                        tuples.forEach(tuple => {\n                            const atoms = tuple.atoms();\n                            const target = atoms[0];\n                            const label = atoms.slice(1).map(atom => atom.name()).join('->');\n                            if (!labels.has(target)) labels.set(target, []);\n                            if (label.length) labels.get(target)!.push(label);\n                        });\n                    });\n\n                // Combine all labels for this particular field/skolem and add\n                // them to the appropriate atom\n                labels.forEach((labels, atom) => {\n                    const paren = item.expressionType() === 'field' && !isAttribute(item);\n                    const joined = labels.length ? `: ${labels.join(', ')}` : '';\n                    const label = `${item.name()}${joined}`;\n                    if (!map.has(atom)) map.set(atom, []);\n                    map.get(atom)!.push(paren ? `(${label})` : label);\n                });\n\n            }\n\n        });\n\n    // Debug print\n    // labelMap.forEach((labels, atom) => console.log(atom.name(), labels));\n\n    // Create nodes\n    const nodes: Node[] = instance.atoms().map(atom => {\n\n        // First determine if the atom should be visible. It's visible if it's\n        // connected or if its type is not explicitly hidden.\n        const type = atom.type();\n        const visible = connected.has(atom) || !hideDisconnected.get(type.id());\n\n        if (visible) {\n\n            // If it's visible, look for an existing node, otherwise create a new one\n            const node = existingNodes.find(node => node.id === atom.name())\n                || nodeCache.get(atom.name())\n                || {\n                    id: atom.name(),\n                    x: 0,\n                    y: 0\n                };\n\n            // Get any labels associated with this atom\n            node.labels = labelMap.get(atom);\n\n            return node;\n\n        }\n\n        return undefined;\n\n    }).filter(isDefined);\n\n    return [nodes, edges];\n\n    /**\n     * Find an atom in the instance provided to the generateGraph function\n     * @param atom\n     */\n    function getAtom (atom: string): AlloyAtom | undefined {\n        return instance.atoms().find(a => a.name() === atom);\n    }\n\n    /**\n     * Returns true if a tuple has atoms\n     * @param tuple\n     */\n    function hasAtoms (tuple: AlloyTuple): boolean {\n        return tuple.arity() > 0;\n    }\n\n    /**\n     * Returns true if the item is to be displayed as an attribute\n     * @param item\n     */\n    function isAttribute (item: AlloyField | AlloySkolem): boolean {\n        return !!attributes.get(item.id());\n    }\n\n    /**\n     * Project a tuple using the projections provided to the generateGraph function.\n     * A tuple that has no types with projections will remain unchanged. A tuple\n     * that has projected types but any atoms of those types are not the projected\n     * atom will be removed completely (ie. return undefined). A tuple that has\n     * projected types will have a projection if all of the atoms are of their\n     * respective projected types.\n     * @param tuple\n     */\n    function project (tuple: AlloyTuple): AlloyTuple | undefined {\n\n        const projectedAtoms = tuple\n            .types()\n            .map(projectable)\n            .map(sig => _projections.get(sig));\n\n        if (projectedAtoms.some(isDefined)) {\n\n            const atoms = tuple.atoms();\n            const keep = atoms.every((atom, index) => projectedAtoms[index] === undefined || projectedAtoms[index] === atom);\n\n            if (keep) {\n\n                return new AlloyTuple(tuple.id(), atoms.filter((atom, index) => {\n                    return projectedAtoms[index] === undefined;\n                }));\n\n            }\n\n        } else {\n\n            return tuple;\n\n        }\n\n    }\n\n    /**\n     * Only top level signatures (those that are direct descendants of univ)\n     * can be projected. This function return the top level type of any signature\n     * in the instance.\n     * @param signature\n     */\n    function projectable (signature: AlloySignature): AlloySignature {\n        return signature.typeHierarchy()[1];\n    }\n\n    /**\n     * Returns true if there are tuples in the list and they are all the same arity\n     * @param tuples\n     */\n    // function tuplesSameArity (tuples: AlloyTuple[]): boolean {\n    //     if (!tuples.length) return false;\n    //     const arity = tuples[0].arity();\n    //     return tuples.every(tuple => tuple.arity() === arity);\n    // }\n\n}\n\nexport {\n    generateGraph\n}\n","import {\n    Button,\n    Classes, Navbar,\n    NavbarDivider,\n    NavbarHeading\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../rootReducer';\nimport { setMainView } from '../../../sterling/sterlingSlice';\n\nconst mapState = (state: RootState) => ({\n    view: state.sterlingSlice.mainView\n});\n\nconst mapDispatch = {\n    setMainView\n};\n\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\ntype ViewNavigationProps = ConnectedProps<typeof connector>;\n\nconst ViewGroup: React.FunctionComponent<ViewNavigationProps> = props => {\n\n    return (\n        <Navbar.Group>\n            <NavbarHeading className={'nav-heading'}>\n                Sterling\n            </NavbarHeading>\n            <NavbarDivider/>\n            <Button\n                active={props.view === 'graph'}\n                className={Classes.MINIMAL}\n                icon={'graph'}\n                large={true}\n                text={'Graph'}\n                onClick={() => props.setMainView('graph')}\n            />\n            <Button\n                active={props.view === 'table'}\n                className={Classes.MINIMAL}\n                icon={'th'}\n                large={true}\n                text={'Table'}\n                onClick={() => props.setMainView('table')}\n            />\n            <Button\n                active={props.view === 'source'}\n                className={Classes.MINIMAL}\n                icon={'document'}\n                large={true}\n                text={'Source'}\n                onClick={() => props.setMainView('source')}\n            />\n            <NavbarDivider/>\n        </Navbar.Group>\n    );\n\n};\n\nexport default connector(ViewGroup);\n","import {\n    Button,\n    Menu,\n    MenuDivider,\n    MenuItem,\n    Navbar,\n    NavbarDivider,\n    Popover,\n    Tag\n} from '@blueprintjs/core';\nimport { AlloyInstance } from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport { setInstance } from '../../sterling/sterlingSlice';\nimport ViewGroup from './components/ViewGroup';\n\nconst mapState = (state: RootState) => ({\n    instance: state.sterlingSlice.instance\n});\n\nconst mapDispatch = {\n    setInstance\n};\n\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\ntype StaticNavbarProps = ConnectedProps<typeof connector>;\n\nconst StaticNavbar: React.FunctionComponent<StaticNavbarProps> = props => {\n\n    const command = props.instance ? props.instance.command() : '';\n    const fileref = React.createRef<HTMLInputElement>();\n\n    const setInstance = (text: string | ArrayBuffer | null) => {\n        if (typeof text === 'string' && text.length) {\n            try {\n                const instance = new AlloyInstance(text);\n                props.setInstance(instance);\n            } catch (e) {\n                props.setInstance(null);\n            }\n        } else {\n            props.setInstance(null);\n        }\n    };\n\n    const onFileChange = () => {\n        if (fileref.current) {\n            const files = fileref.current.files;\n            if (files && files.length) {\n                const file = files[0];\n                const reader = new FileReader();\n                reader.addEventListener('load', event => {\n                    setInstance(event.target ? event.target.result : null);\n                });\n                reader.readAsText(file);\n            }\n        }\n    };\n\n    const fetchExample = (path: string) => {\n        fetch(path)\n            .then(response => response.text())\n            .then(setInstance)\n            .catch(() => setInstance(null));\n    };\n\n    return (\n        <Navbar fixedToTop className={'nav bp3-dark'}>\n            <ViewGroup/>\n            <Navbar.Group className={'collapsing'}>\n                {\n                    command.length > 0 &&\n                    <Tag minimal={true}>\n                        { command }\n                    </Tag>\n                }\n                <NavbarDivider/>\n                <input\n                    type={'file'}\n                    style={{ display: 'none' }}\n                    onChange={onFileChange}\n                    ref={fileref}/>\n                <Popover>\n                    <Button\n                        rightIcon={'caret-down'}\n                        intent={'success'}\n                        large={true}\n                        text={'Open'}/>\n                    <Menu>\n                        <MenuItem\n                            text={'Open XML...'}\n                            onClick={() => {\n                                if (fileref.current) {\n                                    fileref.current.click();\n                                }\n                            }}/>\n                        <MenuDivider title={'Examples'}/>\n                        <MenuItem\n                            text={'Finite Element Mesh'}\n                            onClick={() => fetchExample('examples/mesh.xml')}/>\n                        <MenuItem\n                            text={'Geneaology'}\n                            onClick={() => fetchExample('examples/genealogy.xml')}/>\n                        <MenuItem\n                            text={'Mathematical Matrix'}\n                            onClick={() => fetchExample('examples/matrix.xml')}/>\n                        <MenuItem\n                            text={'River Crossing Puzzle'}\n                            onClick={() => fetchExample('examples/river-crossing.xml')}/>\n                        <MenuItem\n                            text={'Wetting and Drying'}\n                            onClick={() => fetchExample('examples/wetdry.xml')}/>\n                    </Menu>\n                </Popover>\n            </Navbar.Group>\n        </Navbar>\n    )\n};\n\nexport default connector(StaticNavbar);\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    NonIdealState\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport SterlingDrawer from '../../sterling/SterlingDrawer';\nimport { setSelected } from './sourceSlice';\n\nconst mapState = (state: RootState) => ({\n    instance: state.sterlingSlice.instance,\n    selected: state.sourceSlice.selected\n});\n\nconst mapDispatch = {\n    setSelected\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype SourceDrawerProps = ConnectedProps<typeof connector>;\n\nconst SourcePlaceholder: React.FunctionComponent<SourceDrawerProps> = props => (\n    <NonIdealState\n        title={'No Files'}\n        icon={'document'}/>\n);\n\nconst SourceDrawer: React.FunctionComponent<SourceDrawerProps> = props => {\n\n    const instance = props.instance;\n\n    return <SterlingDrawer.Section title={'Model Sources'}>\n        {\n            instance\n                ? <ButtonGroup\n                    alignText={Alignment.LEFT}\n                    minimal={true}\n                    vertical={true}> {\n                    instance.sources().map(source => (\n                        <Button\n                            active={props.selected === source}\n                            icon={'document'}\n                            key={source.filename()}\n                            onClick={() => props.setSelected(source)}\n                            text={source.filename().split(/(\\\\|\\/)/g).pop()}/>\n                    ))\n                }</ButtonGroup>\n                : <SourcePlaceholder {...props}/>\n        }\n    </SterlingDrawer.Section>\n};\n\nexport default connector(SourceDrawer);\n","import { NonIdealState } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport { Light as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { githubGist } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { COMMENT } from 'highlight.js';\n\nconst STYLE = githubGist;\n\nSyntaxHighlighter.registerLanguage('alloy', function () {\n\n    let NUMBER_RE = '\\\\b\\\\d+';\n\n    return {\n        // case_insensitive\n        case_insensitive: false,\n\n        // keywords\n        keywords: 'abstract all and as assert but check disj ' +\n            'else exactly expect extends fact for fun iden iff implies ' +\n            'in Int let lone module no none not one open or pred ' +\n            'run set sig some sum univ',\n\n        // contains\n        contains: [\n\n            // hljs.COMMENT\n            COMMENT('//', '$', {}),\n            COMMENT('--', '$', {}),\n            COMMENT('/\\\\*', '\\\\*/', {}),\n\n            {\n                // className\n                className: 'number',\n                // begin\n                begin: NUMBER_RE,\n                // relevance\n                relevance: 0\n            }\n        ]\n    };\n});\n\nconst mapState = (state: RootState) => ({\n    instance: state.sterlingSlice.instance,\n    selected: state.sourceSlice.selected,\n    welcome: state.sterlingSlice.welcomeTitle,\n    welcomeDescription: state.sterlingSlice.welcomeDescription\n});\n\nconst connector = connect(mapState);\n\ntype SourceStageProps = ConnectedProps<typeof connector>;\n\nconst SourceStage: React.FunctionComponent<SourceStageProps> = props => {\n\n    if (!props.instance) {\n        return (\n            <NonIdealState\n                description={props.welcomeDescription}\n                icon={'document'}\n                title={props.welcome}/>\n        );\n    }\n\n    if (!props.selected) {\n        return (\n            <NonIdealState\n                description={'Choose a File'}\n                icon={'document'}\n                title={props.welcome}/>\n        );\n    }\n\n    return (\n        <SyntaxHighlighter\n            className={'source'}\n            language={'alloy'}\n            showLineNumbers={false}\n            style={STYLE}>\n            { props.selected.source() }\n        </SyntaxHighlighter>\n    );\n\n};\n\n\nexport default connector(SourceStage);\n","import {\n    Button,\n    Icon,\n    ITagProps,\n    Menu,\n    MenuDivider,\n    MenuItem\n} from '@blueprintjs/core';\nimport {\n    IItemListRendererProps,\n    IItemRendererProps,\n    ItemPredicate,\n    MultiSelect\n} from '@blueprintjs/select';\nimport { AlloyField, AlloySignature, AlloySkolem, sorting } from 'alloy-ts';\nimport * as React from 'react';\nimport { AlloyNameFn, SigFieldSkolem } from '../tableTypes';\nimport { FieldTag, SignatureTag } from '../TableTags';\n\nconst AlloySelect = MultiSelect.ofType<SigFieldSkolem>();\n\nexport interface IAlloyMultiSelectProps {\n    items: SigFieldSkolem[],\n    itemsSelected: SigFieldSkolem[],\n    onClearSelectedItems: () => void,\n    onDeselectItem: (item: SigFieldSkolem) => void,\n    onSelectItem: (item: SigFieldSkolem) => void,\n    nameFunction: AlloyNameFn\n}\n\nclass AlloyMultiSelect extends React.Component<IAlloyMultiSelectProps> {\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const sortItems = (items: SigFieldSkolem[]): SigFieldSkolem[] => {\n\n            const sigs = items.filter(item => item.expressionType() === 'signature');\n            const flds = items.filter(item => item.expressionType() === 'field');\n            const skls = items.filter(item => item.expressionType() === 'skolem');\n            const alpha = sorting.alphabeticalSort(this.props.nameFunction);\n            (sigs as AlloySignature[]).sort(alpha).sort(sorting.builtinSort());\n            (flds as AlloyField[]).sort(alpha);\n            (skls as AlloySkolem[]).sort(alpha);\n            return [...sigs, ...flds, ...skls];\n\n        };\n\n        const clearButton = this.props.itemsSelected.length\n            ? <Button\n                icon='cross'\n                minimal={true}\n                onClick={this.props.onClearSelectedItems}/>\n            : undefined;\n\n        return (\n            <AlloySelect\n                fill={true}\n                items={sortItems(props.items)}\n                itemPredicate={this._filterItem}\n                itemRenderer={this._renderItem}\n                itemListRenderer={this._renderList}\n                onItemSelect={this._onSelectItem}\n                popoverProps={{\n                    usePortal: false\n                }}\n                placeholder='Choose Tables...'\n                resetOnSelect={true}\n                scrollToActiveItem={true}\n                selectedItems={this.props.itemsSelected}\n                tagInputProps={{\n                    onRemove: this._onRemoveTag,\n                    rightElement: clearButton,\n                    tagProps: this._tagProps\n                }}\n                tagRenderer={this._renderTag}\n                />\n        )\n\n    }\n\n    /**\n     * Predicate used to determine if a query string exists in the name of a\n     * Signature, Field, or Skolem.\n     * @param query The query string\n     * @param item The Signature, Field, or Skolem\n     * @private\n     * @return Returns true if the query string appears in the name of the item,\n     * false otherwise.\n     */\n    private _filterItem: ItemPredicate<SigFieldSkolem> = (query: string, item: SigFieldSkolem): boolean => {\n\n        const name = item.expressionType() === 'field'\n            ? this.props.nameFunction(item).split('<:')[1]\n            : this.props.nameFunction(item);\n\n        return name.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n\n    };\n\n    /**\n     * Determine if an item is currently selected\n     * @param item The item in question\n     * @private\n     * @return Returns true if the item is currently selected, false otherwise\n     */\n    private _isItemSelected = (item: SigFieldSkolem) => {\n        return this.props.itemsSelected.includes(item);\n    };\n\n    /**\n     * Event handler used when a tag is removed from the current selection\n     * @param tag The tag text\n     * @param index The index of the tag in the selected items list\n     * @private\n     */\n    private _onRemoveTag = (tag: string, index: number): void => {\n        this.props.onDeselectItem(this.props.itemsSelected[index]);\n    };\n\n    /**\n     * Event handler used when an item in the list is selected\n     * @param item The selected item\n     * @private\n     */\n    private _onSelectItem = (item: SigFieldSkolem): void => {\n\n        this._isItemSelected(item)\n            ? this.props.onDeselectItem(item)\n            : this.props.onSelectItem(item);\n\n    };\n\n    /**\n     * Custom renderer for an Alloy item in the dropdown list.\n     * @param item The Alloy item to render\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderItem = (item: SigFieldSkolem, props: IItemRendererProps): React.ReactElement | null => {\n\n        if (!props.modifiers.matchesPredicate) return null;\n        switch (item.expressionType()) {\n            case 'signature':\n                return this._renderSignature(item as AlloySignature, props);\n            case 'field':\n                return this._renderField(item as AlloyField, props);\n            case 'skolem':\n                return this._renderSkolem(item as AlloySkolem, props);\n            default:\n                return null;\n        }\n\n    };\n\n    /**\n     * Custom renderer for the contents of the dropdown list. Splits list into\n     * three categories (Signatures, Fields, Skolems) sorted alphabetically.\n     * @param props Properties describing how to render a list of items\n     * @private\n     */\n    private _renderList = (props: IItemListRendererProps<SigFieldSkolem>): React.ReactElement => {\n\n        const sigs = props.items.filter(item => item.expressionType() === 'signature');\n        const flds = props.items.filter(item => item.expressionType() === 'field');\n        const skls = props.items.filter(item => item.expressionType() === 'skolem');\n        const alpha = sorting.alphabeticalSort(this.props.nameFunction);\n        (sigs as AlloySignature[]).sort(alpha).sort(sorting.builtinSort());\n        (flds as AlloyField[]).sort(alpha);\n        (skls as AlloySkolem[]).sort(alpha);\n        const renderedSigs = sigs.map(props.renderItem).filter(item => item != null);\n        const renderedFlds = flds.map(props.renderItem).filter(item => item != null);\n        const renderedSkls = skls.map(props.renderItem).filter(item => item != null);\n        return (\n            <Menu ulRef={props.itemsParentRef}>\n                <MenuDivider title='Signatures'/>\n                {renderedSigs.length ? renderedSigs : <MenuItem disabled={true} text='None'/>}\n                <MenuDivider title='Fields'/>\n                {renderedFlds.length ? renderedFlds : <MenuItem disabled={true} text='None'/>}\n                <MenuDivider title='Skolems'/>\n                {renderedSkls.length ? renderedSkls : <MenuItem disabled={true} text='None'/>}\n            </Menu>\n        );\n\n    };\n\n    /**\n     * Custom renderer for an Alloy Signature in the dropdown list\n     * @param item The Signature\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderSignature = (item: AlloySignature, props: IItemRendererProps): React.ReactElement => {\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                key={item.id()}\n                labelElement={highlightText(this.props.nameFunction(item), props.query)}\n                icon={selected ? 'tick' : 'blank'}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for an Alloy Field in the dropdown list\n     * @param item The Field\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderField = (item: AlloyField, props: IItemRendererProps) => {\n        const name = this.props.nameFunction(item);\n        const tokens = name.split('<:');\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                key={item.id()}\n                icon={<>\n                    { selected && <Icon icon='tick'/>}\n                    <SignatureTag signature={tokens[0]}/>\n                </>}\n                labelElement={highlightText(tokens[1], props.query)}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for an Alloy Skolem in the dropdown list\n     * @param item The Skolem\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderSkolem = (item: AlloySkolem, props: IItemRendererProps) => {\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                icon={selected ? 'tick' : 'blank'}\n                key={item.id()}\n                labelElement={highlightText(item.name(), props.query)}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for tags in the select. Does not actually generate a Tag,\n     * but instead returns the node that will be used as the label of the tag.\n     * @param item The Alloy item to render\n     * @private\n     */\n    private _renderTag = (item: SigFieldSkolem): React.ReactNode => {\n\n        const name = this.props.nameFunction(item);\n        return item.expressionType() === 'field'\n            ? FieldTag.FieldTagEls(name.split('<:'))\n            : name;\n\n    };\n\n    /**\n     * Custom properties to pass to each Tag based on type of item the tag\n     * represents\n     * @param value The node\n     * @param index The index of the item in the selected items list\n     * @private\n     */\n    private _tagProps = (value: React.ReactNode, index: number): ITagProps => {\n\n        const itemType = this.props.itemsSelected[index].expressionType();\n        const tag = itemType === 'signature'\n            ? 'sig-tag' : itemType === 'field'\n                ? 'field-tag' : itemType === 'skolem'\n                    ? 'skolem-tag' : '';\n        return {\n            className: tag\n        };\n\n    }\n\n}\n\nfunction highlightText (text: string, query: string) {\n    let lastIndex = 0;\n    const words = query\n        .split(/\\s+/)\n        .filter(word => word.length > 0)\n        .map(escapeRegExpChars);\n    if (words.length === 0) {\n        return [text];\n    }\n    const regexp = new RegExp(words.join(\"|\"), \"gi\");\n    const tokens: React.ReactNode[] = [];\n    while (true) {\n        const match = regexp.exec(text);\n        if (!match) {\n            break;\n        }\n        const length = match[0].length;\n        const before = text.slice(lastIndex, regexp.lastIndex - length);\n        if (before.length > 0) {\n            tokens.push(before);\n        }\n        lastIndex = regexp.lastIndex;\n        tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\n    }\n    const rest = text.slice(lastIndex);\n    if (rest.length > 0) {\n        tokens.push(rest);\n    }\n    return tokens;\n}\n\nfunction escapeRegExpChars (text: string) {\n    return text.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\n}\n\nexport default AlloyMultiSelect;\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    FormGroup,\n    Radio,\n    RadioGroup,\n    Switch\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport SterlingDrawer from '../../sterling/SterlingDrawer';\nimport AlloyMultiSelect from './drawer-components/AlloyMultiSelect';\nimport {\n    clearSelectedData,\n    deselectData,\n    selectData,\n    setAlignment,\n    setLayoutDirection,\n    setSort,\n    setTableTypes,\n    toggleCollapseData,\n    toggleCollapseLayout,\n    toggleCollapseTables,\n    toggleHighlightSkolems,\n    toggleRemoveBuiltin,\n    toggleRemoveEmpty,\n    toggleRemoveThis\n} from './tableSlice';\nimport {\n    buildNameFunction,\n    HorizontalAlignment,\n    LayoutDirection,\n    SortDirection,\n    SortMethod,\n    TablesType\n} from './tableTypes';\n\n// Map redux state to table settings props\nconst mapState = (state: RootState) => ({\n    ...state.tableSlice\n});\n\n// Actions\nconst mapDispatch = {\n    clearSelectedData,\n    deselectData,\n    selectData,\n    setAlignment,\n    setLayoutDirection,\n    setSort,\n    setTableTypes,\n    toggleCollapseData,\n    toggleCollapseLayout,\n    toggleCollapseTables,\n    toggleHighlightSkolems,\n    toggleRemoveBuiltin,\n    toggleRemoveEmpty,\n    toggleRemoveThis\n};\n\n// Connect the two\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\n// Create props for things from redux\ntype TableDrawerProps = ConnectedProps<typeof connector>;\n\n// The table settings view\nconst TableDrawer: React.FunctionComponent<TableDrawerProps> = props => {\n\n    return (\n        <>\n            <SterlingDrawer.Section\n                collapsed={props.collapseTables}\n                onToggle={props.toggleCollapseTables}\n                style={{ zIndex: 1 }}\n                title={'Tables'}>\n                <RadioGroup\n                    onChange={event => props.setTableTypes(parseInt(event.currentTarget.value))}\n                    selectedValue={props.tablesType}>\n                    <Radio label='All Tables' value={TablesType.All}/>\n                    <Radio label='Signatures' value={TablesType.Signatures}/>\n                    <Radio label='Fields' value={TablesType.Fields}/>\n                    <Radio label='Skolems' disabled={props.highlightSkolems} value={TablesType.Skolems}/>\n                    <Radio label='Choose Tables' value={TablesType.Select}/>\n                    <AlloyMultiSelect\n                        items={props.data}\n                        itemsSelected={props.dataSelected}\n                        onClearSelectedItems={props.clearSelectedData}\n                        onDeselectItem={props.deselectData}\n                        onSelectItem={props.selectData}\n                        nameFunction={buildNameFunction(props.removeThis)}/>\n                </RadioGroup>\n            </SterlingDrawer.Section>\n            <SterlingDrawer.Section\n                collapsed={props.collapseData}\n                onToggle={props.toggleCollapseData}\n                title={'Data Options'}>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.removeBuiltin}\n                    disabled={props.tablesType === TablesType.Select}\n                    label='Hide Built-in Signatures'\n                    onChange={props.toggleRemoveBuiltin}/>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.removeEmpty}\n                    disabled={props.tablesType === TablesType.Select}\n                    label='Hide Empty Tables'\n                    onChange={props.toggleRemoveEmpty}/>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.removeThis}\n                    label='Remove \"this\" from Signature names'\n                    onChange={props.toggleRemoveThis}/>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.highlightSkolems}\n                    label='Display Skolems as highlighted rows'\n                    onChange={props.toggleHighlightSkolems}/>\n            </SterlingDrawer.Section>\n            <SterlingDrawer.Section\n                collapsed={props.collapseLayout}\n                onToggle={props.toggleCollapseLayout}\n                title={'Layout Options'}>\n                <FormGroup inline={true} label='Layout Direction'>\n                    <ButtonGroup>\n                        <Button\n                            active={props.layoutDirection === LayoutDirection.Row}\n                            icon='vertical-distribution'\n                            onClick={() => props.setLayoutDirection(LayoutDirection.Row)}/>\n                        <Button\n                            active={props.layoutDirection === LayoutDirection.Column}\n                            icon='horizontal-distribution'\n                            onClick={() => props.setLayoutDirection(LayoutDirection.Column)}/>\n                    </ButtonGroup>\n                </FormGroup>\n                <FormGroup inline={true} label='Align'>\n                    <ButtonGroup>\n                        <Button\n                            active={props.alignment === HorizontalAlignment.Left}\n                            icon='align-left'\n                            onClick={() => props.setAlignment(HorizontalAlignment.Left)}/>\n                        <Button\n                            active={props.alignment === HorizontalAlignment.Center}\n                            icon='align-center'\n                            onClick={() => props.setAlignment(HorizontalAlignment.Center)}/>\n                        <Button\n                            active={props.alignment === HorizontalAlignment.Right}\n                            icon='align-right'\n                            onClick={() => props.setAlignment(HorizontalAlignment.Right)}/>\n                    </ButtonGroup>\n                </FormGroup>\n                <FormGroup inline={true} label='Sort'>\n                    <ButtonGroup>\n                        <Button\n                            icon='group-objects'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Group,\n                                    direction: SortDirection.Ascending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-alphabetical'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Alphabetical,\n                                    direction: SortDirection.Ascending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-alphabetical-desc'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Alphabetical,\n                                    direction: SortDirection.Descending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-numerical'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Size,\n                                    direction: SortDirection.Ascending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-numerical-desc'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Size,\n                                    direction: SortDirection.Descending\n                                });\n                            }}/>\n                    </ButtonGroup>\n                </FormGroup>\n            </SterlingDrawer.Section>\n        </>\n    )\n\n};\n\nexport default connector(TableDrawer);\n","import { Portal } from '@blueprintjs/core';\nimport React from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\ninterface IPopoverRowProps {\n    content: string | React.ReactElement,\n    colors: string[]\n}\n\ninterface IPopoverRowState {\n    enabled: boolean\n}\n\nexport default class PopoverRow extends React.Component<IPopoverRowProps, IPopoverRowState> {\n\n    public state = {\n        enabled: false\n    };\n\n    render (): React.ReactNode {\n\n        const colors = this.props.colors;\n        const thickness = this.state.enabled ? 4 : 2;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <tr onMouseEnter={this._onMouseEnter}\n                            onMouseLeave={this._onMouseLeave}\n                            ref={ref}\n                            style={{\n                                boxShadow: this._buildShadowStyle(colors, thickness)\n                            }}>\n                            {this.props.children}\n                        </tr>\n                    )}\n                </Reference>\n                <Portal>\n                    <Popper\n                        modifiers={{}}\n                        placement='right'>\n                        {({ ref, style, placement }) => (\n                            this.state.enabled &&\n                            <div\n                                ref={ref}\n                                style={{\n                                    ...style,\n                                    padding: (thickness * (colors.length - 1)) + 'px'\n                                }}\n                                data-placement={placement}>\n                                <div className='table-rowpop'>\n                                    {this.props.content}\n                                </div>\n                            </div>\n                        )}\n                    </Popper>\n                </Portal>\n            </Manager>\n        );\n\n    }\n\n    private _buildShadowStyle = (colors: string[], thickness: number): string => {\n        return colors.map((color: string, i: number) => {\n            return `0 0 0 ${(i+1) * thickness}px ${color}`\n        }).join(',');\n    };\n\n    private _onMouseEnter = () => {\n        this.setState({enabled: true});\n    };\n\n    private _onMouseLeave = () => {\n        this.setState({enabled: false});\n    };\n\n}\n","import { AlloySkolem } from 'alloy-ts';\nimport React from 'react';\n\nexport default function SkolemListPopover (skolems: AlloySkolem[], colors: string[]): React.ReactElement {\n\n    return (\n        <>\n            {\n                skolems.map((skolem: AlloySkolem, i: number) => {\n                    return (\n                        <div key={skolem.id()}\n                             style={{backgroundColor: colors[i]}}>\n                            { skolem.name() }\n                        </div>\n                    )\n                })\n            }\n        </>\n    )\n\n}\n","import { Card, NonIdealState } from '@blueprintjs/core';\nimport { AlloyField, AlloySignature, AlloySkolem, filtering } from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport FieldHTMLTable from './stage-components/FieldHTMLTable';\nimport SignatureHTMLTable from './stage-components/SignatureHTMLTable';\nimport SkolemHTMLTable from './stage-components/SkolemHTMLTable';\nimport { FieldTag, SignatureTag, SkolemTag } from './TableTags';\nimport {\n    getAlignClass,\n    AlloyNameFn,\n    buildNameFunction,\n    buildSortFunction,\n    getLayoutClass,\n    SigFieldSkolem,\n    TablesType\n} from './tableTypes';\n\n// Map redux state to table settings props\nconst mapState = (state: RootState) => ({\n    ...state.tableSlice,\n    description: state.sterlingSlice.welcomeDescription,\n    instance: state.sterlingSlice.instance,\n    title: state.sterlingSlice.welcomeTitle\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype TableStageProps = ConnectedProps<typeof connector>;\n\n// The table stage component\nconst TableStage: React.FunctionComponent<TableStageProps> = props => {\n\n    if (!props.instance) return (\n        <NonIdealState\n            title={props.title}\n            description={props.description}\n            icon={'th'}/>\n    );\n\n    const alignment = getAlignClass(props.alignment);\n    const direction = getLayoutClass(props.layoutDirection);\n    const nameFunction = buildNameFunction(props.removeThis);\n    const primarySort = buildSortFunction(props.primarySort, nameFunction);\n    const secondSort = buildSortFunction(props.secondarySort, nameFunction);\n    const type = props.tablesType;\n\n    let data = type === TablesType.All ? props.data :\n        type === TablesType.Signatures ? props.data.filter(filtering.keepSignatures) :\n        type === TablesType.Fields ? props.data.filter(filtering.keepFields) :\n        type === TablesType.Skolems ? props.data.filter(filtering.keepSkolems) :\n        type === TablesType.Select ? props.dataSelected.slice() : [];\n\n    const pass = () => true;\n    data = type === TablesType.Select\n        ? data\n        : data\n            .filter(props.removeBuiltin ? filtering.removeBuiltins : pass)\n            .filter(props.removeEmpty ? filtering.removeEmptys : pass)\n            .filter(props.highlightSkolems ? filtering.removeSkolems : pass);\n\n    data = data\n        .sort(secondSort)\n        .sort(primarySort);\n\n    return (\n        <div className={`tables ${alignment} ${direction}`}>\n            {\n                data.map(item => (\n                    <Card key={item.id()}\n                          elevation={1}>\n                        { buildTableHeader(item, nameFunction) }\n                        {\n                            item.expressionType() === 'signature' ?\n                                SignatureHTMLTable({\n                                    highlightSkolems: props.highlightSkolems,\n                                    signature: item as AlloySignature,\n                                    skolemColors: props.skolemColors\n                                }) :\n                            item.expressionType() === 'field' ?\n                                FieldHTMLTable({\n                                    field: item as AlloyField,\n                                    highlightSkolems: props.highlightSkolems,\n                                    nameFunction: nameFunction,\n                                    skolemColors: props.skolemColors\n                                }) :\n                            item.expressionType() === 'skolem' ?\n                                SkolemHTMLTable({\n                                    nameFunction: nameFunction,\n                                    skolem: item as AlloySkolem\n                                }) :\n                            null\n                        }\n                    </Card>\n                ))\n            }\n        </div>\n    );\n\n};\n\n\nfunction buildTableHeader (item: SigFieldSkolem, nameFunction: AlloyNameFn): React.ReactNode {\n\n    if (item.expressionType() === 'signature') {\n        return <SignatureTag\n            fill={true}\n            signature={item as AlloySignature}\n            nameFunction={nameFunction}/>;\n    }\n\n    if (item.expressionType() === 'field') {\n        return <FieldTag\n            fill={true}\n            field={item as AlloyField}\n            nameFunction={nameFunction}/>;\n    }\n\n    if (item.expressionType() === 'skolem') {\n        return <SkolemTag\n            fill={true}\n            skolem={item as AlloySkolem}\n            nameFunction={nameFunction}/>;\n    }\n\n    return null;\n\n}\n\n\nexport default connector(TableStage);\n","import { HTMLTable } from '@blueprintjs/core';\nimport { AlloyAtom, AlloySignature, AlloySkolem } from 'alloy-ts';\nimport React from 'react';\nimport PopoverRow from './PopoverRow';\nimport SkolemListPopover from './SkolemListPopover';\n\nexport interface ISignatureHTMLTableProps {\n    highlightSkolems: boolean,\n    signature: AlloySignature,\n    skolemColors: Map<AlloySkolem, string>\n}\n\nexport default function SignatureHTMLTable (props: ISignatureHTMLTableProps) {\n\n    const signature = props.signature;\n    const atoms: AlloyAtom[] = signature.atoms();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <tbody>\n            {\n                atoms.map((atom: AlloyAtom) => {\n\n                    const skolems = atom.skolems();\n\n                    if (props.highlightSkolems && skolems.length) {\n\n                        const colors = skolems.map(s => props.skolemColors.get(s) || '');\n\n                        return (\n                            <PopoverRow\n                                key={atom.id()}\n                                content={SkolemListPopover(skolems, colors)}\n                                colors={colors}>\n                                <td>{ atom.name() }</td>\n                            </PopoverRow>\n                        );\n\n                    } else {\n\n                        return (\n                            <tr key={atom.id()}>\n                                <td>{ atom.name() }</td>\n                            </tr>\n                        );\n\n                    }\n                })\n            }\n            </tbody>\n        </HTMLTable>\n    )\n}\n","import { HTMLTable } from '@blueprintjs/core';\nimport {\n    AlloyAtom,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem,\n    AlloyTuple\n} from 'alloy-ts';\nimport React from 'react';\nimport PopoverRow from './PopoverRow';\nimport SkolemListPopover from './SkolemListPopover';\n\n\nexport interface IFieldHTMLTableProps {\n    field: AlloyField,\n    highlightSkolems: boolean,\n    nameFunction: (item: AlloySignature | AlloyField | AlloySkolem) => string,\n    skolemColors: Map<AlloySkolem, string>\n}\n\nexport default function FieldHTMLTable (props: IFieldHTMLTableProps) {\n\n    const types: AlloySignature[] = props.field.types();\n    const tuples: AlloyTuple[] = props.field.tuples();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <thead>\n            <tr>\n            {\n                types.map((sig: AlloySignature, i: number) => (\n                    <th key={sig.id() + i}>\n                        {props.nameFunction(sig)}\n                    </th>\n                ))\n            }\n            </tr>\n            </thead>\n            <tbody>\n            {\n                tuples.map((tuple: AlloyTuple) => {\n\n                    const skolems = tuple.skolems();\n\n                    if (props.highlightSkolems && skolems.length) {\n\n                        const colors = skolems.map(s => props.skolemColors.get(s) || '');\n\n                        return (\n                            <PopoverRow\n                                key={tuple.id()}\n                                content={SkolemListPopover(skolems, colors)}\n                                colors={colors}>\n                                {\n                                    tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                        <td key={tuple.id() + '[' + i + ']'}>\n                                            {atom.name()}\n                                        </td>\n                                    ))\n                                }\n                            </PopoverRow>\n                        );\n\n                    } else {\n\n                        return (\n                            <tr key={tuple.id()}>\n                                {\n                                    tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                        <td key={tuple.id() + '[' + i + ']'}>\n                                            {atom.name()}\n                                        </td>\n                                    ))\n                                }\n                            </tr>\n                        )\n\n                    }\n\n                })\n            }\n            </tbody>\n        </HTMLTable>\n    )\n\n}\n","import { HTMLTable } from '@blueprintjs/core';\nimport {\n    AlloyAtom,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem,\n    AlloyTuple\n} from 'alloy-ts';\nimport React from 'react';\n\nexport interface ISkolemHTMLTableProps {\n    nameFunction: (item: AlloySignature | AlloyField | AlloySkolem) => string,\n    skolem: AlloySkolem\n}\n\nexport default function SkolemHTMLTable (props: ISkolemHTMLTableProps) {\n\n    const types: AlloySignature[] = props.skolem.types();\n    const tuples: AlloyTuple[] = props.skolem.tuples();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <thead>\n            <tr>\n            {\n                types.map((sig: AlloySignature, i: number) => (\n                    <th key={sig.id() + i}>\n                        {props.nameFunction(sig)}\n                    </th>\n                ))\n            }\n            </tr>\n            </thead>\n            <tbody>\n            {\n                tuples.map((tuple: AlloyTuple) => (\n                    <tr key={tuple.id()}>\n                        {\n                            tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                <td key={tuple.id() + '[' + i + ']'}>\n                                    {atom.name()}\n                                </td>\n                            ))\n                        }\n                    </tr>\n                ))\n            }\n            </tbody>\n        </HTMLTable>\n    );\n\n}\n","import {\n    Button,\n    IconName,\n    Intent,\n    MaybeElement,\n    Position,\n    Tooltip\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../rootReducer';\nimport {\n    setGraphView,\n    setMainView,\n    setSourceView,\n    setTableView\n} from './sterlingSlice';\n\n// Map redux state to sidebar props\nconst mapState = (state: RootState) => ({\n    ...state.sterlingSlice,\n});\n\n// Actions\nconst mapDispatch = {\n    setGraphView,\n    setMainView,\n    setSourceView,\n    setTableView\n};\n\n// Connect the two\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\n// Create props\nexport type SterlingSidebarProps = ConnectedProps<typeof connector>;\n\n// Sidebar button component props\ninterface SidebarButtonProps {\n    active: boolean\n    click: () => void\n    icon: IconName | MaybeElement\n    text: string\n}\n\n// A sidebar button\nconst SidebarButton: React.FunctionComponent<SidebarButtonProps> = props => (\n    <Tooltip\n        content={<span>{props.text}</span>}\n        hoverOpenDelay={500}\n        intent={Intent.PRIMARY}\n        position={Position.RIGHT}>\n        <Button\n            icon={props.icon}\n            minimal={true}\n            large={true}\n            active={props.active}\n            onClick={props.click}/>\n    </Tooltip>\n);\n\n// The sidebar view\nconst SterlingSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n\n    const mainview = props.mainView;\n    const evalActive =\n        (mainview === 'graph' && props.graphView === 'evaluator') ||\n        (mainview === 'table' && props.tableView === 'evaluator') ||\n        (mainview === 'source' && props.sourceView === 'evaluator');\n\n    return (\n        <div className={'sidebar nav bp3-dark'}>\n            {\n                mainview === 'graph' ? <GraphSidebar {...props}/> :\n                mainview === 'table' ? <TableSidebar {...props}/> :\n                mainview === 'source' ? <SourceSidebar {...props}/> :\n                null\n            }\n            <div className={'divider'}/>\n            <SidebarButton\n                active={evalActive}\n                click={() => {\n                    if (mainview === 'graph') props.setGraphView('evaluator');\n                    if (mainview === 'table') props.setTableView('evaluator');\n                    if (mainview === 'source') props.setSourceView('evaluator');\n                }}\n                icon={'console'}\n                text={'Evaluator'}/>\n        </div>\n    );\n\n};\n\n// The graph sidebar section\nconst GraphSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n\n    const view = props.graphView;\n\n    return (\n        <>\n            <SidebarButton\n                active={view === 'node'}\n                click={() => props.setGraphView('node')}\n                icon={'group-objects'}\n                text={'Projections and Node Styling'}/>\n            <SidebarButton\n                active={view === 'edge'}\n                click={() => props.setGraphView('edge')}\n                icon={'flows'}\n                text={'Edge Styling'}/>\n            <SidebarButton\n                active={view === 'layout'}\n                click={() => props.setGraphView('layout')}\n                icon={'layout-auto'}\n                text={'Layout'}/>\n            <SidebarButton\n                active={view === 'settings'}\n                click={() => props.setGraphView('settings')}\n                icon={'settings'}\n                text={'Graph Settings'}/>\n        </>\n    );\n\n};\n\nconst TableSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n    return (\n        <SidebarButton\n            active={props.tableView === 'settings'}\n            click={() => props.setTableView('settings')}\n            icon={'settings'}\n            text={'Table Settings'}/>\n    );\n};\n\nconst SourceSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n    return (\n        <SidebarButton\n            active={props.sourceView === 'files'}\n            click={() => props.setSourceView('files')}\n            icon={'document'}\n            text={'Model Sources'}/>\n    )\n};\n\nexport default connector(SterlingSidebar);\n","import { Button, Navbar, NavbarDivider, Tag } from '@blueprintjs/core';\nimport React from 'react';\nimport { SterlingConnection } from '../../sterling/SterlingConnection';\nimport ViewGroup from './components/ViewGroup';\n\nexport interface SterlingNavbarProps {\n    connection: SterlingConnection\n}\n\ninterface ISterlingNavbarState {\n    command: string\n    connected: boolean\n    ready: boolean\n}\n\nclass SterlingNavbar extends React.Component<SterlingNavbarProps, ISterlingNavbarState> {\n\n    constructor (props: SterlingNavbarProps) {\n\n        super(props);\n\n        this.state = {\n            command: '',\n            connected: false,\n            ready: false\n        }\n\n    }\n\n    componentDidMount (): void {\n\n        const connection = this.props.connection;\n\n        connection\n            .addEventListener('connect', () => {\n                this.setState({ connected: true });\n            })\n            .addEventListener('disconnect', () => {\n                this.setState({ connected: false, ready: false });\n            })\n            .addEventListener('instance', event => {\n                this.setState({\n                    command: event.instance.command(),\n                    ready: this.state.connected\n                });\n            });\n\n    }\n\n    render (): React.ReactNode {\n\n        const state = this.state;\n\n        return (\n            <Navbar fixedToTop className={'nav bp3-dark'}>\n                <ViewGroup/>\n                <Navbar.Group className={'collapsing'}>\n                    {\n                        state.command.length > 0 &&\n                        <Tag minimal={true}>\n                            {state.command}\n                        </Tag>\n                    }\n                    <NavbarDivider/>\n                    <Button disabled={!state.ready}\n                            intent={state.connected ? 'success' : 'danger'}\n                            large={true}\n                            onClick={this._requestNext}\n                            rightIcon={'circle-arrow-right'}\n                            text={'Next'}\n                    />\n                </Navbar.Group>\n            </Navbar>\n        )\n\n    }\n\n    private _requestNext = () => {\n\n        this.props.connection.requestNextInstance();\n\n    }\n\n}\n\nexport default SterlingNavbar;\n","import React from 'react';\n\nclass SterlingStage extends React.Component {\n\n    render (): React.ReactNode {\n\n        return (\n            <div className={'stage'}>\n                { this.props.children }\n            </div>\n        );\n\n    }\n\n}\n\nexport default SterlingStage;\n","import { FocusStyleManager, ResizeSensor } from '@blueprintjs/core';\nimport { AlloyInstance } from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport SplitPane from 'react-split-pane';\nimport { Evaluator } from '../evaluator/Evaluator';\nimport EvaluatorView, { IEvaluatorProps } from '../evaluator/EvaluatorView';\nimport GraphDrawer from '../features/graph/GraphDrawer';\nimport GraphStage from '../features/graph/GraphStage';\nimport StaticNavbar from '../features/nav/StaticNavbar';\nimport SourceDrawer from '../features/source/SourceDrawer';\nimport SourceStage from '../features/source/SourceStage';\nimport TableDrawer from '../features/table/TableDrawer';\nimport TableStage from '../features/table/TableStage';\nimport { RootState } from '../rootReducer';\nimport { SterlingConnection } from './SterlingConnection';\nimport SterlingDrawer from './SterlingDrawer';\nimport SterlingNavbar from '../features/nav/SterlingNavbar';\nimport SterlingSidebar from './SterlingSidebar';\nimport { setInstance } from './sterlingSlice';\nimport SterlingStage from './SterlingStage';\n\n\nFocusStyleManager.onlyShowFocusOnTabs();\n\n// Map redux state to sterling props\nconst mapState = (state: RootState) => ({\n    graph: state.graphSlice.graphSlice.graph,\n    ...state.sterlingSlice\n});\n\n// Actions\nconst mapDispatch = {\n    setInstance\n};\n\n// Connector\nconst connector = connect(mapState, mapDispatch);\n\n// Create props type for things from redux\ntype SterlingReduxProps = ConnectedProps<typeof connector>;\n\n// Create combined type for all props\nexport type SterlingProps = SterlingReduxProps & {\n    connection: SterlingConnection\n}\n\ninterface ISterlingState {\n    instance: AlloyInstance | null\n}\n\nclass Sterling extends React.Component<SterlingProps, ISterlingState> {\n\n    private readonly _evaluator: Evaluator;\n    private readonly _evaluatorView: React.ComponentType<IEvaluatorProps>;\n\n    constructor (props: SterlingProps) {\n\n        super(props);\n\n        this._evaluator = new Evaluator(props.connection);\n        this._evaluatorView = EvaluatorView;\n\n        this.state = {\n            instance: null\n        };\n\n    }\n\n    componentDidMount (): void {\n\n        this._initializeConnection();\n\n    }\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n        const drawerOpen =\n            (props.mainView === 'graph' && props.graphView !== null) ||\n            (props.mainView === 'table' && props.tableView !== null) ||\n            (props.mainView === 'source' && props.sourceView !== null);\n\n        return (\n            <ResizeSensor onResize={this._resize}>\n                <div className={'sterling'}>\n                    {\n                        this._getNavbar()\n                    }\n                    <SterlingSidebar/>\n                    {\n                        !drawerOpen\n                            ? this._getStage()\n                            : (\n                                <SplitPane\n                                    split={'vertical'}\n                                    defaultSize={350}\n                                    minSize={150}\n                                    maxSize={-150}\n                                    onChange={this._resize}\n                                >\n                                    { this._getDrawer() }\n                                    { this._getStage() }\n                                </SplitPane>\n                            )\n                    }\n                </div>\n            </ResizeSensor>\n        )\n\n    }\n\n    private _getDrawer = (): React.ReactNode => {\n\n        const props = this.props;\n        const Evaluator = this._evaluatorView;\n        const evalActive =\n            (props.mainView === 'graph' && props.graphView === 'evaluator') ||\n            (props.mainView === 'table' && props.tableView === 'evaluator') ||\n            (props.mainView === 'source' && props.sourceView === 'evaluator');\n\n        return <SterlingDrawer>\n            {\n                evalActive\n                    ?\n                        <Evaluator evaluator={this._evaluator}/>\n                    :\n                        props.mainView === 'graph' ? <GraphDrawer/> :\n                        props.mainView === 'table' ? <TableDrawer/> :\n                        props.mainView === 'source' ? <SourceDrawer/> :\n                        null\n\n            }\n        </SterlingDrawer>;\n\n    };\n\n    private _getNavbar = (): React.ReactNode => {\n\n        const target = process.env.REACT_APP_BUILD_TARGET;\n        switch (target) {\n            case 'static':\n                return <StaticNavbar/>;\n            case 'alloy':\n            case 'forge':\n            default:\n                return <SterlingNavbar connection={this.props.connection}/>;\n\n        }\n\n    };\n\n    private _getStage = (): React.ReactNode => {\n\n        const view = this.props.mainView;\n\n        return (\n            <SterlingStage>\n                {\n                    view === 'table' ? <TableStage/> :\n                    view === 'graph' ? <GraphStage/> :\n                    view === 'source' ? <SourceStage/> : null\n                }\n            </SterlingStage>\n        )\n\n    };\n\n    private _initializeConnection = (): void => {\n\n        const connection = this.props.connection;\n\n        connection.addEventListener('connect', () => {\n            connection.requestCurrentInstance();\n        });\n\n        connection.addEventListener('instance', event => {\n            this.props.setInstance(event.instance);\n        });\n\n        connection.connect();\n\n    };\n\n    private _resize = (): void => {\n\n        this.props.graph.resize();\n\n    }\n\n}\n\nexport default connector(Sterling);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from '@reduxjs/toolkit';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { AlloyConnection } from './connections/AlloyConnection';\nimport { ForgeConnection } from './connections/ForgeConnection';\nimport NoConnection from './connections/NoConnection';\nimport { sterlingApp } from './rootReducer';\nimport Sterling from './sterling/Sterling';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.scss';\n\nconst target = process.env.REACT_APP_BUILD_TARGET;\nconst connection = target === 'alloy' ? new AlloyConnection()\n    : target === 'forge' ? new ForgeConnection()\n    : target === 'static' ? new NoConnection()\n    : new AlloyConnection();\nconst store = createStore(sterlingApp);\n\nReactDOM.render(\n    <Provider store={store}>\n        <Sterling connection={connection}/>\n    </Provider>,\n    document.getElementById('root'))\n;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}